<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceKit.Common</name>
    </assembly>
    <members>
        <member name="T:NServiceKit.Common.ActionExecExtensions">
            <summary>An action execute extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.ActionExecExtensions.ExecAllAndWait(System.Collections.Generic.ICollection{System.Action},System.TimeSpan)">
             <summary>An ICollection&lt;Action&gt; extension method that executes all and wait operation.</summary>
            
             <param name="actions">The actions to act on.</param>
             <param name="timeout">The timeout.</param>
        </member>
        <member name="M:NServiceKit.Common.ActionExecExtensions.ExecAsync(System.Collections.Generic.IEnumerable{System.Action})">
             <summary>An IEnumerable&lt;Action&gt; extension method that executes the asynchronous operation.</summary>
            
             <param name="actions">The actions to act on.</param>
            
             <returns>A List&lt;WaitHandle&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.ActionExecExtensions.WaitAll(System.Collections.Generic.List{System.Threading.WaitHandle},System.Int32)">
             <summary>Wait all.</summary>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeoutMs">  The timeout in milliseconds.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.ActionExecExtensions.WaitAll(System.Collections.Generic.ICollection{System.Threading.WaitHandle},System.Int32)">
             <summary>Wait all.</summary>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeoutMs">  The timeout in milliseconds.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.ActionExecExtensions.WaitAll(System.Collections.Generic.ICollection{System.Threading.WaitHandle},System.TimeSpan)">
             <summary>Wait all.</summary>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeout">    The timeout.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.ActionExecExtensions.WaitAll(System.Collections.Generic.List{System.IAsyncResult},System.TimeSpan)">
             <summary>Wait all.</summary>
            
             <param name="asyncResults">The asyncResults to act on.</param>
             <param name="timeout">     The timeout.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.ActionExecExtensions.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
             <summary>Wait all.</summary>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeout">    The timeout.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.ActionExecExtensions.WaitAll(System.Threading.WaitHandle[],System.Int32)">
             <summary>Wait all.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeOutMs">  The time out in milliseconds.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.Common.AssertExtensions">
            <summary>An assert extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.AssertExtensions.ThrowOnFirstNull(System.Object[])">
             <summary>Throw on first null.</summary>
            
             <param name="objs">A variable-length parameters list containing objects.</param>
        </member>
        <member name="M:NServiceKit.Common.AssertExtensions.ThrowIfNull(System.Object)">
             <summary>An object extension method that throw if null.</summary>
            
             <param name="obj">The obj to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.AssertExtensions.ThrowIfNull(System.Object,System.String)">
             <summary>An object extension method that throw if null.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="obj">    The obj to act on.</param>
             <param name="varName">Name of the variable.</param>
        </member>
        <member name="M:NServiceKit.Common.AssertExtensions.ThrowIfNullOrEmpty(System.String)">
             <summary>An ICollection extension method that throw if null or empty.</summary>
            
             <param name="strValue">The strValue to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.AssertExtensions.ThrowIfNullOrEmpty(System.String,System.String)">
             <summary>An ICollection extension method that throw if null or empty.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="strValue">The strValue to act on.</param>
             <param name="varName"> Name of the variable.</param>
        </member>
        <member name="M:NServiceKit.Common.AssertExtensions.ThrowIfNullOrEmpty(System.Collections.ICollection)">
             <summary>An ICollection extension method that throw if null or empty.</summary>
            
             <param name="collection">The collection to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.AssertExtensions.ThrowIfNullOrEmpty(System.Collections.ICollection,System.String)">
             <summary>An ICollection extension method that throw if null or empty.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
             <exception cref="T:System.ArgumentException">    Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="collection">The collection to act on.</param>
             <param name="varName">   Name of the variable.</param>
        </member>
        <member name="M:NServiceKit.Common.AssertExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
             <summary>An ICollection&lt;T&gt; extension method that throw if null or empty.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.AssertExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
             <summary>An ICollection&lt;T&gt; extension method that throw if null or empty.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
             <exception cref="T:System.ArgumentException">    Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
             <param name="varName">   Name of the variable.</param>
        </member>
        <member name="T:NServiceKit.Common.ByteArrayExtensions">
            <summary>A byte array extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.ByteArrayExtensions.AreEqual(System.Byte[],System.Byte[])">
             <summary>A byte[] extension method that determine if we are equal.</summary>
            
             <param name="b1">The b1 to act on.</param>
             <param name="b2">The second byte[].</param>
            
             <returns>true if equal, false if not.</returns>
        </member>
        <member name="T:NServiceKit.Common.RsaKeyLengths">
            <summary>Values that represent RsaKeyLengths.</summary>
        </member>
        <member name="F:NServiceKit.Common.RsaKeyLengths.Bit1024">
            <summary>An enum constant representing the bit 1024 option.</summary>
        </member>
        <member name="F:NServiceKit.Common.RsaKeyLengths.Bit2048">
            <summary>An enum constant representing the bit 2048 option.</summary>
        </member>
        <member name="F:NServiceKit.Common.RsaKeyLengths.Bit4096">
            <summary>An enum constant representing the bit 4096 option.</summary>
        </member>
        <member name="T:NServiceKit.Common.RsaKeyPair">
            <summary>A rsa key pair.</summary>
        </member>
        <member name="P:NServiceKit.Common.RsaKeyPair.PrivateKey">
             <summary>Gets or sets the private key.</summary>
            
             <value>The private key.</value>
        </member>
        <member name="P:NServiceKit.Common.RsaKeyPair.PublicKey">
             <summary>Gets or sets the public key.</summary>
            
             <value>The public key.</value>
        </member>
        <member name="T:NServiceKit.Common.CryptUtils">
            <summary>
            Useful .NET Encryption Utils from:
            http://andrewlocatelliwoodcock.com/2011/08/01/implementing-rsa-asymmetric-public-private-key-encryption-in-c-encrypting-under-the-public-key/
            </summary>
        </member>
        <member name="M:NServiceKit.Common.CryptUtils.Encrypt(System.String)">
             <summary>Encrypt an arbitrary string of data under the supplied public key.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="data">The data to encrypt.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.CryptUtils.Decrypt(System.String)">
             <summary>Decrypts.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="data">The data to encrypt.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="F:NServiceKit.Common.CryptUtils.Length">
            <summary>The length.</summary>
        </member>
        <member name="F:NServiceKit.Common.CryptUtils.KeyPair">
            <summary>The key pair.</summary>
        </member>
        <member name="M:NServiceKit.Common.CryptUtils.Encrypt(System.String,System.String,NServiceKit.Common.RsaKeyLengths)">
            <summary>
            Encrypt an arbitrary string of data under the supplied public key
            </summary>
            <param name="publicKey">The public key to encrypt under</param>
            <param name="data">The data to encrypt</param>
            <param name="length">The bit length or strength of the public key: 1024, 2048 or 4096 bits. This must match the 
            value actually used to create the publicKey</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.CryptUtils.Decrypt(System.String,System.String,NServiceKit.Common.RsaKeyLengths)">
             <summary>Decrypts.</summary>
            
             <param name="privateKey">The private key.</param>
             <param name="data">      The data to encrypt.</param>
             <param name="length">    The bit length or strength of the public key: 1024, 2048 or 4096 bits. This must match the value actually used to create the publicKey.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.CryptUtils.CreatePublicAndPrivateKeyPair(NServiceKit.Common.RsaKeyLengths)">
             <summary>Create Public and Private Key Pair based on settings already in static class.</summary>
            
             <param name="length">The bit length or strength of the public key: 1024, 2048 or 4096 bits. This must match the value actually used to create the publicKey.</param>
            
             <returns>RsaKeyPair.</returns>
        </member>
        <member name="M:NServiceKit.Common.CryptUtils.CreatePublicAndPrivateKeyPair">
            <summary>
            Create Public and Private Key Pair based on settings already in static class.
            </summary>        
            <returns>RsaKeyPair</returns>
        </member>
        <member name="T:NServiceKit.Common.DictionaryExtensions">
            <summary>A dictionary extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``1,``0},``1)">
             <summary>A Dictionary&lt;TKey,TValue&gt; extension method that gets value or default.</summary>
            
             <typeparam name="TValue">Type of the value.</typeparam>
             <typeparam name="TKey">  Type of the key.</typeparam>
             <param name="dictionary">The dictionary to act on.</param>
             <param name="key">       The key to act on.</param>
            
             <returns>The value or default.</returns>
        </member>
        <member name="M:NServiceKit.Common.DictionaryExtensions.ForEach``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{``0,``1})">
             <summary>A Dictionary&lt;TKey,TValue&gt; extension method that applies an operation to all items in this collection.</summary>
            
             <typeparam name="TKey">  Type of the key.</typeparam>
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="dictionary">The dictionary to act on.</param>
             <param name="onEachFn">  The on each function.</param>
        </member>
        <member name="M:NServiceKit.Common.DictionaryExtensions.EquivalentTo``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
             <summary>An IDictionary&lt;K,V&gt; extension method that equivalent to.</summary>
            
             <typeparam name="K">Generic type parameter.</typeparam>
             <typeparam name="V">Generic type parameter.</typeparam>
             <param name="thisMap"> The thisMap to act on.</param>
             <param name="otherMap">The other map.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.DictionaryExtensions.ConvertAll``3(System.Collections.Generic.IDictionary{``1,``2},System.Func{``1,``2,``0})">
             <summary>Convert all.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <typeparam name="K">Generic type parameter.</typeparam>
             <typeparam name="V">Generic type parameter.</typeparam>
             <param name="map">     The map to act on.</param>
             <param name="createFn">The create function.</param>
            
             <returns>all converted.</returns>
        </member>
        <member name="M:NServiceKit.Common.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
             <summary>A Dictionary&lt;K,V&gt; extension method that gets or add.</summary>
            
             <typeparam name="K">Generic type parameter.</typeparam>
             <typeparam name="V">Generic type parameter.</typeparam>
             <param name="map">     The map to act on.</param>
             <param name="key">     The key to act on.</param>
             <param name="createFn">The create function.</param>
            
             <returns>The or add.</returns>
        </member>
        <member name="M:NServiceKit.Common.DictionaryExtensions.PairWith``2(``0,``1)">
             <summary>A TKey extension method that pair with.</summary>
            
             <typeparam name="TKey">  Type of the key.</typeparam>
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="key">  The key to act on.</param>
             <param name="value">The value.</param>
            
             <returns>A KeyValuePair&lt;TKey,TValue&gt;</returns>
        </member>
        <member name="T:NServiceKit.Common.DirectoryInfoExtensions">
            <summary>A directory information extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.DirectoryInfoExtensions.GetMatchingFiles(System.IO.DirectoryInfo,System.String)">
             <summary>Gets the matching files in this collection.</summary>
            
             <param name="rootDirPath">      Pathname of the root directory.</param>
             <param name="fileSearchPattern">A pattern specifying the file search.</param>
            
             <returns>An enumerator that allows foreach to be used to process the matching files in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Common.DirectoryInfoExtensions.GetMatchingFiles(System.String,System.String)">
             <summary>Gets the matching files in this collection.</summary>
            
             <param name="rootDirPath">      Pathname of the root directory.</param>
             <param name="fileSearchPattern">A pattern specifying the file search.</param>
            
             <returns>An enumerator that allows foreach to be used to process the matching files in this collection.</returns>
        </member>
        <member name="T:NServiceKit.Common.DisposableExtensions">
            <summary>A disposable extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.DisposableExtensions.Dispose(System.Collections.Generic.IEnumerable{System.IDisposable},NServiceKit.Logging.ILog)">
             <summary>Releases the unmanaged resources used by the NServiceKit.Common.DisposableExtensions and optionally releases the managed resources.</summary>
            
             <param name="resources">The resources to act on.</param>
             <param name="log">      The log.</param>
        </member>
        <member name="M:NServiceKit.Common.DisposableExtensions.Dispose(System.Collections.Generic.IEnumerable{System.IDisposable})">
             <summary>Releases the unmanaged resources used by the NServiceKit.Common.DisposableExtensions and optionally releases the managed resources.</summary>
            
             <param name="resources">The resources to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.DisposableExtensions.Dispose(System.IDisposable[])">
             <summary>Releases the unmanaged resources used by the NServiceKit.Common.DisposableExtensions and optionally releases the managed resources.</summary>
            
             <param name="disposables">A variable-length parameters list containing disposables.</param>
        </member>
        <member name="M:NServiceKit.Common.DisposableExtensions.Run``1(``0,System.Action{``0})">
             <summary>A T extension method that runs.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="disposable">          The disposable to act on.</param>
             <param name="runActionThenDispose">The run action then dispose.</param>
        </member>
        <member name="T:NServiceKit.Common.EnumerableExtensions">
            <summary>An enumerable extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
             <summary>An ICollection&lt;T&gt; extension method that query if 'collection' is empty.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
            
             <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that converts the items to a hash set.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="items">The items to act on.</param>
            
             <returns>items as a HashSet&lt;T&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.SafeConvertAll``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
             <summary>An IEnumerable&lt;From&gt; extension method that safe convert all.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="items">    The items to act on.</param>
             <param name="converter">The converter.</param>
            
             <returns>A List&lt;To&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.ToObjects``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that converts the items to the objects.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="items">The items to act on.</param>
            
             <returns>items as a List&lt;object&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.FirstNonDefaultOrEmpty(System.Collections.Generic.IEnumerable{System.String})">
             <summary>An IEnumerable&lt;string&gt; extension method that first non default or empty.</summary>
            
             <param name="values">The values to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.FirstNonDefault``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that first non default.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="values">The values to act on.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.EquivalentTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that equivalent to.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="thisList"> The thisList to act on.</param>
             <param name="otherList">List of others.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.BatchesOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
             <summary>Enumerates batches of in this collection.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="sequence"> The sequence to act on.</param>
             <param name="batchSize">Size of the batch.</param>
            
             <returns>An enumerator that allows foreach to be used to process batches of in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.ToSafeDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
             <summary>An IEnumerable&lt;T&gt; extension method that converts this object to a safe dictionary.</summary>
            
             <typeparam name="T">   Generic type parameter.</typeparam>
             <typeparam name="TKey">Type of the key.</typeparam>
             <param name="list">The list to act on.</param>
             <param name="expr">The expression.</param>
            
             <returns>The given data converted to a Dictionary&lt;TKey,T&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumerableExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
             <summary>An IEnumerable&lt;T&gt; extension method that converts this object to a dictionary.</summary>
            
             <typeparam name="T">     Generic type parameter.</typeparam>
             <typeparam name="TKey">  Type of the key.</typeparam>
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="list">The list to act on.</param>
             <param name="map"> The map.</param>
            
             <returns>The given data converted to a Dictionary&lt;TKey,TValue&gt;</returns>
        </member>
        <member name="T:NServiceKit.Common.EnumExtensions">
            <summary>An enum extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Gets the textual description of the enum if it has one. e.g.
            
            <code>
            enum UserColors
            {
                [Description("Bright Red")]
                BrightRed
            }
            UserColors.BrightRed.ToDescription();
            </code>
            </summary>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.EnumExtensions.ToList(System.Enum)">
             <summary>An Enum extension method that converts a @enum to a list.</summary>
            
             <param name="enum">The @enum to act on.</param>
            
             <returns>@enum as a List&lt;string&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumExtensions.Has``1(System.Enum,``0)">
             <summary>An Enum extension method that has.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="enum"> The @enum to act on.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumExtensions.Is``1(System.Enum,``0)">
             <summary>An Enum extension method that is.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="enum"> The @enum to act on.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumExtensions.Add``1(System.Enum,``0)">
             <summary>An Enum extension method that adds @enum.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="enum"> The @enum to act on.</param>
             <param name="value">The value.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Common.EnumExtensions.Remove``1(System.Enum,``0)">
             <summary>An Enum extension method that removes this object.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="enum"> The @enum to act on.</param>
             <param name="value">The value.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="T:NServiceKit.Common.ExecExtensions">
            <summary>An execute extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.ExecExtensions.LogError(System.Type,System.String,System.Exception)">
             <summary>Logs an error.</summary>
            
             <param name="declaringType">   Type of the declaring.</param>
             <param name="clientMethodName">Name of the client method.</param>
             <param name="ex">              The ex.</param>
        </member>
        <member name="M:NServiceKit.Common.ExecExtensions.ExecAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that executes all operation.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="instances">The instances to act on.</param>
             <param name="action">   The action.</param>
        </member>
        <member name="M:NServiceKit.Common.ExecExtensions.ExecAllWithFirstOut``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1@)">
             <summary>An IEnumerable&lt;T&gt; extension method that executes all with first out operation.</summary>
            
             <typeparam name="T">      Generic type parameter.</typeparam>
             <typeparam name="TReturn">Type of the return.</typeparam>
             <param name="instances">  The instances to act on.</param>
             <param name="action">     The action.</param>
             <param name="firstResult">The first result.</param>
        </member>
        <member name="M:NServiceKit.Common.ExecExtensions.ExecReturnFirstWithResult``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
             <summary>An IEnumerable&lt;T&gt; extension method that executes the return first with result operation.</summary>
            
             <typeparam name="T">      Generic type parameter.</typeparam>
             <typeparam name="TReturn">Type of the return.</typeparam>
             <param name="instances">The instances to act on.</param>
             <param name="action">   The action.</param>
            
             <returns>A TReturn.</returns>
        </member>
        <member name="M:NServiceKit.Common.ExecExtensions.RetryUntilTrue(System.Func{System.Boolean},System.Nullable{System.TimeSpan})">
             <summary>Retry until true.</summary>
            
             <exception cref="T:System.TimeoutException">Thrown when a Timeout error condition occurs.</exception>
            
             <param name="action"> The action.</param>
             <param name="timeOut">The time out.</param>
        </member>
        <member name="M:NServiceKit.Common.ExecExtensions.RetryOnException(System.Action,System.Nullable{System.TimeSpan})">
             <summary>Retry on exception.</summary>
            
             <exception cref="T:System.TimeoutException">Thrown when a Timeout error condition occurs.</exception>
            
             <param name="action"> The action.</param>
             <param name="timeOut">The time out.</param>
        </member>
        <member name="M:NServiceKit.Common.ExecExtensions.RetryOnException(System.Action,System.Int32)">
             <summary>Retry on exception.</summary>
            
             <param name="action">    The action.</param>
             <param name="maxRetries">The maximum retries.</param>
        </member>
        <member name="T:NServiceKit.Common.Expressions.DelegateFactory">
            <summary>A delegate factory.</summary>
        </member>
        <member name="M:NServiceKit.Common.Expressions.DelegateFactory.Create(System.Reflection.MethodInfo)">
             <summary>Creates a new LateBoundMethod.</summary>
            
             <param name="method">The method.</param>
            
             <returns>A LateBoundMethod.</returns>
        </member>
        <member name="M:NServiceKit.Common.Expressions.DelegateFactory.CreateVoid(System.Reflection.MethodInfo)">
             <summary>Creates a void.</summary>
            
             <param name="method">The method.</param>
            
             <returns>The new void.</returns>
        </member>
        <member name="T:NServiceKit.Common.Expressions.DelegateFactory.LateBoundMethod">
             <summary>Late bound method.</summary>
            
             <param name="target">   Target for the.</param>
             <param name="arguments">The arguments.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.Common.Expressions.DelegateFactory.LateBoundVoid">
             <summary>Late bound void.</summary>
            
             <param name="target">   Target for the.</param>
             <param name="arguments">The arguments.</param>
        </member>
        <member name="T:NServiceKit.Common.Extensions.ExtensionsProxy">
            <summary>The extensions proxy.</summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.ExtensionsProxy.ExecAllAndWait(System.Collections.Generic.ICollection{System.Action},System.TimeSpan)">
             <summary>An ICollection&lt;Action&gt; extension method that executes all and wait operation.</summary>
            
             <param name="actions">The actions to act on.</param>
             <param name="timeout">The timeout.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.ExtensionsProxy.ExecAsync(System.Collections.Generic.IEnumerable{System.Action})">
             <summary>An IEnumerable&lt;Action&gt; extension method that executes the asynchronous operation.</summary>
            
             <param name="actions">The actions to act on.</param>
            
             <returns>A List&lt;WaitHandle&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.ExtensionsProxy.WaitAll(System.Collections.Generic.List{System.Threading.WaitHandle},System.Int32)">
             <summary>Wait all.</summary>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeoutMs">  The timeout in milliseconds.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.ExtensionsProxy.WaitAll(System.Collections.Generic.ICollection{System.Threading.WaitHandle},System.Int32)">
             <summary>Wait all.</summary>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeoutMs">  The timeout in milliseconds.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.ExtensionsProxy.WaitAll(System.Collections.Generic.ICollection{System.Threading.WaitHandle},System.TimeSpan)">
             <summary>Wait all.</summary>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeout">    The timeout.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.ExtensionsProxy.WaitAll(System.Collections.Generic.List{System.IAsyncResult},System.TimeSpan)">
             <summary>Wait all.</summary>
            
             <param name="asyncResults">The asyncResults to act on.</param>
             <param name="timeout">     The timeout.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.ExtensionsProxy.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
             <summary>Wait all.</summary>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeout">    The timeout.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.ExtensionsProxy.WaitAll(System.Threading.WaitHandle[],System.Int32)">
             <summary>Wait all.</summary>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeOutMs">  The time out in milliseconds.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.Common.Extensions.AssertExtensions">
            <summary>An assert extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.AssertExtensions.ThrowOnFirstNull(System.Object[])">
             <summary>Throw on first null.</summary>
            
             <param name="objs">A variable-length parameters list containing objects.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.AssertExtensions.ThrowIfNull(System.Object)">
             <summary>An object extension method that throw if null.</summary>
            
             <param name="obj">The obj to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.AssertExtensions.ThrowIfNull(System.Object,System.String)">
             <summary>An object extension method that throw if null.</summary>
            
             <param name="obj">    The obj to act on.</param>
             <param name="varName">Name of the variable.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.AssertExtensions.ThrowIfNullOrEmpty(System.String)">
             <summary>An ICollection extension method that throw if null or empty.</summary>
            
             <param name="strValue">The strValue to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.AssertExtensions.ThrowIfNullOrEmpty(System.String,System.String)">
             <summary>An ICollection extension method that throw if null or empty.</summary>
            
             <param name="strValue">The strValue to act on.</param>
             <param name="varName"> Name of the variable.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.AssertExtensions.ThrowIfNullOrEmpty(System.Collections.ICollection)">
             <summary>An ICollection extension method that throw if null or empty.</summary>
            
             <param name="collection">The collection to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.AssertExtensions.ThrowIfNullOrEmpty(System.Collections.ICollection,System.String)">
             <summary>An ICollection extension method that throw if null or empty.</summary>
            
             <param name="collection">The collection to act on.</param>
             <param name="varName">   Name of the variable.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.AssertExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
             <summary>An ICollection&lt;T&gt; extension method that throw if null or empty.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.AssertExtensions.ThrowIfNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
             <summary>An ICollection&lt;T&gt; extension method that throw if null or empty.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
             <param name="varName">   Name of the variable.</param>
        </member>
        <member name="T:NServiceKit.Common.Extensions.ByteArrayExtensions">
            <summary>A byte array extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.ByteArrayExtensions.AreEqual(System.Byte[],System.Byte[])">
             <summary>A byte[] extension method that determine if we are equal.</summary>
            
             <param name="b1">The b1 to act on.</param>
             <param name="b2">The second byte[].</param>
            
             <returns>true if equal, false if not.</returns>
        </member>
        <member name="T:NServiceKit.Common.Extensions.CollectionExtensions">
            <summary>A collection extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
             <summary>An ICollection&lt;T&gt; extension method that query if 'collection' is empty.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
            
             <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.CollectionExtensions.ConvertAll``1(System.Collections.ICollection,System.Func{System.Object,``0})">
             <summary>An ICollection extension method that convert all.</summary>
            
             <typeparam name="To">Type of to.</typeparam>
             <param name="items">    The items to act on.</param>
             <param name="converter">The converter.</param>
            
             <returns>all converted.</returns>
        </member>
        <member name="T:NServiceKit.Common.Extensions.DictionaryExtensions">
            <summary>A dictionary extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``1,``0},``1)">
             <summary>A Dictionary&lt;TKey,TValue&gt; extension method that gets value or default.</summary>
            
             <typeparam name="TValue">Type of the value.</typeparam>
             <typeparam name="TKey">  Type of the key.</typeparam>
             <param name="dictionary">The dictionary to act on.</param>
             <param name="key">       The key.</param>
            
             <returns>The value or default.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.DictionaryExtensions.ForEach``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{``0,``1})">
             <summary>A Dictionary&lt;TKey,TValue&gt; extension method that applies an operation to all items in this collection.</summary>
            
             <typeparam name="TKey">  Type of the key.</typeparam>
             <typeparam name="TValue">Type of the value.</typeparam>
             <param name="dictionary">The dictionary to act on.</param>
             <param name="onEachFn">  The on each function.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.DictionaryExtensions.EquivalentTo``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
             <summary>An IDictionary&lt;K,V&gt; extension method that equivalent to.</summary>
            
             <typeparam name="K">Generic type parameter.</typeparam>
             <typeparam name="V">Generic type parameter.</typeparam>
             <param name="thisMap"> The thisMap to act on.</param>
             <param name="otherMap">The other map.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.DictionaryExtensions.ConvertAll``3(System.Collections.Generic.IDictionary{``1,``2},System.Func{``1,``2,``0})">
             <summary>Convert all.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <typeparam name="K">Generic type parameter.</typeparam>
             <typeparam name="V">Generic type parameter.</typeparam>
             <param name="map">     The map.</param>
             <param name="createFn">The create function.</param>
            
             <returns>all converted.</returns>
        </member>
        <member name="T:NServiceKit.Common.Extensions.EnumerableExtensions">
            <summary>
            These extensions have a potential to conflict with the LINQ extensions methods so
            leaving the implmentation in the 'Extensions' sub-namespace to force explicit opt-in
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that applies an operation to all items in this collection.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="values">The values to act on.</param>
             <param name="action">The action.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.ConvertAll``1(System.Collections.IEnumerable,System.Func{System.Object,``0})">
             <summary>An IEnumerable extension method that convert all.</summary>
            
             <typeparam name="To">Type of to.</typeparam>
             <param name="items">    The items to act on.</param>
             <param name="converter">The converter.</param>
            
             <returns>all converted.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.First(System.Collections.IEnumerable)">
             <summary>An IEnumerable extension method that firsts the given items.</summary>
            
             <param name="items">The items to act on.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.ToList``1(System.Collections.IEnumerable)">
             <summary>An IEnumerable extension method that converts the items to a list.</summary>
            
             <typeparam name="To">Type of to.</typeparam>
             <param name="items">The items to act on.</param>
            
             <returns>items as a List&lt;To&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.ConvertAll``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
             <summary>An IEnumerable&lt;From&gt; extension method that convert all.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="items">    The items to act on.</param>
             <param name="converter">The converter.</param>
            
             <returns>all converted.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that converts the items to a hash set.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="items">The items to act on.</param>
            
             <returns>items as a HashSet&lt;T&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.SafeConvertAll``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
             <summary>An IEnumerable&lt;From&gt; extension method that safe convert all.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="items">    The items to act on.</param>
             <param name="converter">The converter.</param>
            
             <returns>A List&lt;To&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.ToObjects``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that converts the items to the objects.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="items">The items to act on.</param>
            
             <returns>items as a List&lt;object&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.FirstNonDefaultOrEmpty(System.Collections.Generic.IEnumerable{System.String})">
             <summary>An IEnumerable&lt;string&gt; extension method that first non default or empty.</summary>
            
             <param name="values">The values to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.FirstNonDefault``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that first non default.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="values">The values to act on.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.EnumerableExtensions.EquivalentTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
             <summary>An IEnumerable&lt;T&gt; extension method that equivalent to.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="thisList"> The thisList to act on.</param>
             <param name="otherList">List of others.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.Common.Extensions.IntExtensions">
            <summary>An int extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IntExtensions.Times(System.Int32)">
             <summary>An int extension method that times.</summary>
            
             <param name="times">The times to act on.</param>
            
             <returns>An enumerator that allows foreach to be used to process times in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
             <summary>An int extension method that times.</summary>
            
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IntExtensions.Times(System.Int32,System.Action)">
             <summary>An int extension method that times.</summary>
            
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IntExtensions.TimesAsync(System.Int32,System.Action{System.Int32})">
             <summary>An int extension method that times asynchronous.</summary>
            
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
            
             <returns>A List&lt;IAsyncResult&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IntExtensions.TimesAsync(System.Int32,System.Action)">
             <summary>An int extension method that times asynchronous.</summary>
            
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
            
             <returns>A List&lt;IAsyncResult&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IntExtensions.Times``1(System.Int32,System.Func{``0})">
             <summary>An int extension method that times.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
            
             <returns>A List&lt;T&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IntExtensions.Times``1(System.Int32,System.Func{System.Int32,``0})">
             <summary>An int extension method that times.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
            
             <returns>A List&lt;T&gt;</returns>
        </member>
        <member name="T:NServiceKit.Common.Extensions.TranslatorExtensions">
            <summary>A translator extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.TranslatorExtensions.ParseAll``2(NServiceKit.DesignPatterns.Translator.ITranslator{``0,``1},System.Collections.Generic.IEnumerable{``1})">
             <summary>Methods.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="translator">The translator to act on.</param>
             <param name="from">      Source for the.</param>
            
             <returns>A List&lt;To&gt;</returns>
        </member>
        <member name="T:NServiceKit.Common.Extensions.StringExtensions">
            <summary>A string extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.ToEnum``1(System.String)">
             <summary>A string extension method that converts a value to an enum.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="value">The value to act on.</param>
            
             <returns>value as a T.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.ToEnumOrDefault``1(System.String,``0)">
             <summary>A string extension method that converts this object to an enum or default.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="value">       The value to act on.</param>
             <param name="defaultValue">The default value.</param>
            
             <returns>The given data converted to a T.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.SplitCamelCase(System.String)">
             <summary>A string extension method that splits camel case.</summary>
            
             <param name="value">The value to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.ToEnglish(System.String)">
             <summary>A string extension method that converts a camelCase to an english.</summary>
            
             <param name="camelCase">The camelCase to act on.</param>
            
             <returns>camelCase as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.IsEmpty(System.String)">
             <summary>A string extension method that query if 'value' is empty.</summary>
            
             <param name="value">The value to act on.</param>
            
             <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
             <summary>A string extension method that queries if a null or is empty.</summary>
            
             <param name="value">The value to act on.</param>
            
             <returns>true if a null or is empty, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
             <summary>A string extension method that equals ignore case.</summary>
            
             <param name="value">The value to act on.</param>
             <param name="other">The other.</param>
            
             <returns>true if equals ignore case, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.ReplaceFirst(System.String,System.String,System.String)">
             <summary>A string extension method that replace first.</summary>
            
             <param name="haystack">   The haystack to act on.</param>
             <param name="needle">     The needle.</param>
             <param name="replacement">The replacement.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.ReplaceAll(System.String,System.String,System.String)">
             <summary>A string extension method that replace all.</summary>
            
             <param name="haystack">   The haystack to act on.</param>
             <param name="needle">     The needle.</param>
             <param name="replacement">The replacement.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.ContainsAny(System.String,System.String[])">
             <summary>A string extension method that query if 'text' contains any.</summary>
            
             <param name="text">       The text to act on.</param>
             <param name="testMatches">A variable-length parameters list containing test matches.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.SafeVarName(System.String)">
             <summary>A string extension method that safe variable name.</summary>
            
             <param name="text">The text to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.Join(System.Collections.Generic.List{System.String})">
             <summary>A List&lt;string&gt; extension method that joins.</summary>
            
             <param name="items">The items to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.StringExtensions.Join(System.Collections.Generic.List{System.String},System.String)">
             <summary>A List&lt;string&gt; extension method that joins.</summary>
            
             <param name="items">    The items to act on.</param>
             <param name="delimeter">The delimeter.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="T:NServiceKit.Common.HostContext">
            <summary>A host context.</summary>
        </member>
        <member name="F:NServiceKit.Common.HostContext.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="M:NServiceKit.Common.HostContext.GetOrCreate``1(System.Func{``0})">
             <summary>Gets or create.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="createFn">The create function.</param>
            
             <returns>The or create.</returns>
        </member>
        <member name="M:NServiceKit.Common.HostContext.EndRequest">
            <summary>Ends a request.</summary>
        </member>
        <member name="M:NServiceKit.Common.HostContext.TrackDisposable(System.IDisposable)">
            <summary>
            Track any IDisposable's to dispose of at the end of the request in IAppHost.OnEndRequest()
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:NServiceKit.Common.HostContext.Items">
            <summary>
            Gets a list of items for this request. 
            </summary>
            <remarks>This list will be cleared on every request and is specific to the original thread that is handling the request.
            If a handler uses additional threads, this data will not be available on those threads.
            </remarks>
        </member>
        <member name="T:NServiceKit.Common.DispsableTracker">
            <summary>A dispsable tracker.</summary>
        </member>
        <member name="F:NServiceKit.Common.DispsableTracker.HashId">
            <summary>Identifier for the hash.</summary>
        </member>
        <member name="M:NServiceKit.Common.DispsableTracker.Add(System.IDisposable)">
             <summary>Adds instance.</summary>
            
             <param name="instance">The instance to add.</param>
        </member>
        <member name="M:NServiceKit.Common.DispsableTracker.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:NServiceKit.Common.IntExtensions">
            <summary>An int extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.IntExtensions.Times(System.Int32)">
             <summary>An int extension method that times.</summary>
            
             <param name="times">The times to act on.</param>
            
             <returns>An enumerator that allows foreach to be used to process times in this collection.</returns>
        </member>
        <member name="M:NServiceKit.Common.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
             <summary>An int extension method that times.</summary>
            
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
        </member>
        <member name="M:NServiceKit.Common.IntExtensions.Times(System.Int32,System.Action)">
             <summary>An int extension method that times.</summary>
            
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
        </member>
        <member name="M:NServiceKit.Common.IntExtensions.TimesAsync(System.Int32,System.Action{System.Int32})">
             <summary>An int extension method that times asynchronous.</summary>
            
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
            
             <returns>A List&lt;IAsyncResult&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.IntExtensions.TimesAsync(System.Int32,System.Action)">
             <summary>An int extension method that times asynchronous.</summary>
            
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
            
             <returns>A List&lt;IAsyncResult&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.IntExtensions.Times``1(System.Int32,System.Func{``0})">
             <summary>An int extension method that times.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
            
             <returns>A List&lt;T&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.IntExtensions.Times``1(System.Int32,System.Func{System.Int32,``0})">
             <summary>An int extension method that times.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="times">   The times to act on.</param>
             <param name="actionFn">The action function.</param>
            
             <returns>A List&lt;T&gt;</returns>
        </member>
        <member name="T:NServiceKit.Common.Extensions.IPAddressExtensions">
            <summary>
            Useful IPAddressExtensions from: 
            http://blogs.msdn.com/knom/archive/2008/12/31/ip-address-calculations-with-c-subnetmasks-networks.aspx
            
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IPAddressExtensions.GetBroadcastAddress(System.Net.IPAddress,System.Net.IPAddress)">
             <summary>The IPAddress extension method that gets broadcast address.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="address">   The address.</param>
             <param name="subnetMask">The subnet mask.</param>
            
             <returns>The broadcast address.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IPAddressExtensions.GetNetworkAddress(System.Net.IPAddress,System.Net.IPAddress)">
             <summary>The IPAddress extension method that gets network address.</summary>
            
             <param name="address">   The address.</param>
             <param name="subnetMask">The subnet mask.</param>
            
             <returns>The network address.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IPAddressExtensions.GetNetworkAddressBytes(System.Byte[],System.Byte[])">
             <summary>Gets network address bytes.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="ipAdressBytes">  The IP adress in bytes.</param>
             <param name="subnetMaskBytes">The subnet mask in bytes.</param>
            
             <returns>An array of byte.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IPAddressExtensions.IsInSameIpv6Subnet(System.Net.IPAddress,System.Net.IPAddress)">
             <summary>A byte[] extension method that query if 'address1Bytes' is in same IPv 6 subnet.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="address2">The address2 to act on.</param>
             <param name="address"> The address.</param>
            
             <returns>true if in same IPv 6 subnet, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IPAddressExtensions.IsInSameIpv6Subnet(System.Byte[],System.Byte[])">
             <summary>A byte[] extension method that query if 'address1Bytes' is in same IPv 6 subnet.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="address1Bytes">The address1Bytes to act on.</param>
             <param name="address2Bytes">The address 2 in bytes.</param>
            
             <returns>true if in same IPv 6 subnet, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IPAddressExtensions.IsInSameIpv4Subnet(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)">
             <summary>A byte[] extension method that query if 'address1Bytes' is in same IPv 4 subnet.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="address2">  The address2 to act on.</param>
             <param name="address">   The address.</param>
             <param name="subnetMask">The subnet mask.</param>
            
             <returns>true if in same IPv 4 subnet, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IPAddressExtensions.IsInSameIpv4Subnet(System.Byte[],System.Byte[],System.Byte[])">
             <summary>A byte[] extension method that query if 'address1Bytes' is in same IPv 4 subnet.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="address1Bytes">  The address1Bytes to act on.</param>
             <param name="address2Bytes">  The address 2 in bytes.</param>
             <param name="subnetMaskBytes">The subnet mask in bytes.</param>
            
             <returns>true if in same IPv 4 subnet, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IPAddressExtensions.GetAllNetworkInterfaceIpv4Addresses">
            <summary>
            Gets the ipv4 addresses from all Network Interfaces that have Subnet masks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.Extensions.IPAddressExtensions.GetAllNetworkInterfaceIpv6Addresses">
            <summary>
            Gets the ipv6 addresses from all Network Interfaces.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NServiceKit.Messaging.ClientFactory">
            <summary>A client factory.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.ClientFactory.Create(System.String)">
             <summary>Creates a new IOneWayClient.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="endpointUrl">URL of the endpoint.</param>
            
             <returns>An IOneWayClient.</returns>
        </member>
        <member name="T:NServiceKit.Messaging.IMessageHandler">
            <summary>
            Single threaded message handler that can process all messages
            of a particular message type.
            </summary>
        </member>
        <member name="M:NServiceKit.Messaging.IMessageHandler.Process(NServiceKit.Messaging.IMessageQueueClient)">
            <summary>
            Process all messages pending
            </summary>
            <param name="mqClient"></param>
        </member>
        <member name="M:NServiceKit.Messaging.IMessageHandler.ProcessQueue(NServiceKit.Messaging.IMessageQueueClient,System.String,System.Func{System.Boolean})">
            <summary>
            Process messages from a single queue.
            </summary>
            <param name="mqClient"></param>
            <param name="queueName">The queue to process</param>
            <param name="doNext">A predicate on whether to continue processing the next message if any</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.IMessageHandler.GetStats">
            <summary>
            Get Current Stats for this Message Handler
            </summary>
            <returns></returns>
        </member>
        <member name="P:NServiceKit.Messaging.IMessageHandler.MessageType">
            <summary>
            The type of the message this handler processes
            </summary>
        </member>
        <member name="T:NServiceKit.Messaging.IMessageHandlerDisposer">
            <summary>Interface for message handler disposer.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.IMessageHandlerDisposer.DisposeMessageHandler(NServiceKit.Messaging.IMessageHandler)">
             <summary>Handler, called when the dispose message.</summary>
            
             <param name="messageHandler">The message handler.</param>
        </member>
        <member name="T:NServiceKit.Messaging.IMessageHandlerFactory">
            <summary>
            Encapsulates creating a new message handler
            </summary>
        </member>
        <member name="M:NServiceKit.Messaging.IMessageHandlerFactory.CreateMessageHandler">
             <summary>Handler, called when the create message.</summary>
            
             <returns>The new message handler.</returns>
        </member>
        <member name="T:NServiceKit.Messaging.InMemoryMessageQueueClient">
            <summary>An in memory message queue client.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryMessageQueueClient.#ctor(NServiceKit.Messaging.MessageQueueClientFactory)">
             <summary>Initializes a new instance of the NServiceKit.Messaging.InMemoryMessageQueueClient class.</summary>
            
             <param name="factory">The factory.</param>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryMessageQueueClient.Publish``1(``0)">
             <summary>Publishes the given message.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="messageBody">The message body.</param>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryMessageQueueClient.Publish``1(NServiceKit.Messaging.IMessage{``0})">
             <summary>Publishes the given message.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryMessageQueueClient.Publish(System.String,System.Byte[])">
             <summary>Publish the specified message into the durable queue @queueName.</summary>
            
             <param name="queueName">   .</param>
             <param name="messageBytes">.</param>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryMessageQueueClient.Notify(System.String,System.Byte[])">
             <summary>Publish the specified message into the transient queue @queueName.</summary>
            
             <param name="queueName">   .</param>
             <param name="messageBytes">.</param>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryMessageQueueClient.GetAsync(System.String)">
             <summary>Non blocking get message.</summary>
            
             <param name="queueName">.</param>
            
             <returns>An array of byte.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryMessageQueueClient.WaitForNotifyOnAny(System.String[])">
             <summary>Blocking wait for notifications on any of the supplied channels.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="channelNames">.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryMessageQueueClient.Get(System.String,System.Nullable{System.TimeSpan})">
             <summary>Synchronous blocking get.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="queueName">.</param>
             <param name="timeOut">  .</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryMessageQueueClient.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:NServiceKit.Messaging.InMemoryTransientMessageFactory">
            <summary>An in memory transient message factory.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Messaging.InMemoryTransientMessageFactory class.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.#ctor(NServiceKit.Messaging.InMemoryTransientMessageService)">
             <summary>Initializes a new instance of the NServiceKit.Messaging.InMemoryTransientMessageFactory class.</summary>
            
             <param name="transientMessageService">The transient message service.</param>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.CreateMessageProducer">
             <summary>Creates message producer.</summary>
            
             <returns>The new message producer.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.CreateMessageQueueClient">
             <summary>Creates message queue client.</summary>
            
             <returns>The new message queue client.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.CreateMessageService">
             <summary>Creates message service.</summary>
            
             <returns>The new message service.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.InMemoryMessageProducer.#ctor(NServiceKit.Messaging.InMemoryTransientMessageFactory)">
             <summary>Initializes a new instance of the NServiceKit.Messaging.InMemoryTransientMessageFactory.InMemoryMessageProducer class.</summary>
            
             <param name="parent">The parent.</param>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.InMemoryMessageProducer.Publish``1(``0)">
             <summary>Publishes the given message.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="messageBody">The message body.</param>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.InMemoryMessageProducer.Publish``1(NServiceKit.Messaging.IMessage{``0})">
             <summary>Publishes the given message.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageFactory.InMemoryMessageProducer.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:NServiceKit.Messaging.InMemoryTransientMessageService">
            <summary>An in memory transient message service.</summary>
        </member>
        <member name="T:NServiceKit.Messaging.TransientMessageServiceBase">
            <summary>A transient message service base.</summary>
        </member>
        <member name="F:NServiceKit.Messaging.TransientMessageServiceBase.DefaultRetryCount">
            <summary>Will be a total of 3 attempts.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Messaging.TransientMessageServiceBase class.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.#ctor(System.Int32,System.Nullable{System.TimeSpan})">
             <summary>Initializes a new instance of the NServiceKit.Messaging.TransientMessageServiceBase class.</summary>
            
             <param name="retryAttempts"> The retry attempts.</param>
             <param name="requestTimeOut">The request time out.</param>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.RegisterHandler``1(System.Func{NServiceKit.Messaging.IMessage{``0},System.Object})">
             <summary>Registers the handler.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="processMessageFn">The process message function.</param>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.RegisterHandler``1(System.Func{NServiceKit.Messaging.IMessage{``0},System.Object},System.Action{NServiceKit.Messaging.IMessage{``0},System.Exception})">
             <summary>Registers the handler.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="processMessageFn">  The process message function.</param>
             <param name="processExceptionEx">The process exception ex.</param>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.GetStats">
             <summary>Get Total Current Stats for all Message Handlers.</summary>
            
             <returns>The statistics.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.GetStatus">
             <summary>Get the status of the service. Potential Statuses: Disposed, Stopped, Stopping, Starting, Started.</summary>
            
             <returns>The status.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.GetStatsDescription">
             <summary>Get a Stats dump.</summary>
            
             <returns>The statistics description.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.CreateMessageHandlerFactory``1(System.Func{NServiceKit.Messaging.IMessage{``0},System.Object},System.Action{NServiceKit.Messaging.IMessage{``0},System.Exception})">
             <summary>Creates message handler factory.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="processMessageFn">  The process message function.</param>
             <param name="processExceptionEx">The process exception ex.</param>
            
             <returns>The new message handler factory.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.Start">
            <summary>Start the MQ Host if not already started.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.Stop">
            <summary>Stop the MQ Host if not already stopped.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.TransientMessageServiceBase.DisposeMessageHandler(NServiceKit.Messaging.IMessageHandler)">
             <summary>Handler, called when the dispose message.</summary>
            
             <param name="messageHandler">The message handler.</param>
        </member>
        <member name="P:NServiceKit.Messaging.TransientMessageServiceBase.RetryCount">
             <summary>Gets the number of retries.</summary>
            
             <value>The number of retries.</value>
        </member>
        <member name="P:NServiceKit.Messaging.TransientMessageServiceBase.RequestTimeOut">
             <summary>Gets the request time out.</summary>
            
             <value>The request time out.</value>
        </member>
        <member name="P:NServiceKit.Messaging.TransientMessageServiceBase.PoolSize">
             <summary>Gets the size of the pool.</summary>
            
             <value>The size of the pool.</value>
        </member>
        <member name="P:NServiceKit.Messaging.TransientMessageServiceBase.MessageFactory">
             <summary>Factory to create consumers and producers that work with this service.</summary>
            
             <value>The message factory.</value>
        </member>
        <member name="P:NServiceKit.Messaging.TransientMessageServiceBase.RegisteredTypes">
             <summary>Get a list of all message types registered on this MQ Host.</summary>
            
             <value>A list of types of the registered.</value>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageService.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Messaging.InMemoryTransientMessageService class.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.InMemoryTransientMessageService.#ctor(NServiceKit.Messaging.InMemoryTransientMessageFactory)">
             <summary>Initializes a new instance of the NServiceKit.Messaging.InMemoryTransientMessageService class.</summary>
            
             <param name="factory">The factory.</param>
        </member>
        <member name="P:NServiceKit.Messaging.InMemoryTransientMessageService.MessageFactory">
             <summary>Factory to create consumers and producers that work with this service.</summary>
            
             <value>The message factory.</value>
        </member>
        <member name="P:NServiceKit.Messaging.InMemoryTransientMessageService.MessageQueueFactory">
             <summary>Gets the message queue factory.</summary>
            
             <value>The message queue factory.</value>
        </member>
        <member name="T:NServiceKit.Messaging.MessageExtensions">
            <summary>A message extensions.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.MessageExtensions.ToString(System.Byte[])">
             <summary>Convert this object into a string representation.</summary>
            
             <param name="bytes">The bytes to act on.</param>
            
             <returns>A string that represents this object.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageExtensions.ToMessage(System.Byte[],System.Type)">
             <summary>A byte[] extension method that converts this object to a message.</summary>
            
             <param name="bytes"> The bytes to act on.</param>
             <param name="ofType">Type of the of.</param>
            
             <returns>The given data converted to an IMessage.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageExtensions.ToMessage``1(System.Byte[])">
             <summary>A byte[] extension method that converts the bytes to a message.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="bytes">The bytes to act on.</param>
            
             <returns>bytes as a Message&lt;T&gt;</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageExtensions.ToBytes(NServiceKit.Messaging.IMessage)">
             <summary>An IMessage extension method that converts a message to the bytes.</summary>
            
             <param name="message">The message to act on.</param>
            
             <returns>message as a byte[].</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageExtensions.ToBytes``1(NServiceKit.Messaging.IMessage{``0})">
             <summary>An IMessage&lt;T&gt; extension method that converts a message to the bytes.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="message">The message to act on.</param>
            
             <returns>message as a byte[].</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageExtensions.ToInQueueName(NServiceKit.Messaging.IMessage)">
             <summary>An IMessage extension method that converts a message to an in queue name.</summary>
            
             <param name="message">The message to act on.</param>
            
             <returns>message as a string.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageExtensions.ToInQueueName``1(NServiceKit.Messaging.IMessage{``0})">
             <summary>An IMessage&lt;T&gt; extension method that converts a message to an in queue name.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="message">The message to act on.</param>
            
             <returns>message as a string.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageExtensions`1.ConvertToMessage(System.Object)">
             <summary>Converts the oBytes to a message.</summary>
            
             <param name="oBytes">The bytes.</param>
            
             <returns>The given data converted to a message.</returns>
        </member>
        <member name="T:NServiceKit.Messaging.MessageHandler`1">
            <summary>
            Processes all messages in a Normal and Priority Queue.
            Expects to be called in 1 thread. i.e. Non Thread-Safe.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:NServiceKit.Messaging.MessageHandler`1.DefaultRetryCount">
            <summary>Will be a total of 3 attempts.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandler`1.#ctor(NServiceKit.Messaging.IMessageService,System.Func{NServiceKit.Messaging.IMessage{`0},System.Object})">
             <summary>Initializes a new instance of the NServiceKit.Messaging.MessageHandler&lt;T&gt; class.</summary>
            
             <param name="messageService">  The message service.</param>
             <param name="processMessageFn">The process message function.</param>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandler`1.#ctor(NServiceKit.Messaging.IMessageService,System.Func{NServiceKit.Messaging.IMessage{`0},System.Object},System.Action{NServiceKit.Messaging.IMessage{`0},System.Exception},System.Int32)">
             <summary>Initializes a new instance of the NServiceKit.Messaging.MessageHandler&lt;T&gt; class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="messageService">      The message service.</param>
             <param name="processMessageFn">    The process message function.</param>
             <param name="processInExceptionFn">The process in exception function.</param>
             <param name="retryCount">          Number of retries.</param>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandler`1.Process(NServiceKit.Messaging.IMessageQueueClient)">
             <summary>Process all messages pending.</summary>
            
             <param name="mqClient">.</param>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandler`1.ProcessQueue(NServiceKit.Messaging.IMessageQueueClient,System.String,System.Func{System.Boolean})">
             <summary>Process messages from a single queue.</summary>
            
             <param name="mqClient"> .</param>
             <param name="queueName">The queue to process.</param>
             <param name="doNext">   A predicate on whether to continue processing the next message if any.</param>
            
             <returns>An int.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandler`1.GetStats">
             <summary>Get Current Stats for this Message Handler.</summary>
            
             <returns>The statistics.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandler`1.ProcessMessage(NServiceKit.Messaging.IMessageQueueClient,NServiceKit.Messaging.Message{`0})">
             <summary>Process the message.</summary>
            
             <exception>Thrown when a response ex error condition occurs.</exception>
            
             <param name="mqClient">The mq client.</param>
             <param name="message"> The message.</param>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandler`1.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.ReplyClientFactory">
             <summary>Gets or sets the reply client factory.</summary>
            
             <value>The reply client factory.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.PublishResponsesWhitelist">
             <summary>Gets or sets the publish responses whitelist.</summary>
            
             <value>The publish responses whitelist.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.TotalMessagesProcessed">
             <summary>Gets the total number of messages processed.</summary>
            
             <value>The total number of messages processed.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.TotalMessagesFailed">
             <summary>Gets the total number of messages failed.</summary>
            
             <value>The total number of messages failed.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.TotalRetries">
             <summary>Gets the total number of retries.</summary>
            
             <value>The total number of retries.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.TotalNormalMessagesReceived">
             <summary>Gets the total number of normal messages received.</summary>
            
             <value>The total number of normal messages received.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.TotalPriorityMessagesReceived">
             <summary>Gets the total number of priority messages received.</summary>
            
             <value>The total number of priority messages received.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.TotalOutMessagesReceived">
             <summary>Gets the total number of out messages received.</summary>
            
             <value>The total number of out messages received.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.LastMessageProcessed">
             <summary>Gets the Date/Time of the last message processed.</summary>
            
             <value>The last message processed.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.ProcessQueueNames">
             <summary>Gets or sets a list of names of the process queues.</summary>
            
             <value>A list of names of the process queues.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandler`1.MessageType">
             <summary>The type of the message this handler processes.</summary>
            
             <value>The type of the message.</value>
        </member>
        <member name="T:NServiceKit.Messaging.MessageHandlerFactory`1">
            <summary>A message handler factory.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="F:NServiceKit.Messaging.MessageHandlerFactory`1.DefaultRetryCount">
            <summary>Will be a total of 3 attempts.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandlerFactory`1.#ctor(NServiceKit.Messaging.IMessageService,System.Func{NServiceKit.Messaging.IMessage{`0},System.Object})">
             <summary>Initializes a new instance of the NServiceKit.Messaging.MessageHandlerFactory&lt;T&gt; class.</summary>
            
             <param name="messageService">  The message service.</param>
             <param name="processMessageFn">The process message function.</param>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandlerFactory`1.#ctor(NServiceKit.Messaging.IMessageService,System.Func{NServiceKit.Messaging.IMessage{`0},System.Object},System.Action{NServiceKit.Messaging.IMessage{`0},System.Exception})">
             <summary>Initializes a new instance of the NServiceKit.Messaging.MessageHandlerFactory&lt;T&gt; class.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="messageService">    The message service.</param>
             <param name="processMessageFn">  The process message function.</param>
             <param name="processExceptionEx">The process exception ex.</param>
        </member>
        <member name="M:NServiceKit.Messaging.MessageHandlerFactory`1.CreateMessageHandler">
             <summary>Handler, called when the create message.</summary>
            
             <returns>The new message handler.</returns>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandlerFactory`1.RequestFilter">
             <summary>Gets or sets the request filter.</summary>
            
             <value>The request filter.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandlerFactory`1.ResponseFilter">
             <summary>Gets or sets the response filter.</summary>
            
             <value>The response filter.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandlerFactory`1.PublishResponsesWhitelist">
             <summary>Gets or sets the publish responses whitelist.</summary>
            
             <value>The publish responses whitelist.</value>
        </member>
        <member name="P:NServiceKit.Messaging.MessageHandlerFactory`1.RetryCount">
             <summary>Gets or sets the number of retries.</summary>
            
             <value>The number of retries.</value>
        </member>
        <member name="T:NServiceKit.Messaging.MessageQueueClientFactory">
            <summary>A message queue client factory.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.MessageQueueClientFactory.CreateMessageQueueClient">
             <summary>Creates message queue client.</summary>
            
             <returns>The new message queue client.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageQueueClientFactory.PublishMessage``1(System.String,NServiceKit.Messaging.IMessage{``0})">
             <summary>Publish message.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="queueName">.</param>
             <param name="message">  The message.</param>
        </member>
        <member name="M:NServiceKit.Messaging.MessageQueueClientFactory.PublishMessage(System.String,System.Byte[])">
             <summary>Publish message.</summary>
            
             <param name="queueName">   .</param>
             <param name="messageBytes">The message in bytes.</param>
        </member>
        <member name="M:NServiceKit.Messaging.MessageQueueClientFactory.GetMessageAsync(System.String)">
            <summary>
            Returns the next message from queueName or null if no message
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.MessageQueueClientFactory.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="E:NServiceKit.Messaging.MessageQueueClientFactory.MessageReceived">
            <summary>Occurs when Message Received.</summary>
        </member>
        <member name="T:NServiceKit.Messaging.Rcon.Client">
            <summary>
            Base rcon class.
            </summary>
        </member>
        <member name="F:NServiceKit.Messaging.Rcon.Client._sock">
            <summary>
            Rcon connection socket. Always set to null when not connected.
            </summary>
        </member>
        <member name="F:NServiceKit.Messaging.Rcon.Client._sequenceID">
            <summary>
            Unique ID for each message.
            </summary>
        </member>
        <member name="F:NServiceKit.Messaging.Rcon.Client._registeredCallbacks">
            <summary>
            Registered callbacks.
            </summary>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Client.#ctor(System.Net.IPEndPoint)">
            <summary>
            Create a new instance of rcon.
            </summary>
            <param name="rconEndpoint">Endpoint to connect to, usually the game server with query port.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Client.Connect">
            <summary>
            Attempts to connect to the game server for rcon operations.
            </summary>
            <returns>True if connection established, false otherwise.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Client.ProcessPacket(System.Byte[],NServiceKit.Messaging.Rcon.ClientSocketState)">
            <summary>
            Processes a received packet.
            </summary>
            <param name="packet">The packet.</param>
            <param name="userToken"></param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Client.Disconnect">
            <summary>
            Disconnects from rcon.
            </summary>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Client.Call``1(``0,NServiceKit.Messaging.Rcon.Client.AsyncCallback)">
             <summary>Calls.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="request"> The request.</param>
             <param name="callback">The callback.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Client.InternalSend(System.Byte[][])">
            <summary>
            Sends message to the server.
            </summary>
            <param name="words">Words to send.</param>
        </member>
        <member name="E:NServiceKit.Messaging.Rcon.Client.OnDisconnected">
            <summary>
            Disconnected event.
            </summary>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Client.Endpoint">
            <summary>
            Game server endpoint.
            </summary>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Client.LastException">
            <summary>
            Last exception that occured during operation.
            </summary>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Client.Connected">
            <summary>
            Connected?
            </summary>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Client.SequenceID">
            <summary>
            Gets the next unique ID to be used for transmisson. Read this before sending to pair responses to sent messages.
            </summary>
        </member>
        <member name="T:NServiceKit.Messaging.Rcon.Client.OnDisconnectedHandler">
            <summary>
            Event delegate when disconnected from the server.
            </summary>
            <param name="rcon"></param>
        </member>
        <member name="T:NServiceKit.Messaging.Rcon.Client.AsyncCallback">
            <summary>
            Delegate for async callbacks.
            </summary>
            <param name="rcon"></param>
            <param name="response"></param>
        </member>
        <member name="T:NServiceKit.Messaging.Rcon.NotConnectedException">
            <summary>
            Exception thrown when attempting to send on a non-connected service client.
            </summary>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Packet.FromServer">
            <summary>
            True if the packet originated on the server.
            </summary>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Packet.IsResponse">
            <summary>
            True if the packet is a response from a sent packet.
            </summary>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Packet.Sequence">
            <summary>
            Sequence identifier. Unique to the connection.
            </summary>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Packet.Words">
            <summary>
            Words.
            </summary>
        </member>
        <member name="T:NServiceKit.Messaging.Rcon.PacketCodec">
            <summary>
            Contains methods required for encoding and decoding rcon packets.
            </summary>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.PacketCodec.DecodePacket(System.Byte[])">
            <summary>
            Decodes a packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>A packet object.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.PacketCodec.DecodeHeader(System.Byte[])">
            <summary>
            Decodes the packet header.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.PacketCodec.DecodeWords(System.Byte[])">
            <summary>
            Decodes words in a packet.
            </summary>
            <param name="packet"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.PacketCodec.EncodePacket(System.Boolean,System.Boolean,System.UInt32,System.Byte[][])">
            <summary>
            Encodes a packet for transmission to the server.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.PacketCodec.EncodeHeader(System.Boolean,System.Boolean,System.UInt32)">
            <summary>
            Encodes a packet header.
            </summary>
            <param name="fromServer"></param>
            <param name="isResponse"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.PacketCodec.EncodeWords(System.Byte[][])">
            <summary>
            Encodes words.
            </summary>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceKit.Messaging.Rcon.ProcessingClient">
            <summary>
            Processing client used to interface with NServiceKit and allow a message to be processed.
            Not an actual client.
            </summary>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.#ctor(NServiceKit.Messaging.Rcon.Packet,System.Net.Sockets.Socket,NServiceKit.Messaging.Rcon.Server)">
             <summary>Initializes a new instance of the NServiceKit.Messaging.Rcon.ProcessingClient class.</summary>
            
             <param name="packet">The packet.</param>
             <param name="client">The client.</param>
             <param name="server">The server.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.Publish``1(``0)">
             <summary>Publishes the given message.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="messageBody">The message body.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.Publish(NServiceKit.Messaging.IMessage)">
             <summary>Publish the specified message into the durable queue @queueName.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.Publish``1(NServiceKit.Messaging.IMessage{``0})">
             <summary>Publishes the given message.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.Publish(System.String,System.Byte[])">
            <summary>
            Publish the specified message into the durable queue @queueName
            </summary>
            <param name="queueName"></param>
            <param name="messageBytes"></param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.Notify(System.String,System.Byte[])">
            <summary>
            Publish the specified message into the transient queue @queueName
            </summary>
            <param name="queueName"></param>
            <param name="messageBytes"></param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.Get(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Synchronous blocking get.
            </summary>
            <param name="queueName"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.GetAsync(System.String)">
            <summary>
            Non blocking get message
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.WaitForNotifyOnAny(System.String[])">
            <summary>
            Blocking wait for notifications on any of the supplied channels
            </summary>
            <param name="channelNames"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.ProcessingClient.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:NServiceKit.Messaging.Rcon.Server">
            <summary>
            Hosting services via a binary-safe TCP-based protocol.
            </summary>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.#ctor(System.Net.IPEndPoint)">
             <summary>Initializes a new instance of the NServiceKit.Messaging.Rcon.Server class.</summary>
            
             <param name="localEndpoint">The local endpoint.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.RegisterHandler``1(System.Func{NServiceKit.Messaging.IMessage{``0},System.Object})">
            <summary>
            Register DTOs and hanlders the MQ Host will process
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.RegisterHandler``1(System.Func{NServiceKit.Messaging.IMessage{``0},System.Object},System.Action{NServiceKit.Messaging.IMessage{``0},System.Exception})">
             <summary>Register DTOs and hanlders the MQ Host will process.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="processMessageFn">  .</param>
             <param name="processExceptionEx">The process exception ex.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.CreateMessageHandlerFactory``1(System.Func{NServiceKit.Messaging.IMessage{``0},System.Object},System.Action{NServiceKit.Messaging.IMessage{``0},System.Exception})">
             <summary>Creates message handler factory.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="processMessageFn">  .</param>
             <param name="processExceptionEx">The process exception ex.</param>
            
             <returns>The new message handler factory.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.GetStats">
             <summary>Get Total Current Stats for all Message Handlers.</summary>
            
             <returns>The statistics.</returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.GetStatus">
            <summary>
            Get Total Current Stats for all Message Handlers
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.GetStatsDescription">
            <summary>
            Get a Stats dump
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.Start">
            <summary>
            Start the MQ Host. Stops the server and restarts if already started.
            </summary>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.Stop">
            <summary>
            Stop the MQ Host if not already stopped. 
            </summary>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.Notify(System.String,System.Byte[],System.Net.Sockets.Socket,System.UInt32)">
             <summary>Notifies.</summary>
            
             <param name="queueName"> Name of the queue.</param>
             <param name="message">   The message.</param>
             <param name="client">    .</param>
             <param name="sequenceID">Identifier for the sequence.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.Publish(System.String,System.Byte[],System.Net.Sockets.Socket,System.UInt32)">
             <summary>Publishes.</summary>
            
             <param name="queueName"> Name of the queue.</param>
             <param name="message">   The message.</param>
             <param name="client">    .</param>
             <param name="sequenceID">Identifier for the sequence.</param>
        </member>
        <member name="M:NServiceKit.Messaging.Rcon.Server.ProcessPacket(System.Byte[],System.Net.Sockets.Socket,NServiceKit.Messaging.Rcon.ClientSocketState)">
            <summary>
            Processes a received packet.
            </summary>
            <param name="packet">The packet.</param>
            <param name="client"></param>
            <param name="userToken"></param>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Server.MessageFactory">
            <summary>
            Factory to create consumers and producers that work with this service
            </summary>
        </member>
        <member name="P:NServiceKit.Messaging.Rcon.Server.RegisteredTypes">
             <summary>Get a list of all message types registered on this MQ Host.</summary>
            
             <value>A list of types of the registered.</value>
        </member>
        <member name="T:NServiceKit.Messaging.Rcon.ClientSocketState">
            <summary>A client socket state.</summary>
        </member>
        <member name="F:NServiceKit.Messaging.Rcon.ClientSocketState.Header">
            <summary>The header.</summary>
        </member>
        <member name="F:NServiceKit.Messaging.Rcon.ClientSocketState.CompleteMessage">
            <summary>Message describing the complete.</summary>
        </member>
        <member name="F:NServiceKit.Messaging.Rcon.ClientSocketState.ReadHeader">
            <summary>true to read header.</summary>
        </member>
        <member name="F:NServiceKit.Messaging.Rcon.ClientSocketState.MessageLength">
            <summary>Length of the message.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.RouteMember.GetValue(System.Object,System.Boolean)">
             <summary>Gets a value.</summary>
            
             <param name="target">        Target for the.</param>
             <param name="excludeDefault">true to exclude, false to include the default.</param>
            
             <returns>The value.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.FieldRouteMember.#ctor(System.Reflection.FieldInfo)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.FieldRouteMember class.</summary>
            
             <param name="field">The field.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.FieldRouteMember.GetValue(System.Object,System.Boolean)">
             <summary>Gets a value.</summary>
            
             <param name="target">        Target for the.</param>
             <param name="excludeDefault">true to exclude, false to include the default.</param>
            
             <returns>The value.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.PropertyRouteMember.#ctor(System.Reflection.PropertyInfo)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.PropertyRouteMember class.</summary>
            
             <param name="property">The property.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.PropertyRouteMember.GetValue(System.Object,System.Boolean)">
             <summary>Gets a value.</summary>
            
             <param name="target">        Target for the.</param>
             <param name="excludeDefault">true to exclude, false to include the default.</param>
            
             <returns>The value.</returns>
        </member>
        <member name="T:NServiceKit.Common.ServiceModel.MetadataTypesConfig">
            <summary>A metadata types configuration.</summary>
        </member>
        <member name="M:NServiceKit.Common.ServiceModel.MetadataTypesConfig.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Nullable{System.Int32})">
             <summary>Initializes a new instance of the NServiceKit.Common.ServiceModel.MetadataTypesConfig class.</summary>
            
             <param name="baseUrl">                     The base URL.</param>
             <param name="makePartial">                 true if make partial, false if not.</param>
             <param name="makeVirtual">                 true if make virtual, false if not.</param>
             <param name="addReturnMarker">             true if add return marker, false if not.</param>
             <param name="convertDescriptionToComments">true to convert description to comments.</param>
             <param name="addDataContractAttributes">   true if add data contract attributes, false if not.</param>
             <param name="makeDataContractsExtensible"> true if make data contracts extensible, false if not.</param>
             <param name="addIndexesToDataMembers">     true if add indexes to data members, false if not.</param>
             <param name="addDefaultXmlNamespace">      The add default XML namespace.</param>
             <param name="initializeCollections">       true if initialize collections, false if not.</param>
             <param name="addResponseStatus">           true if add response status, false if not.</param>
             <param name="addImplicitVersion">          The add implicit version.</param>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.BaseUrl">
             <summary>Gets or sets URL of the base.</summary>
            
             <value>The base URL.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.MakePartial">
             <summary>Gets or sets a value indicating whether the make partial.</summary>
            
             <value>true if make partial, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.MakeVirtual">
             <summary>Gets or sets a value indicating whether the make virtual.</summary>
            
             <value>true if make virtual, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.AddReturnMarker">
             <summary>Gets or sets a value indicating whether the add return marker.</summary>
            
             <value>true if add return marker, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.AddDescriptionAsComments">
             <summary>Gets or sets a value indicating whether the add description as comments.</summary>
            
             <value>true if add description as comments, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.AddDataContractAttributes">
             <summary>Gets or sets a value indicating whether the add data contract attributes.</summary>
            
             <value>true if add data contract attributes, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.MakeDataContractsExtensible">
             <summary>Gets or sets a value indicating whether this object is make data contracts extensible.</summary>
            
             <value>true if make data contracts extensible, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.AddIndexesToDataMembers">
             <summary>Gets or sets a value indicating whether the add indexes to data members.</summary>
            
             <value>true if add indexes to data members, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.InitializeCollections">
             <summary>Gets or sets a value indicating whether the initialize collections.</summary>
            
             <value>true if initialize collections, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.AddImplicitVersion">
             <summary>Gets or sets the add implicit version.</summary>
            
             <value>The add implicit version.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.AddResponseStatus">
             <summary>Gets or sets a value indicating whether the add response status.</summary>
            
             <value>true if add response status, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.AddDefaultXmlNamespace">
             <summary>Gets or sets the add default XML namespace.</summary>
            
             <value>The add default XML namespace.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypesConfig.DefaultNamespaces">
             <summary>Gets or sets the default namespaces.</summary>
            
             <value>The default namespaces.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceModel.MetadataTypes">
            <summary>A metadata types.</summary>
        </member>
        <member name="M:NServiceKit.Common.ServiceModel.MetadataTypes.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Common.ServiceModel.MetadataTypes class.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypes.Version">
             <summary>Gets or sets the version.</summary>
            
             <value>The version.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypes.Config">
             <summary>Gets or sets the configuration.</summary>
            
             <value>The configuration.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypes.Types">
             <summary>Gets or sets the types.</summary>
            
             <value>The types.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataTypes.Operations">
             <summary>Gets or sets the operations.</summary>
            
             <value>The operations.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceModel.MetadataOperationType">
            <summary>A metadata operation type.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataOperationType.Actions">
             <summary>Gets or sets the actions.</summary>
            
             <value>The actions.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataOperationType.Request">
             <summary>Gets or sets the request.</summary>
            
             <value>The request.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataOperationType.Response">
             <summary>Gets or sets the response.</summary>
            
             <value>The response.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceModel.MetadataType">
            <summary>A metadata type.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.Name">
             <summary>Gets or sets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.Namespace">
             <summary>Gets or sets the namespace.</summary>
            
             <value>The namespace.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.GenericArgs">
             <summary>Gets or sets the generic arguments.</summary>
            
             <value>The generic arguments.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.Inherits">
             <summary>Gets or sets the inherits.</summary>
            
             <value>The inherits.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.InheritsGenericArgs">
             <summary>Gets or sets the inherits generic arguments.</summary>
            
             <value>The inherits generic arguments.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.Description">
             <summary>Gets or sets the description.</summary>
            
             <value>The description.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.ReturnVoidMarker">
             <summary>Gets or sets a value indicating whether the return void marker.</summary>
            
             <value>true if return void marker, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.ReturnMarkerGenericArgs">
             <summary>Gets or sets the return marker generic arguments.</summary>
            
             <value>The return marker generic arguments.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.Routes">
             <summary>Gets or sets the routes.</summary>
            
             <value>The routes.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.DataContract">
             <summary>Gets or sets the data contract.</summary>
            
             <value>The data contract.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.Properties">
             <summary>Gets or sets the properties.</summary>
            
             <value>The properties.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataType.Attributes">
             <summary>Gets or sets the attributes.</summary>
            
             <value>The attributes.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceModel.MetadataRoute">
            <summary>A metadata route.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataRoute.Path">
             <summary>Gets or sets the full pathname of the file.</summary>
            
             <value>The full pathname of the file.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataRoute.Verbs">
             <summary>Gets or sets the verbs.</summary>
            
             <value>The verbs.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataRoute.Notes">
             <summary>Gets or sets the notes.</summary>
            
             <value>The notes.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataRoute.Summary">
             <summary>Gets or sets the summary.</summary>
            
             <value>The summary.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceModel.MetadataDataContract">
            <summary>A metadata contract.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataDataContract.Name">
             <summary>Gets or sets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataDataContract.Namespace">
             <summary>Gets or sets the namespace.</summary>
            
             <value>The namespace.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceModel.MetadataDataMember">
            <summary>A metadata member.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataDataMember.Name">
             <summary>Gets or sets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataDataMember.Order">
             <summary>Gets or sets the order.</summary>
            
             <value>The order.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataDataMember.IsRequired">
             <summary>Gets or sets the is required.</summary>
            
             <value>The is required.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataDataMember.EmitDefaultValue">
             <summary>Gets or sets the emit default value.</summary>
            
             <value>The emit default value.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceModel.MetadataPropertyType">
            <summary>A metadata property type.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataPropertyType.Name">
             <summary>Gets or sets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataPropertyType.Type">
             <summary>Gets or sets the type.</summary>
            
             <value>The type.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataPropertyType.GenericArgs">
             <summary>Gets or sets the generic arguments.</summary>
            
             <value>The generic arguments.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataPropertyType.Value">
             <summary>Gets or sets the value.</summary>
            
             <value>The value.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataPropertyType.Description">
             <summary>Gets or sets the description.</summary>
            
             <value>The description.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataPropertyType.DataMember">
             <summary>Gets or sets the data member.</summary>
            
             <value>The data member.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataPropertyType.Attributes">
             <summary>Gets or sets the attributes.</summary>
            
             <value>The attributes.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceModel.MetadataAttribute">
            <summary>Attribute for metadata.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataAttribute.Name">
             <summary>Gets or sets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataAttribute.ConstructorArgs">
             <summary>Gets or sets the constructor arguments.</summary>
            
             <value>The constructor arguments.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceModel.MetadataAttribute.Args">
             <summary>Gets or sets the arguments.</summary>
            
             <value>The arguments.</value>
        </member>
        <member name="T:NServiceKit.Model">
            <summary>A model.</summary>
        </member>
        <member name="M:NServiceKit.Model.ToId``1(``0)">
             <summary>A T extension method that converts an entity to an identifier.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="entity">The entity to act on.</param>
            
             <returns>entity as an object.</returns>
        </member>
        <member name="M:NServiceKit.Model.ToUrn``1(System.Object)">
             <summary>A T extension method that converts an entity to an URN.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="id">The identifier.</param>
            
             <returns>entity as a string.</returns>
        </member>
        <member name="M:NServiceKit.Model.ToUrn``1(``0)">
             <summary>A T extension method that converts an entity to an URN.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="entity">The entity to act on.</param>
            
             <returns>entity as a string.</returns>
        </member>
        <member name="M:NServiceKit.Model.ToSafePathCacheKey``1(System.String)">
             <summary>Converts an idValue to a safe path cache key.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="idValue">The identifier value.</param>
            
             <returns>idValue as a string.</returns>
        </member>
        <member name="T:NServiceKit.ModelConfig`1">
            <summary>A model configuration.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:NServiceKit.ModelConfig`1.Id(System.Func{`0,System.Object})">
             <summary>Identifiers the given get identifier function.</summary>
            
             <param name="getIdFn">The get identifier function.</param>
        </member>
        <member name="T:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2">
            <summary>Dictionary of concurrents.</summary>
            <typeparam name="TKey">  Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt; class.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
             <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt; class.</summary>
            
             <param name="collection">The collection.</param>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
             <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt; class.</summary>
            
             <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
             <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt; class.</summary>
            
             <param name="collection">The collection.</param>
             <param name="comparer">  The comparer.</param>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
             <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt; class.</summary>
            
             <param name="concurrencyLevel">The concurrency level.</param>
             <param name="capacity">        The capacity.</param>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
             <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt; class.</summary>
            
             <param name="concurrencyLevel">The concurrency level.</param>
             <param name="collection">      The collection.</param>
             <param name="comparer">        The comparer.</param>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
             <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt; class.</summary>
            
             <param name="concurrencyLevel">The concurrency level.</param>
             <param name="capacity">        The capacity.</param>
             <param name="comparer">        The comparer.</param>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)">
             <summary>Attempts to add from the given data.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
             <summary>Adds an or update.</summary>
            
             <param name="key">               The key.</param>
             <param name="addValueFactory">   The add value factory.</param>
             <param name="updateValueFactory">The update value factory.</param>
            
             <returns>A TValue.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
             <summary>Adds an or update.</summary>
            
             <param name="key">               The key.</param>
             <param name="addValue">          The add value.</param>
             <param name="updateValueFactory">The update value factory.</param>
            
             <returns>A TValue.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
             <summary>Attempts to get value from the given data.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
             <summary>Attempts to update from the given data.</summary>
            
             <param name="key">            The key.</param>
             <param name="newValue">       The new value.</param>
             <param name="comparisonValue">The comparison value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
             <summary>Gets or add.</summary>
            
             <param name="key">         The key.</param>
             <param name="valueFactory">The value factory.</param>
            
             <returns>The or add.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)">
             <summary>Gets or add.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>The or add.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)">
             <summary>Attempts to remove from the given data.</summary>
            
             <param name="key">  The key.</param>
             <param name="value">The value.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
             <summary>Query if 'key' contains key.</summary>
            
             <param name="key">The key.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.ToArray">
             <summary>Convert this object into an array representation.</summary>
            
             <returns>An array that represents the data in this object.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.Clear">
            <summary>Clears this object to its blank/initial state.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
             <summary>Indexer to get or set items within this collection using array index syntax.</summary>
            
             <param name="key">The key.</param>
            
             <returns>The indexed item.</returns>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.Count">
             <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
            
             <value>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</value>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty">
             <summary>Gets a value indicating whether this object is empty.</summary>
            
             <value>true if this object is empty, false if not.</value>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.Keys">
             <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</summary>
            
             <value>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</value>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.Values">
             <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</summary>
            
             <value>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</value>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.ConcurrentDictionaryEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
             <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt;.ConcurrentDictionaryEnumerator class.</summary>
            
             <param name="internalEnum">The internal enum.</param>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.ConcurrentDictionaryEnumerator.MoveNext">
             <summary>Determines if we can move next.</summary>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.ConcurrentDictionaryEnumerator.Reset">
            <summary>Resets this object.</summary>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.ConcurrentDictionaryEnumerator.Current">
             <summary>Gets the current.</summary>
            
             <value>The current.</value>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.ConcurrentDictionaryEnumerator.Entry">
             <summary>Gets both the key and the value of the current dictionary entry.</summary>
            
             <value>A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.</value>
            
             ### <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last
             entry.
             </exception>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.ConcurrentDictionaryEnumerator.Key">
             <summary>Gets the key of the current dictionary entry.</summary>
            
             <value>The key of the current element of the enumeration.</value>
            
             ### <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last
             entry.
             </exception>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.ConcurrentDictionary`2.ConcurrentDictionaryEnumerator.Value">
             <summary>Gets the value of the current dictionary entry.</summary>
            
             <value>The value of the current element of the enumeration.</value>
            
             ### <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.IDictionaryEnumerator" /> is positioned before the first entry of the dictionary or after the last
             entry.
             </exception>
        </member>
        <member name="T:NServiceKit.Common.Net30.IProducerConsumerCollection`1">
             <summary>Interface for producer consumer collection.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:NServiceKit.Common.Net30.IProducerConsumerCollection`1.TryAdd(`0)">
             <summary>Attempts to add from the given data.</summary>
            
             <param name="item">The item.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Net30.IProducerConsumerCollection`1.TryTake(`0@)">
             <summary>Attempts to take from the given data.</summary>
            
             <param name="item">The item.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Net30.IProducerConsumerCollection`1.ToArray">
             <summary>Convert this object into an array representation.</summary>
            
             <returns>An array that represents the data in this object.</returns>
        </member>
        <member name="M:NServiceKit.Common.Net30.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)">
             <summary>Copies to.</summary>
            
             <param name="array">The array.</param>
             <param name="index">Zero-based index of the.</param>
        </member>
        <member name="T:NServiceKit.Common.Net30.ConcurrentQueue`1">
            <summary>Queue of concurrents.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:NServiceKit.Common.Net30.ConcurrentQueue`1.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Common.Net30.ConcurrentQueue&lt;T&gt; class.</summary>
        </member>
        <member name="M:NServiceKit.Common.Net30.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
             <summary>Initializes a new instance of the NServiceKit.Common.Net30.ConcurrentQueue&lt;T&gt; class.</summary>
            
             <param name="collection">The collection.</param>
        </member>
        <member name="M:NServiceKit.Common.Net30.ConcurrentQueue`1.Enqueue(`0)">
             <summary>Adds an object onto the end of this queue.</summary>
            
             <param name="item">The item.</param>
        </member>
        <member name="M:NServiceKit.Common.Net30.ConcurrentQueue`1.TryDequeue(`0@)">
             <summary>Attempts to dequeue from the given data.</summary>
            
             <param name="result">The result.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Net30.ConcurrentQueue`1.TryPeek(`0@)">
             <summary>Attempts to peek from the given data.</summary>
            
             <param name="result">The result.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.Net30.ConcurrentQueue`1.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="M:NServiceKit.Common.Net30.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
             <summary>Copies to.</summary>
            
             <param name="array">The array.</param>
             <param name="index">Zero-based index of the.</param>
        </member>
        <member name="M:NServiceKit.Common.Net30.ConcurrentQueue`1.ToArray">
             <summary>Convert this object into an array representation.</summary>
            
             <returns>An array that represents the data in this object.</returns>
        </member>
        <member name="P:NServiceKit.Common.Net30.ConcurrentQueue`1.Count">
             <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
            
             <value>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</value>
        </member>
        <member name="P:NServiceKit.Common.Net30.ConcurrentQueue`1.IsEmpty">
             <summary>Gets a value indicating whether this object is empty.</summary>
            
             <value>true if this object is empty, false if not.</value>
        </member>
        <member name="F:NServiceKit.Common.Net30.ConcurrentQueue`1.Node.Value">
            <summary>The value.</summary>
        </member>
        <member name="F:NServiceKit.Common.Net30.ConcurrentQueue`1.Node.Next">
            <summary>The next.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ObjectPool`1.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.ObjectPool&lt;T&gt; class.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ObjectPool`1.Creator">
             <summary>Gets the creator.</summary>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ObjectPool`1.Take">
             <summary>Gets the take.</summary>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.ObjectPool`1.Release(`0)">
             <summary>Releases the given object.</summary>
            
             <param name="obj">The object.</param>
        </member>
        <member name="M:NServiceKit.Common.Net30.ConcurrentQueue`1.NodeObjectPool.Creator">
             <summary>Gets the creator.</summary>
            
             <returns>A Node.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
             <summary>Initializes a new instance of the NServiceKit.Net30.Collections.Concurrent.SplitOrderedList&lt;TKey, T&gt; class.</summary>
            
             <param name="comparer">The comparer.</param>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.InsertOrUpdate(System.UInt32,`0,System.Func{`1},System.Func{`1,`1})">
             <summary>Inserts an or update.</summary>
            
             <param name="key">         The key.</param>
             <param name="subKey">      The sub key.</param>
             <param name="addGetter">   The add getter.</param>
             <param name="updateGetter">The update getter.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.InsertOrUpdate(System.UInt32,`0,`1,`1)">
             <summary>Inserts an or update.</summary>
            
             <param name="key">        The key.</param>
             <param name="subKey">     The sub key.</param>
             <param name="addValue">   The add value.</param>
             <param name="updateValue">The update value.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Insert(System.UInt32,`0,`1)">
             <summary>Inserts.</summary>
            
             <param name="key">   The key.</param>
             <param name="subKey">The sub key.</param>
             <param name="data">  The data.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.InsertOrGet(System.UInt32,`0,`1,System.Func{`1})">
             <summary>Inserts an or get.</summary>
            
             <param name="key">        The key.</param>
             <param name="subKey">     The sub key.</param>
             <param name="data">       The data.</param>
             <param name="dataCreator">The data creator.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Find(System.UInt32,`0,`1@)">
             <summary>Searches for the first match.</summary>
            
             <param name="key">   The key.</param>
             <param name="subKey">The sub key.</param>
             <param name="data">  The data.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.CompareExchange(System.UInt32,`0,`1,System.Func{`1,System.Boolean})">
             <summary>Compare exchange.</summary>
            
             <param name="key">   The key.</param>
             <param name="subKey">The sub key.</param>
             <param name="data">  The data.</param>
             <param name="check"> The check.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Delete(System.UInt32,`0,`1@)">
             <summary>Deletes this object.</summary>
            
             <param name="key">   The key.</param>
             <param name="subKey">The sub key.</param>
             <param name="data">  The data.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.GetEnumerator">
             <summary>Gets the enumerator.</summary>
            
             <returns>The enumerator.</returns>
        </member>
        <member name="P:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Count">
             <summary>Gets the number of. </summary>
            
             <value>The count.</value>
        </member>
        <member name="F:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Node.Marked">
            <summary>true if marked.</summary>
        </member>
        <member name="F:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Node.Key">
            <summary>The key.</summary>
        </member>
        <member name="F:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Node.SubKey">
            <summary>The sub key.</summary>
        </member>
        <member name="F:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Node.Data">
            <summary>The data.</summary>
        </member>
        <member name="F:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Node.Next">
            <summary>The next.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.Node.Init(System.UInt64,`0,`1)">
             <summary>Initialises this object.</summary>
            
             <param name="key">   The key.</param>
             <param name="subKey">The sub key.</param>
             <param name="data">  The data.</param>
            
             <returns>A Node.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.NodeObjectPool.Creator">
             <summary>Gets the creator.</summary>
            
             <returns>A Node.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.SimpleRwLock.EnterReadLock">
            <summary>Enter read lock.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.SimpleRwLock.ExitReadLock">
            <summary>Exit read lock.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.SimpleRwLock.EnterWriteLock">
            <summary>Enter write lock.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SplitOrderedList`2.SimpleRwLock.ExitWriteLock">
            <summary>Exit write lock.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Collections.Concurrent.SpinWait.SpinOnce">
            <summary>Spin once.</summary>
        </member>
        <member name="T:NServiceKit.Net30.SystemUtil">
            <summary>A system utility.</summary>
        </member>
        <member name="T:NServiceKit.Net30.ImmutableAttribute">
            <summary>Attribute for immutable.</summary>
        </member>
        <member name="T:NServiceKit.Net30.ExtendTuple">
            <summary>
            Helper extensions for tuples
            </summary>
        </member>
        <member name="M:NServiceKit.Net30.ExtendTuple.Append``3(NServiceKit.Net30.Tuple{``0,``1},``2)">
             <summary>A Tuple&lt;T1,T2&gt; extension method that appends a tuple.</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <typeparam name="T3">Generic type parameter.</typeparam>
             <param name="tuple">The tuple to act on.</param>
             <param name="item"> The item.</param>
            
             <returns>A Triple&lt;T1,T2,T3&gt;</returns>
        </member>
        <member name="M:NServiceKit.Net30.ExtendTuple.Append``4(NServiceKit.Net30.Tuple{``0,``1,``2},``3)">
             <summary>A Tuple&lt;T1,T2,T3&gt; extension method that appends a tuple.</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <typeparam name="T3">Generic type parameter.</typeparam>
             <typeparam name="T4">Generic type parameter.</typeparam>
             <param name="tuple">The tuple to act on.</param>
             <param name="item"> The item.</param>
            
             <returns>A Quad&lt;T1,T2,T3,T4&gt;</returns>
        </member>
        <member name="M:NServiceKit.Net30.ExtendTuple.AddTuple``2(System.Collections.Generic.ICollection{NServiceKit.Net30.Tuple{``0,``1}},``0,``1)">
             <summary>An ICollection&lt;Pair&lt;T1,T2&gt;&gt; extension method that adds a tuple.</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
             <param name="first">     The first.</param>
             <param name="second">    The second.</param>
        </member>
        <member name="M:NServiceKit.Net30.ExtendTuple.AddTuple``2(System.Collections.Generic.ICollection{NServiceKit.Net30.Pair{``0,``1}},``0,``1)">
             <summary>An ICollection&lt;Pair&lt;T1,T2&gt;&gt; extension method that adds a tuple.</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
             <param name="first">     The first.</param>
             <param name="second">    The second.</param>
        </member>
        <member name="M:NServiceKit.Net30.ExtendTuple.AddTuple``3(System.Collections.Generic.ICollection{NServiceKit.Net30.Tuple{``0,``1,``2}},``0,``1,``2)">
             <summary>An ICollection&lt;Tuple&lt;T1,T2,T3&gt;&gt; extension method that adds a tuple.</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <typeparam name="T3">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
             <param name="first">     The first.</param>
             <param name="second">    The second.</param>
             <param name="third">     The third.</param>
        </member>
        <member name="M:NServiceKit.Net30.ExtendTuple.AddTuple``4(System.Collections.Generic.ICollection{NServiceKit.Net30.Tuple{``0,``1,``2,``3}},``0,``1,``2,``3)">
             <summary>An ICollection&lt;Tuple&lt;T1,T2,T3,T4&gt;&gt; extension method that adds a tuple.</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <typeparam name="T3">Generic type parameter.</typeparam>
             <typeparam name="T4">Generic type parameter.</typeparam>
             <param name="collection">The collection to act on.</param>
             <param name="first">     The first.</param>
             <param name="second">    The second.</param>
             <param name="third">     The third.</param>
             <param name="fourth">    The fourth.</param>
        </member>
        <member name="T:NServiceKit.Net30.Pair`2">
            <summary>A pair.</summary>
            <typeparam name="TKey">  Type of the key.</typeparam>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="T:NServiceKit.Net30.Tuple`2">
            <summary>A tuple.</summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`2.#ctor(`0,`1)">
             <summary>Initializes a new instance of the NServiceKit.Net30.Tuple&lt;T1, T2&gt; class.</summary>
            
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`2.Equals(System.Object)">
             <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
            
             <exception cref="T:System.NullReferenceException">Thrown when a value was unexpectedly null.</exception>
            
             <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            
             <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`2.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`2.Equals(NServiceKit.Net30.Tuple{`0,`1})">
             <summary>Tests if this Tuple&lt;T1,T2&gt; is considered equal to another.</summary>
            
             <param name="obj">The tuple&lt; t 1, t 2&gt; to compare to this object.</param>
            
             <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`2.GetHashCode">
             <summary>Serves as a hash function for a particular type.</summary>
            
             <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`2.op_Equality(NServiceKit.Net30.Tuple{`0,`1},NServiceKit.Net30.Tuple{`0,`1})">
             <summary>Equality operator.</summary>
            
             <param name="left"> The left.</param>
             <param name="right">The right.</param>
            
             <returns>The result of the operation.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`2.op_Inequality(NServiceKit.Net30.Tuple{`0,`1},NServiceKit.Net30.Tuple{`0,`1})">
             <summary>Inequality operator.</summary>
            
             <param name="left"> The left.</param>
             <param name="right">The right.</param>
            
             <returns>The result of the operation.</returns>
        </member>
        <member name="P:NServiceKit.Net30.Tuple`2.Item1">
             <summary>Gets the item 1.</summary>
            
             <value>The item 1.</value>
        </member>
        <member name="P:NServiceKit.Net30.Tuple`2.Item2">
             <summary>Gets the item 2.</summary>
            
             <value>The item 2.</value>
        </member>
        <member name="M:NServiceKit.Net30.Pair`2.#ctor(`0,`1)">
             <summary>Initializes a new instance of the NServiceKit.Net30.Pair&lt;TKey, TValue&gt; class.</summary>
            
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
        </member>
        <member name="P:NServiceKit.Net30.Pair`2.Key">
             <summary>Gets the key.</summary>
            
             <value>The key.</value>
        </member>
        <member name="P:NServiceKit.Net30.Pair`2.Value">
             <summary>Gets the value.</summary>
            
             <value>The value.</value>
        </member>
        <member name="T:NServiceKit.Net30.Quad`4">
            <summary>A quad.</summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="T3">Generic type parameter.</typeparam>
            <typeparam name="T4">Generic type parameter.</typeparam>
        </member>
        <member name="T:NServiceKit.Net30.Tuple`4">
            <summary>A tuple.</summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="T3">Generic type parameter.</typeparam>
            <typeparam name="T4">Generic type parameter.</typeparam>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`4.#ctor(`0,`1,`2,`3)">
             <summary>Initializes a new instance of the NServiceKit.Net30.Tuple&lt;T1, T2, T3, T4&gt; class.</summary>
            
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
             <param name="third"> The third.</param>
             <param name="fourth">The fourth.</param>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`4.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`4.Equals(System.Object)">
             <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
            
             <exception cref="T:System.NullReferenceException">Thrown when a value was unexpectedly null.</exception>
            
             <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            
             <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`4.Equals(NServiceKit.Net30.Tuple{`0,`1,`2,`3})">
             <summary>Tests if this Tuple&lt;T1,T2,T3,T4&gt; is considered equal to another.</summary>
            
             <param name="obj">The tuple&lt; t 1, t 2, t 3, t 4&gt; to compare to this object.</param>
            
             <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`4.GetHashCode">
             <summary>Serves as a hash function for a particular type.</summary>
            
             <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`4.op_Equality(NServiceKit.Net30.Tuple{`0,`1,`2,`3},NServiceKit.Net30.Tuple{`0,`1,`2,`3})">
             <summary>Equality operator.</summary>
            
             <param name="left"> The left.</param>
             <param name="right">The right.</param>
            
             <returns>The result of the operation.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`4.op_Inequality(NServiceKit.Net30.Tuple{`0,`1,`2,`3},NServiceKit.Net30.Tuple{`0,`1,`2,`3})">
             <summary>Inequality operator.</summary>
            
             <param name="left"> The left.</param>
             <param name="right">The right.</param>
            
             <returns>The result of the operation.</returns>
        </member>
        <member name="P:NServiceKit.Net30.Tuple`4.Item1">
             <summary>Gets the item 1.</summary>
            
             <value>The item 1.</value>
        </member>
        <member name="P:NServiceKit.Net30.Tuple`4.Item2">
             <summary>Gets the item 2.</summary>
            
             <value>The item 2.</value>
        </member>
        <member name="P:NServiceKit.Net30.Tuple`4.Item3">
             <summary>Gets the item 3.</summary>
            
             <value>The item 3.</value>
        </member>
        <member name="P:NServiceKit.Net30.Tuple`4.Item4">
             <summary>Gets the item 4.</summary>
            
             <value>The item 4.</value>
        </member>
        <member name="M:NServiceKit.Net30.Quad`4.#ctor(`0,`1,`2,`3)">
             <summary>Initializes a new instance of the NServiceKit.Net30.Quad&lt;T1, T2, T3, T4&gt; class.</summary>
            
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
             <param name="third"> The third.</param>
             <param name="fourth">The fourth.</param>
        </member>
        <member name="T:NServiceKit.Net30.Triple`3">
            <summary>A triple.</summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="T3">Generic type parameter.</typeparam>
        </member>
        <member name="T:NServiceKit.Net30.Tuple`3">
            <summary>A tuple.</summary>
            <typeparam name="T1">Generic type parameter.</typeparam>
            <typeparam name="T2">Generic type parameter.</typeparam>
            <typeparam name="T3">Generic type parameter.</typeparam>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`3.#ctor(`0,`1,`2)">
             <summary>Initializes a new instance of the NServiceKit.Net30.Tuple&lt;T1, T2, T3&gt; class.</summary>
            
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
             <param name="third"> The third.</param>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`3.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`3.Equals(System.Object)">
             <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
            
             <exception cref="T:System.NullReferenceException">Thrown when a value was unexpectedly null.</exception>
            
             <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            
             <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`3.Equals(NServiceKit.Net30.Tuple{`0,`1,`2})">
             <summary>Tests if this Tuple&lt;T1,T2,T3&gt; is considered equal to another.</summary>
            
             <param name="obj">The tuple&lt; t 1, t 2, t 3&gt; to compare to this object.</param>
            
             <returns>true if the objects are considered equal, false if they are not.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`3.GetHashCode">
             <summary>Serves as a hash function for a particular type.</summary>
            
             <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`3.op_Equality(NServiceKit.Net30.Tuple{`0,`1,`2},NServiceKit.Net30.Tuple{`0,`1,`2})">
             <summary>Equality operator.</summary>
            
             <param name="left"> The left.</param>
             <param name="right">The right.</param>
            
             <returns>The result of the operation.</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple`3.op_Inequality(NServiceKit.Net30.Tuple{`0,`1,`2},NServiceKit.Net30.Tuple{`0,`1,`2})">
             <summary>Inequality operator.</summary>
            
             <param name="left"> The left.</param>
             <param name="right">The right.</param>
            
             <returns>The result of the operation.</returns>
        </member>
        <member name="P:NServiceKit.Net30.Tuple`3.Item1">
             <summary>Gets the item 1.</summary>
            
             <value>The item 1.</value>
        </member>
        <member name="P:NServiceKit.Net30.Tuple`3.Item2">
             <summary>Gets the item 2.</summary>
            
             <value>The item 2.</value>
        </member>
        <member name="P:NServiceKit.Net30.Tuple`3.Item3">
             <summary>Gets the item 3.</summary>
            
             <value>The item 3.</value>
        </member>
        <member name="M:NServiceKit.Net30.Triple`3.#ctor(`0,`1,`2)">
             <summary>Initializes a new instance of the NServiceKit.Net30.Triple&lt;T1, T2, T3&gt; class.</summary>
            
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
             <param name="third"> The third.</param>
        </member>
        <member name="T:NServiceKit.Net30.Tuple">
            <summary>A tuple.</summary>
        </member>
        <member name="M:NServiceKit.Net30.Tuple.From``2(``0,``1)">
             <summary>Froms.</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
            
             <returns>A Pair&lt;T1,T2&gt;</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple.Create``2(``0,``1)">
             <summary>Creates a new Tuple&lt;T1,T2&gt;</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
            
             <returns>A Tuple&lt;T1,T2&gt;</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple.From``3(``0,``1,``2)">
             <summary>Froms.</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <typeparam name="T3">Generic type parameter.</typeparam>
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
             <param name="third"> The third.</param>
            
             <returns>A Triple&lt;T1,T2,T3&gt;</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple.Create``3(``0,``1,``2)">
             <summary>Creates a new Tuple&lt;T1,T2,T3&gt;</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <typeparam name="T3">Generic type parameter.</typeparam>
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
             <param name="third"> The third.</param>
            
             <returns>A Tuple&lt;T1,T2,T3&gt;</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple.From``4(``0,``1,``2,``3)">
             <summary>Froms.</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <typeparam name="T3">Generic type parameter.</typeparam>
             <typeparam name="T4">Generic type parameter.</typeparam>
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
             <param name="third"> The third.</param>
             <param name="fourth">The fourth.</param>
            
             <returns>A Quad&lt;T1,T2,T3,T4&gt;</returns>
        </member>
        <member name="M:NServiceKit.Net30.Tuple.Create``4(``0,``1,``2,``3)">
             <summary>Creates a new Tuple&lt;T1,T2,T3,T4&gt;</summary>
            
             <typeparam name="T1">Generic type parameter.</typeparam>
             <typeparam name="T2">Generic type parameter.</typeparam>
             <typeparam name="T3">Generic type parameter.</typeparam>
             <typeparam name="T4">Generic type parameter.</typeparam>
             <param name="first"> The first.</param>
             <param name="second">The second.</param>
             <param name="third"> The third.</param>
             <param name="fourth">The fourth.</param>
            
             <returns>A Tuple&lt;T1,T2,T3,T4&gt;</returns>
        </member>
        <member name="T:NServiceKit.Common.ReflectionExtensions">
            <summary>A reflection extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.ReflectionExtensions.PopulateWith``2(``0,``1)">
             <summary>To extension method that populate with.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="to">  to to act on.</param>
             <param name="from">from to act on.</param>
            
             <returns>To.</returns>
        </member>
        <member name="M:NServiceKit.Common.ReflectionExtensions.PopulateWithNonDefaultValues``2(``0,``1)">
             <summary>To extension method that populate with non default values.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="to">  to to act on.</param>
             <param name="from">from to act on.</param>
            
             <returns>To.</returns>
        </member>
        <member name="M:NServiceKit.Common.ReflectionExtensions.PopulateFromPropertiesWithAttribute``3(``0,``1)">
             <summary>To extension method that populate from properties with attribute.</summary>
            
             <typeparam name="To">   Type of to.</typeparam>
             <typeparam name="From"> Type of from.</typeparam>
             <typeparam name="TAttr">Type of the attribute.</typeparam>
             <param name="to">  to to act on.</param>
             <param name="from">from to act on.</param>
            
             <returns>To.</returns>
        </member>
        <member name="M:NServiceKit.Common.ReflectionExtensions.PopulateFromPropertiesWithAttribute``2(``0,``1,System.Type)">
             <summary>To extension method that populate from properties with attribute.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="to">      to to act on.</param>
             <param name="from">    from to act on.</param>
             <param name="attrType">Type of the attribute.</param>
            
             <returns>To.</returns>
        </member>
        <member name="M:NServiceKit.Common.ReflectionExtensions.TranslateTo``1(System.Object)">
             <summary>An object extension method that translate to.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="from">from to act on.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Common.ReflectionExtensions.IsDebugBuild(System.Reflection.Assembly)">
             <summary>An Assembly extension method that query if 'assembly' is debug build.</summary>
            
             <param name="assembly">The assembly to act on.</param>
            
             <returns>true if debug build, false if not.</returns>
        </member>
        <member name="T:NServiceKit.Common.Reflection.PropertyAccessor">
            <summary>A property accessor.</summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor.GetPropertyFn``1(System.String)">
             <summary>Gets property function.</summary>
            
             <typeparam name="TEntity">Type of the entity.</typeparam>
             <param name="propertyName">Name of the property.</param>
            
             <returns>The property function.</returns>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor.SetPropertyFn``1(System.String)">
             <summary>Sets property function.</summary>
            
             <typeparam name="TEntity">Type of the entity.</typeparam>
             <param name="propertyName">Name of the property.</param>
            
             <returns>An Action&lt;TEntity,object&gt;</returns>
        </member>
        <member name="T:NServiceKit.Common.Reflection.PropertyAccessor`1">
            <summary>A property accessor.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor`1.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Reflection.PropertyAccessor&lt;TEntity&gt; class.</summary>
            
             <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor`1.GetPropertyFn">
             <summary>Gets property function.</summary>
            
             <returns>The property function.</returns>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor`1.SetPropertyFn">
             <summary>Sets property function.</summary>
            
             <returns>An Action&lt;TEntity,object&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor`1.TypedGetPropertyFn``1">
            <summary>
            Func to get the Strongly-typed field
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor`1.ValueTypedGetPropertyFn``1">
            <summary>
            Required to cast the return ValueType to an object for caching
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor`1.UnTypedGetPropertyFn``1">
             <summary>Un typed get property function.</summary>
            
             <typeparam name="TId">Type of the identifier.</typeparam>
            
             <returns>A Func&lt;object,object&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor`1.TypedSetPropertyFn``1">
            <summary>
            Func to set the Strongly-typed field
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor`1.ValueTypesSetPropertyFn``1">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.PropertyAccessor`1.UnTypedSetPropertyFn``1">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="P:NServiceKit.Common.Reflection.PropertyAccessor`1.Name">
             <summary>Gets or sets the name.</summary>
            
             <value>The name.</value>
        </member>
        <member name="P:NServiceKit.Common.Reflection.PropertyAccessor`1.PropertyType">
             <summary>Gets or sets the type of the property.</summary>
            
             <value>The type of the property.</value>
        </member>
        <member name="T:NServiceKit.Common.Reflection.StaticAccessors">
            <summary>A static accessors.</summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors.GetValueGetter(System.Type,System.Reflection.PropertyInfo)">
             <summary>Gets value getter.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="type">        The type.</param>
             <param name="propertyInfo">The propertyInfo to act on.</param>
            
             <returns>The value getter.</returns>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors.GetValueGetter``1(System.Reflection.PropertyInfo)">
             <summary>A PropertyInfo extension method that gets value getter.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="propertyInfo">The propertyInfo to act on.</param>
            
             <returns>The value getter.</returns>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors.GetValueSetter``1(System.Reflection.PropertyInfo)">
             <summary>A PropertyInfo extension method that gets value setter.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="propertyInfo">The propertyInfo to act on.</param>
            
             <returns>The value setter.</returns>
        </member>
        <member name="T:NServiceKit.Common.Reflection.StaticAccessors`1">
            <summary>A static accessors.</summary>
            <typeparam name="TEntity">Type of the entity.</typeparam>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors`1.TypedGetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Func to get the Strongly-typed field
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors`1.ValueUnTypedGetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the return ValueType to an object for caching
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors`1.ValueUnTypedGetPropertyTypeFn(System.Reflection.PropertyInfo)">
             <summary>Value un typed get property type function.</summary>
            
             <param name="pi">The pi.</param>
            
             <returns>A Func&lt;TEntity,object&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors`1.UnTypedGetPropertyFn``1(System.Reflection.PropertyInfo)">
             <summary>Un typed get property function.</summary>
            
             <typeparam name="TId">Type of the identifier.</typeparam>
             <param name="pi">The pi.</param>
            
             <returns>A Func&lt;object,object&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors`1.TypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Func to set the Strongly-typed field
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors`1.ValueUnTypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors`1.ValueUnTypedSetPropertyTypeFn(System.Reflection.PropertyInfo)">
             <summary>Value un typed set property type function.</summary>
            
             <param name="pi">The pi.</param>
            
             <returns>An Action&lt;TEntity,object&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Reflection.StaticAccessors`1.UnTypedSetPropertyFn``1(System.Reflection.PropertyInfo)">
            <summary>
            Required to cast the ValueType to an object for caching
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.AsyncServiceClient">
            Need to provide async request options
            http://msdn.microsoft.com/en-us/library/86wf6409(VS.71).aspx
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.BufferSize">
            <summary>Size of the buffer.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.SetCredentials(System.String,System.String)">
             <summary>Sets the credentials.</summary>
            
             <param name="userName">Name of the user.</param>
             <param name="password">The password.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.SendAsync``1(System.String,System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Sends the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="httpMethod"> The HTTP method.</param>
             <param name="absoluteUrl">URL of the absolute.</param>
             <param name="request">    The request.</param>
             <param name="onSuccess">  The on success.</param>
             <param name="onError">    The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.CancelAsync">
            <summary>Cancel asynchronous.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.HttpWebRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter is executed globally.
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.HttpWebResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            This response action is executed globally.
            Note that you should NOT consume the response stream as this is handled by NServiceKit
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.OnAuthenticationRequired">
            <summary>
            Called before request resend, when the initial request required authentication
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.Credentials">
             <summary>Gets or sets the credentials.</summary>
            
             <value>The credentials.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.AlwaysSendBasicAuthHeader">
             <summary>Gets or sets a value indicating whether the always send basic authentication header.</summary>
            
             <value>true if always send basic authentication header, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.StoreCookies">
             <summary>Gets or sets a value indicating whether the store cookies.</summary>
            
             <value>true if store cookies, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.CookieContainer">
             <summary>Gets or sets the cookie container.</summary>
            
             <value>The cookie container.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.LocalHttpWebRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter only works with the instance where it was set (not global).
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.LocalHttpWebResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            Note that you should NOT consume the response stream as this is handled by NServiceKit
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.BaseUri">
             <summary>Gets or sets URI of the base.</summary>
            
             <value>The base URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.DisableAutoCompression">
             <summary>Gets or sets a value indicating whether the automatic compression is disabled.</summary>
            
             <value>true if disable automatic compression, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.UserName">
             <summary>Gets or sets the name of the user.</summary>
            
             <value>The name of the user.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.Password">
             <summary>Gets or sets the password.</summary>
            
             <value>The password.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.Timeout">
             <summary>Gets or sets the timeout.</summary>
            
             <value>The timeout.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.StreamSerializer">
             <summary>Gets or sets the stream serializer.</summary>
            
             <value>The stream serializer.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AsyncServiceClient.StreamDeserializer">
             <summary>Gets or sets the stream deserializer.</summary>
            
             <value>The stream deserializer.</value>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState&lt;TResponse&gt; class.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.HttpMethod">
            <summary>The HTTP method.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.Url">
            <summary>URL of the document.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.TextData">
            <summary>Information describing the text.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.BytesData">
            <summary>Information describing the bytes.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.BufferRead">
            <summary>The buffer read.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.Request">
            <summary>The request.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.WebRequest">
            <summary>The web request.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.WebResponse">
            <summary>The web response.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.ResponseStream">
            <summary>The response stream.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.Completed">
            <summary>The completed.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.RequestCount">
            <summary>Number of requests.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.Timer">
            <summary>The timer.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.OnSuccess">
            <summary>The on success.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.OnError">
            <summary>The on error.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.HandleSuccess(`0)">
             <summary>Handles the success described by response.</summary>
            
             <param name="response">The response.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.HandleError(`0,System.Exception)">
             <summary>Handles the error.</summary>
            
             <param name="response">The response.</param>
             <param name="ex">      The ex.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.StartTimer(System.TimeSpan)">
             <summary>Starts a timer.</summary>
            
             <param name="timeOut">The time out.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.StopTimer">
            <summary>Stops a timer.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.TimedOut(System.Object)">
             <summary>Timed out.</summary>
            
             <param name="state">The state.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AsyncServiceClient.RequestState`1.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:NServiceKit.Common.ServiceClient.Web.Auth">
            <summary>Copy from NServiceKit.ServiceInterface.Auth to avoid deps.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.provider">
             <summary>Gets or sets the provider.</summary>
            
             <value>The provider.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.State">
             <summary>Gets or sets the state.</summary>
            
             <value>The state.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.oauth_token">
             <summary>Gets or sets the oauth token.</summary>
            
             <value>The oauth token.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.oauth_verifier">
             <summary>Gets or sets the oauth verifier.</summary>
            
             <value>The oauth verifier.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.UserName">
             <summary>Gets or sets the name of the user.</summary>
            
             <value>The name of the user.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.Password">
             <summary>Gets or sets the password.</summary>
            
             <value>The password.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.RememberMe">
             <summary>Gets or sets the remember me.</summary>
            
             <value>The remember me.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.Continue">
             <summary>Gets or sets the continue.</summary>
            
             <value>The continue.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.nonce">
             <summary>Gets or sets the nonce.</summary>
            
             <value>The nonce.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.uri">
             <summary>Gets or sets URI of the document.</summary>
            
             <value>The URI.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.response">
             <summary>Gets or sets the response.</summary>
            
             <value>The response.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.qop">
             <summary>Gets or sets the qop.</summary>
            
             <value>The qop.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.nc">
             <summary>Gets or sets the non-client.</summary>
            
             <value>The non-client.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Auth.cnonce">
             <summary>Gets or sets the cnonce.</summary>
            
             <value>The cnonce.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceClient.Web.AuthResponse">
            <summary>An authentication response.</summary>
        </member>
        <member name="M:NServiceKit.Common.ServiceClient.Web.AuthResponse.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Common.ServiceClient.Web.AuthResponse class.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.AuthResponse.SessionId">
             <summary>Gets or sets the identifier of the session.</summary>
            
             <value>The identifier of the session.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.AuthResponse.UserName">
             <summary>Gets or sets the name of the user.</summary>
            
             <value>The name of the user.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.AuthResponse.ReferrerUrl">
             <summary>Gets or sets URL of the referrer.</summary>
            
             <value>The referrer URL.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.AuthResponse.ResponseStatus">
             <summary>Gets or sets the response status.</summary>
            
             <value>The response status.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceClient.Web.Registration">
            <summary>A registration.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Registration.UserName">
             <summary>Gets or sets the name of the user.</summary>
            
             <value>The name of the user.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Registration.FirstName">
             <summary>Gets or sets the person's first name.</summary>
            
             <value>The name of the first.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Registration.LastName">
             <summary>Gets or sets the person's last name.</summary>
            
             <value>The name of the last.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Registration.DisplayName">
             <summary>Gets or sets the name of the display.</summary>
            
             <value>The name of the display.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Registration.Email">
             <summary>Gets or sets the email.</summary>
            
             <value>The email.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Registration.Password">
             <summary>Gets or sets the password.</summary>
            
             <value>The password.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Registration.AutoLogin">
             <summary>Gets or sets the automatic login.</summary>
            
             <value>The automatic login.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.Registration.Continue">
             <summary>Gets or sets the continue.</summary>
            
             <value>The continue.</value>
        </member>
        <member name="T:NServiceKit.Common.ServiceClient.Web.RegistrationResponse">
            <summary>A registration response.</summary>
        </member>
        <member name="M:NServiceKit.Common.ServiceClient.Web.RegistrationResponse.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Common.ServiceClient.Web.RegistrationResponse class.</summary>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.RegistrationResponse.UserId">
             <summary>Gets or sets the identifier of the user.</summary>
            
             <value>The identifier of the user.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.RegistrationResponse.SessionId">
             <summary>Gets or sets the identifier of the session.</summary>
            
             <value>The identifier of the session.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.RegistrationResponse.UserName">
             <summary>Gets or sets the name of the user.</summary>
            
             <value>The name of the user.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.RegistrationResponse.ReferrerUrl">
             <summary>Gets or sets URL of the referrer.</summary>
            
             <value>The referrer URL.</value>
        </member>
        <member name="P:NServiceKit.Common.ServiceClient.Web.RegistrationResponse.ResponseStatus">
             <summary>Gets or sets the response status.</summary>
            
             <value>The response status.</value>
        </member>
        <member name="T:NServiceKit.ServiceModel.Extensions.DictionaryExtensions">
            <summary>A dictionary extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.DictionaryExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
             <summary>A NameValueCollection extension method that converts the nameValues to a dictionary.</summary>
            
             <param name="nameValues">The nameValues to act on.</param>
            
             <returns>nameValues as a Dictionary&lt;string,string&gt;</returns>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.GenericProxy`1">
            <summary>
            Generic Proxy for service calls.
            </summary>
            <typeparam name="T">The service Contract</typeparam>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.GenericProxy`1.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.GenericProxy&lt;T&gt; class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.GenericProxy`1.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.GenericProxy&lt;T&gt; class.</summary>
            
             <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.GenericProxy`1.#ctor(System.ServiceModel.Description.ServiceEndpoint)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.GenericProxy&lt;T&gt; class.</summary>
            
             <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.GenericProxy`1.Initialize">
            <summary>Initializes this object.</summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.GenericProxy`1.Proxy">
            <summary>
            Returns the transparent proxy for the service call
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.HttpMethod">
            <summary>A HTTP method.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.HttpMethod.Get">
            <summary>The get.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.HttpMethod.Put">
            <summary>The put.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.HttpMethod.Post">
            <summary>The post.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.HttpMethod.Delete">
            <summary>The delete.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.HttpMethod.Options">
            <summary>Options for controlling the operation.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.HttpMethod.Head">
            <summary>The head.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.HttpMethod.Patch">
            <summary>The patch.</summary>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.IDuplex">
            <summary>Interface for duplex.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IDuplex.BeginSend(System.ServiceModel.Channels.Message)">
             <summary>Begins a send.</summary>
            
             <param name="msg">The message.</param>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.IDuplexCallback">
            <summary>Interface for duplex callback.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IDuplexCallback.OnMessageReceived(System.ServiceModel.Channels.Message)">
             <summary>Executes the message received action.</summary>
            
             <param name="msg">The message.</param>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.IOneWay">
            <summary>Interface for one way.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IOneWay.SendOneWay(System.ServiceModel.Channels.Message)">
             <summary>Sends an one way.</summary>
            
             <param name="requestMsg">Message describing the request.</param>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.ISyncReply">
            <summary>Interface for synchronise reply.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ISyncReply.Send(System.ServiceModel.Channels.Message)">
             <summary>Send this message.</summary>
            
             <param name="requestMsg">Message describing the request.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.IWcfServiceClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IWcfServiceClient.SetProxy(System.Uri)">
             <summary>Sets a proxy.</summary>
            
             <param name="proxyAddress">The proxy address.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IWcfServiceClient.Send(System.Object)">
             <summary>Send this message.</summary>
            
             <param name="request">The request.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IWcfServiceClient.Send(System.Object,System.String)">
             <summary>Send this message.</summary>
            
             <param name="request">The request.</param>
             <param name="action"> The action.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IWcfServiceClient.Send(System.Xml.XmlReader,System.String)">
             <summary>Send this message.</summary>
            
             <param name="reader">The reader.</param>
             <param name="action">The action.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IWcfServiceClient.Send(System.ServiceModel.Channels.Message)">
             <summary>Send this message.</summary>
            
             <param name="message">The message.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IWcfServiceClient.SendOneWay(System.Object,System.String)">
             <summary>Sends an one way.</summary>
            
             <param name="request">The request.</param>
             <param name="action"> The action.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IWcfServiceClient.SendOneWay(System.Xml.XmlReader,System.String)">
             <summary>Sends an one way.</summary>
            
             <param name="reader">The reader.</param>
             <param name="action">The action.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.IWcfServiceClient.SendOneWay(System.ServiceModel.Channels.Message)">
             <summary>Sends an one way.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.IWcfServiceClient.Uri">
             <summary>Gets or sets URI of the document.</summary>
            
             <value>The URI.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.JsonRestClientAsync">
            <summary>A JSON rest client asynchronous.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.JsonRestClientAsync.ContentType">
            <summary>Type of the content.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsonRestClientAsync class.</summary>
            
             <param name="baseUri">The base URI.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsonRestClientAsync class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.SetCredentials(System.String,System.String)">
             <summary>Set the credentials to be used when making requests.</summary>
            
             <param name="userName">.</param>
             <param name="password">.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.GetAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.GetAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.DeleteAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.DeleteAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.PostAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.PostAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.PutAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.PutAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.CustomMethodAsync``1(System.String,NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Custom method asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="httpVerb"> The HTTP verb.</param>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.CancelAsync">
             <summary>Cancels pending async operations.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonRestClientAsync.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsonRestClientAsync.Timeout">
             <summary>Gets or sets the timeout.</summary>
            
             <value>The timeout.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsonRestClientAsync.BaseUri">
             <summary>Gets or sets URI of the base.</summary>
            
             <value>The base URI.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.JsonServiceClient">
            <summary>A JSON service client.</summary>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.ServiceClientBase">
            Need to provide async request options
            http://msdn.microsoft.com/en-us/library/86wf6409(VS.71).aspx
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.ServiceClientBase.DefaultHttpMethod">
            <summary>The default HTTP method.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.ServiceClientBase.httpWebRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter is executed globally.
            </summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.ServiceClientBase.httpWebResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            This response action is executed globally.
            Note that you should NOT consume the response stream as this is handled by NServiceKit
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.ServiceClientBase class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.ServiceClientBase class.</summary>
            
             <param name="syncReplyBaseUri">  The synchronise reply base URI.</param>
             <param name="asyncOneWayBaseUri">The asynchronous one way base URI.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.SetBaseUri(System.String)">
            <summary>
            Sets all baseUri properties, using the Format property for the SyncReplyBaseUri and AsyncOneWayBaseUri
            </summary>
            <param name="baseUri">Base URI of the service</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.SetBaseUri(System.String,System.String)">
            <summary>
            Sets all baseUri properties allowing for a temporary override of the Format property
            </summary>
            <param name="baseUri">Base URI of the service</param>
            <param name="format">Override of the Format property for the service</param>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.ServiceClientBase.disableAutoCompression">
            <summary>
            Whether to Accept Gzip,Deflate Content-Encoding and to auto decompress responses
            </summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.ServiceClientBase.username">
            <summary>
            The user name for basic authentication
            </summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.ServiceClientBase.password">
            <summary>
            The password for basic authentication
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.SetCredentials(System.String,System.String)">
            <summary>
            Sets the username and the password for basic authentication.
            </summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.ServiceClientBase.alwaysSendBasicAuthHeader">
            <summary>
            Determines if the basic auth header should be sent with every request.
            By default, the basic auth header is only sent when "401 Unauthorized" is returned.
            </summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.ServiceClientBase.storeCookies">
            <summary>
            Specifies if cookies should be stored
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.SerializeToStream(NServiceKit.ServiceHost.IRequestContext,System.Object,System.IO.Stream)">
             <summary>Serialize to stream.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
             <param name="stream">        The stream.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.DeserializeFromStream``1(System.IO.Stream)">
             <summary>Deserialize from stream.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="stream">The stream.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Send``1(NServiceKit.ServiceHost.IReturn{``0})">
             <summary>Send this message.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Send(NServiceKit.ServiceHost.IReturnVoid)">
             <summary>Send this message.</summary>
            
             <param name="request">The request to get.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Send``1(System.Object)">
             <summary>Send this message.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.HandleResponseException``1(System.Exception,System.Object,System.String,System.Func{System.Net.WebRequest},System.Func{System.Net.WebRequest,System.Net.WebResponse},``0@)">
            <summary>
            Called by Send method if an exception occurs, for instance a System.Net.WebException because the server
            returned an HTTP error code. Override if you want to handle specific exceptions or always want to parse the
            response to a custom ErrorResponse DTO type instead of NServiceKit's ErrorResponse class. In case ex is a
            <c>System.Net.WebException</c>, do not use
            <c>createWebRequest</c>/<c>getResponse</c>/<c>HandleResponse&lt;TResponse&gt;</c> to parse the response
            because that will result in the same exception again. Use
            <c>ThrowWebServiceException&lt;YourErrorResponseType&gt;</c> to parse the response and to throw a
            <c>WebServiceException</c> containing the parsed DTO. Then override Send to handle that exception.
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.ThrowWebServiceException``1(System.Exception,System.String)">
             <summary>Throw web service exception.</summary>
            
             <exception cref="T:NServiceKit.ServiceClient.Web.WebServiceException">  Thrown when a Web Service error condition occurs.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="ex">        The ex.</param>
             <param name="requestUri">URI of the request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.GetUrl(System.String)">
             <summary>Gets an URL.</summary>
            
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
            
             <returns>The URL.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.SendOneWay(System.Object)">
             <summary>Sends an one way.</summary>
            
             <param name="request">The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.SendOneWay(System.String,System.Object)">
             <summary>Sends an one way.</summary>
            
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.SendOneWay(System.String,System.String,System.Object)">
             <summary>Sends an one way.</summary>
            
             <param name="httpMethod">           The HTTP method.</param>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.SendAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Sends the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.SendAsync``1(System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Sends the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.GetAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.GetAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.DeleteAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.DeleteAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PostAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PostAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PutAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PutAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PatchAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Patch asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PatchAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Patch asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.CustomMethodAsync``1(System.String,NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Custom method asynchronous.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="httpVerb"> The HTTP verb.</param>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.CancelAsync">
            <summary>Cancel asynchronous.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Send``1(System.String,System.String,System.Object)">
             <summary>Send this message.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="httpMethod">           The HTTP method.</param>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Get``1(NServiceKit.ServiceHost.IReturn{``0})">
             <summary>Gets.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Get(NServiceKit.ServiceHost.IReturnVoid)">
             <summary>Gets the given request.</summary>
            
             <param name="request">The request to get.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Get``1(System.String)">
             <summary>Gets.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Delete``1(NServiceKit.ServiceHost.IReturn{``0})">
             <summary>Deletes the given relativeOrAbsoluteUrl.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Delete(NServiceKit.ServiceHost.IReturnVoid)">
             <summary>Deletes the given request.</summary>
            
             <param name="request">The request to delete.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Delete``1(System.String)">
             <summary>Deletes the given relativeOrAbsoluteUrl.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Post``1(NServiceKit.ServiceHost.IReturn{``0})">
             <summary>Post this message.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Post(NServiceKit.ServiceHost.IReturnVoid)">
             <summary>Post this message.</summary>
            
             <param name="request">The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Post``1(System.String,System.Object)">
             <summary>Post this message.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Put``1(NServiceKit.ServiceHost.IReturn{``0})">
             <summary>Puts.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Put(NServiceKit.ServiceHost.IReturnVoid)">
             <summary>Puts the given request.</summary>
            
             <param name="request">The request to put.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Put``1(System.String,System.Object)">
             <summary>Puts.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Patch``1(NServiceKit.ServiceHost.IReturn{``0})">
             <summary>Patches.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Patch(NServiceKit.ServiceHost.IReturnVoid)">
             <summary>Patches the given request.</summary>
            
             <param name="request">The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Patch``1(System.String,System.Object)">
             <summary>Patches.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.CustomMethod(System.String,NServiceKit.ServiceHost.IReturnVoid)">
             <summary>Custom method.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="httpVerb">The HTTP verb.</param>
             <param name="request"> The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.CustomMethod``1(System.String,NServiceKit.ServiceHost.IReturn{``0})">
             <summary>Custom method.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="httpVerb">The HTTP verb.</param>
             <param name="request"> The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Head(NServiceKit.ServiceHost.IReturn)">
             <summary>Heads the given request.</summary>
            
             <param name="request">The request.</param>
            
             <returns>A HttpWebResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Head(System.String)">
             <summary>Heads.</summary>
            
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
            
             <returns>A HttpWebResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PostFileWithRequest``1(System.String,System.IO.FileInfo,System.Object)">
             <summary>Posts a file with request.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="fileToUpload">         The file to upload.</param>
             <param name="request">              The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PostFileWithRequest``1(System.String,System.IO.Stream,System.String,System.Object)">
             <summary>Posts a file with request.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="fileToUpload">         The file to upload.</param>
             <param name="fileName">             Filename of the file.</param>
             <param name="request">              The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PostFile``1(System.String,System.IO.FileInfo,System.String)">
             <summary>Posts a file.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="fileToUpload">         The file to upload.</param>
             <param name="mimeType">             Type of the mime.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.PostFile``1(System.String,System.IO.Stream,System.String,System.String)">
             <summary>Posts a file.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="fileToUpload">         The file to upload.</param>
             <param name="fileName">             Filename of the file.</param>
             <param name="mimeType">             Type of the mime.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.ServiceClientBase.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.UseNewPredefinedRoutes">
             <summary>Sets a value indicating whether this object use new predefined routes.</summary>
            
             <value>true if use new predefined routes, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.HttpWebRequestFilter">
             <summary>Gets or sets the HTTP web request filter.</summary>
            
             <value>The HTTP web request filter.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.HttpWebResponseFilter">
             <summary>Gets or sets the HTTP web response filter.</summary>
            
             <value>The HTTP web response filter.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.Headers">
             <summary>Gets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.DisableAutoCompression">
             <summary>Gets or sets a value indicating whether the automatic compression is disabled.</summary>
            
             <value>true if disable automatic compression, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.UserName">
             <summary>Gets or sets the name of the user.</summary>
            
             <value>The name of the user.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.Password">
             <summary>Gets or sets the password.</summary>
            
             <value>The password.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.BaseUri">
             <summary>Gets or sets URI of the base.</summary>
            
             <value>The base URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.SyncReplyBaseUri">
             <summary>Gets or sets URI of the synchronise reply base.</summary>
            
             <value>The synchronise reply base URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.AsyncOneWayBaseUri">
             <summary>Gets or sets URI of the asynchronous one way base.</summary>
            
             <value>The asynchronous one way base URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.Timeout">
             <summary>Gets or sets the timeout.</summary>
            
             <value>The timeout.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.ReadWriteTimeout">
             <summary>Gets or sets the read write timeout.</summary>
            
             <value>The read write timeout.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.Accept">
             <summary>Gets the accept.</summary>
            
             <value>The accept.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.ContentType">
             <summary>Gets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.HttpMethod">
             <summary>Gets or sets the HTTP method.</summary>
            
             <value>The HTTP method.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.Proxy">
             <summary>Gets or sets the proxy.</summary>
            
             <value>The proxy.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.Credentials">
            <summary>
            Gets or sets authentication information for the request.
            Warning: It's recommened to use <see cref="P:NServiceKit.ServiceClient.Web.ServiceClientBase.UserName"/> and <see cref="P:NServiceKit.ServiceClient.Web.ServiceClientBase.Password"/> for basic auth.
            This property is only used for IIS level authentication.
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.AlwaysSendBasicAuthHeader">
             <summary>Gets or sets a value indicating whether the always send basic authentication header.</summary>
            
             <value>true if always send basic authentication header, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.StoreCookies">
             <summary>Gets or sets a value indicating whether the store cookies.</summary>
            
             <value>true if store cookies, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.CookieContainer">
             <summary>Gets or sets the cookie container.</summary>
            
             <value>The cookie container.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.AllowAutoRedirect">
             <summary>Gets or sets a value indicating whether we allow automatic redirect.</summary>
            
             <value>true if allow automatic redirect, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.onAuthenticationRequired">
            <summary>
            Called before request resend, when the initial request required authentication
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.OnAuthenticationRequired">
             <summary>Gets or sets the on authentication required.</summary>
            
             <value>The on authentication required.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.localHttpWebRequestFilter">
            <summary>
            The request filter is called before any request.
            This request filter only works with the instance where it was set (not global).
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.LocalHttpWebRequestFilter">
             <summary>Gets or sets the local HTTP web request filter.</summary>
            
             <value>The local HTTP web request filter.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.localHttpWebResponseFilter">
            <summary>
            The response action is called once the server response is available.
            It will allow you to access raw response information. 
            Note that you should NOT consume the response stream as this is handled by NServiceKit
            </summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.LocalHttpWebResponseFilter">
             <summary>Gets or sets the local HTTP web response filter.</summary>
            
             <value>The local HTTP web response filter.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.ServiceClientBase.StreamDeserializer">
             <summary>Gets the stream deserializer.</summary>
            
             <value>The stream deserializer.</value>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonServiceClient.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsonServiceClient class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonServiceClient.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsonServiceClient class.</summary>
            
             <param name="baseUri">URI of the base.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonServiceClient.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsonServiceClient class.</summary>
            
             <param name="syncReplyBaseUri">  URI of the synchronise reply base.</param>
             <param name="asyncOneWayBaseUri">URI of the asynchronous one way base.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonServiceClient.SerializeToStream(NServiceKit.ServiceHost.IRequestContext,System.Object,System.IO.Stream)">
             <summary>Serialize to stream.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
             <param name="stream">        The stream.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsonServiceClient.DeserializeFromStream``1(System.IO.Stream)">
             <summary>Deserialize from stream.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="stream">The stream.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsonServiceClient.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsonServiceClient.ContentType">
             <summary>Gets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsonServiceClient.StreamDeserializer">
             <summary>Gets the stream deserializer.</summary>
            
             <value>The stream deserializer.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.JsvRestClientAsync">
            <summary>A jsv rest client asynchronous.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.JsvRestClientAsync.ContentType">
            <summary>Type of the content.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsvRestClientAsync class.</summary>
            
             <param name="baseUri">The base URI.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsvRestClientAsync class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.SetCredentials(System.String,System.String)">
             <summary>Set the credentials to be used when making requests.</summary>
            
             <param name="userName">.</param>
             <param name="password">.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.GetAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.GetAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.DeleteAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.DeleteAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.PostAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.PostAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.PutAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.PutAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.CustomMethodAsync``1(System.String,NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Custom method asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="httpVerb"> The HTTP verb.</param>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.CancelAsync">
             <summary>Cancels pending async operations.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvRestClientAsync.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsvRestClientAsync.Timeout">
             <summary>Gets or sets the timeout.</summary>
            
             <value>The timeout.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsvRestClientAsync.BaseUri">
             <summary>Gets or sets URI of the base.</summary>
            
             <value>The base URI.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.JsvServiceClient">
            <summary>A jsv service client.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvServiceClient.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsvServiceClient class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvServiceClient.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsvServiceClient class.</summary>
            
             <param name="baseUri">URI of the base.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvServiceClient.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.JsvServiceClient class.</summary>
            
             <param name="syncReplyBaseUri">  URI of the synchronise reply base.</param>
             <param name="asyncOneWayBaseUri">URI of the asynchronous one way base.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvServiceClient.SerializeToStream(NServiceKit.ServiceHost.IRequestContext,System.Object,System.IO.Stream)">
             <summary>Serialize to stream.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
             <param name="stream">        The stream.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.JsvServiceClient.DeserializeFromStream``1(System.IO.Stream)">
             <summary>Deserialize from stream.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="stream">The stream.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsvServiceClient.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsvServiceClient.ContentType">
             <summary>Gets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.JsvServiceClient.StreamDeserializer">
             <summary>Gets the stream deserializer.</summary>
            
             <value>The stream deserializer.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.Soap11ServiceClient">
            <summary>A SOAP 11 service client.</summary>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.WcfServiceClient">
            <summary>A WCF service client.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.SetProxy(System.Uri)">
             <summary>Sets a proxy.</summary>
            
             <param name="proxyAddress">The proxy address.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.WcfServiceClient class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.Send(System.Object)">
             <summary>Send this message.</summary>
            
             <param name="request">The request.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.Send(System.Object,System.String)">
             <summary>Send this message.</summary>
            
             <param name="request">The request.</param>
             <param name="action"> The action.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.Send(System.Xml.XmlReader,System.String)">
             <summary>Send this message.</summary>
            
             <param name="reader">The reader.</param>
             <param name="action">The action.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.Send(System.ServiceModel.Channels.Message)">
             <summary>Send this message.</summary>
            
             <param name="message">The message.</param>
            
             <returns>A Message.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.GetBody``1(System.ServiceModel.Channels.Message)">
             <summary>Gets a body.</summary>
            
             <exception cref="M:NServiceKit.ServiceClient.Web.WcfServiceClient.CreateException(System.Exception,System.Xml.XmlReader)">Thrown when a Create error condition occurs.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="message">The message.</param>
            
             <returns>The body.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.Send``1(System.Object)">
             <summary>Send this message.</summary>
            
             <exception cref="T:NServiceKit.ServiceClient.Web.WebServiceException">Thrown when a Web Service error condition occurs.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="request">The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.Send``1(NServiceKit.ServiceHost.IReturn{``0})">
             <summary>Send this message.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.Send(NServiceKit.ServiceHost.IReturnVoid)">
             <summary>Send this message.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="request">The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.GetResponseStatus(System.Object)">
             <summary>Gets response status.</summary>
            
             <param name="response">The response.</param>
            
             <returns>The response status.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.PostFile``1(System.String,System.IO.FileInfo,System.String)">
             <summary>Posts a file.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="fileToUpload">         The file to upload.</param>
             <param name="mimeType">             Type of the mime.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.PostFile``1(System.String,System.IO.Stream,System.String,System.String)">
             <summary>Posts a file.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="fileToUpload">         The file to upload.</param>
             <param name="fileName">             Filename of the file.</param>
             <param name="mimeType">             Type of the mime.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.SendOneWay(System.Object)">
             <summary>Sends an one way.</summary>
            
             <param name="request">The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.SendOneWay(System.String,System.Object)">
             <summary>Sends an one way.</summary>
            
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.SendOneWay(System.Object,System.String)">
             <summary>Sends an one way.</summary>
            
             <param name="request">The request.</param>
             <param name="action"> The action.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.SendOneWay(System.Xml.XmlReader,System.String)">
             <summary>Sends an one way.</summary>
            
             <param name="reader">The reader.</param>
             <param name="action">The action.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.SendOneWay(System.ServiceModel.Channels.Message)">
             <summary>Sends an one way.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.SendAsync``1(System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Sends the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.SetCredentials(System.String,System.String)">
             <summary>Sets the credentials.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="userName">Name of the user.</param>
             <param name="password">The password.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.GetAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.GetAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.DeleteAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.DeleteAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.PostAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.PostAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.PutAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.PutAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.CustomMethodAsync``1(System.String,NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Custom method asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="httpVerb"> The HTTP verb.</param>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.CancelAsync">
             <summary>Cancel asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.PostFileWithRequest``1(System.String,System.IO.FileInfo,System.Object)">
             <summary>Posts a file with request.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="fileToUpload">         The file to upload.</param>
             <param name="request">              The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WcfServiceClient.PostFileWithRequest``1(System.String,System.IO.Stream,System.String,System.Object)">
             <summary>Posts a file with request.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="fileToUpload">         The file to upload.</param>
             <param name="fileName">             Filename of the file.</param>
             <param name="request">              The request.</param>
            
             <returns>A TResponse.</returns>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WcfServiceClient.Uri">
             <summary>Gets or sets URI of the document.</summary>
            
             <value>The URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WcfServiceClient.MessageVersion">
             <summary>Gets the message version.</summary>
            
             <value>The message version.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WcfServiceClient.Binding">
             <summary>Gets the binding.</summary>
            
             <value>The binding.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WcfServiceClient.StoreCookies">
            <summary>
            Specifies if cookies should be stored
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.Soap11ServiceClient.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.Soap11ServiceClient class.</summary>
            
             <param name="uri">URI of the document.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.Soap11ServiceClient.SetProxy(System.Uri)">
             <summary>Sets a proxy.</summary>
            
             <param name="proxyAddress">The proxy address.</param>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.Soap11ServiceClient.Binding">
             <summary>Gets the binding.</summary>
            
             <value>The binding.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.Soap11ServiceClient.MessageVersion">
             <summary>Gets the message version.</summary>
            
             <value>The message version.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.Soap12ServiceClient">
            <summary>A SOAP 12 service client.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.Soap12ServiceClient.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.Soap12ServiceClient class.</summary>
            
             <param name="uri">URI of the document.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.Soap12ServiceClient.SetProxy(System.Uri)">
             <summary>Sets a proxy.</summary>
            
             <param name="proxyAddress">The proxy address.</param>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.Soap12ServiceClient.Binding">
             <summary>Gets the binding.</summary>
            
             <value>The binding.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.Soap12ServiceClient.MessageVersion">
             <summary>Gets the message version.</summary>
            
             <value>The message version.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.UrlExtensions">
            <summary>
            Donated by Ivan Korneliuk from his post:
            http://korneliuk.blogspot.com/2012/08/NServiceKit-reusing-dtos.html
            
            Modified to only allow using routes matching the supplied HTTP Verb
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.UrlExtensions.ToUrl(NServiceKit.ServiceHost.IReturn,System.String,System.String)">
             <summary>An IReturn extension method that converts this object to an URL.</summary>
            
             <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            
             <param name="request">                        The request to act on.</param>
             <param name="httpMethod">                     The HTTP method.</param>
             <param name="formatFallbackToPredefinedRoute">The format fallback to predefined route.</param>
            
             <returns>The given data converted to a string.</returns>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.RestRoute">
            <summary>A rest route.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.RestRoute.FormatVariable">
            <summary>The value.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.RestRoute.FormatQueryParameterValue">
            <summary>The value.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.RestRoute.#ctor(System.Type,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.RestRoute class.</summary>
            
             <param name="type"> The type.</param>
             <param name="path"> The full pathname of the file.</param>
             <param name="verbs">The verbs.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.RestRoute.Apply(System.Object,System.String)">
             <summary>Applies this object.</summary>
            
             <param name="request">   The request.</param>
             <param name="httpMethod">The HTTP method.</param>
            
             <returns>A RouteResolutionResult.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.RestRoute.FormatQueryParameters(System.Object)">
             <summary>Format query parameters.</summary>
            
             <param name="request">The request.</param>
            
             <returns>The formatted query parameters.</returns>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RestRoute.ErrorMsg">
             <summary>Gets a message describing the error.</summary>
            
             <value>A message describing the error.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RestRoute.Type">
             <summary>Gets the type.</summary>
            
             <value>The type.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RestRoute.IsValid">
             <summary>Gets a value indicating whether this object is valid.</summary>
            
             <value>true if this object is valid, false if not.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RestRoute.Path">
             <summary>Gets the full pathname of the file.</summary>
            
             <value>The full pathname of the file.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RestRoute.HttpMethods">
             <summary>Gets the HTTP methods.</summary>
            
             <value>The HTTP methods.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RestRoute.Variables">
             <summary>Gets the variables.</summary>
            
             <value>The variables.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.RouteResolutionResult">
            <summary>Encapsulates the result of a route resolution.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.RouteResolutionResult.Error(NServiceKit.ServiceClient.Web.RestRoute,System.String)">
             <summary>Errors.</summary>
            
             <param name="route">   The route.</param>
             <param name="errorMsg">Message describing the error.</param>
            
             <returns>A RouteResolutionResult.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.RouteResolutionResult.Success(NServiceKit.ServiceClient.Web.RestRoute,System.String)">
             <summary>Success.</summary>
            
             <param name="route">The route.</param>
             <param name="uri">  URI of the document.</param>
            
             <returns>A RouteResolutionResult.</returns>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RouteResolutionResult.FailReason">
             <summary>Gets the fail reason.</summary>
            
             <value>The fail reason.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RouteResolutionResult.Uri">
             <summary>Gets URI of the document.</summary>
            
             <value>The URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RouteResolutionResult.Route">
             <summary>Gets the route.</summary>
            
             <value>The route.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.RouteResolutionResult.Matches">
             <summary>Gets a value indicating whether the matches.</summary>
            
             <value>true if matches, false if not.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.CookieManagerEndpointBehavior">
            <summary>
            Adds the singleton instance of <see cref="T:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector"/> to an endpoint on the client.
            </summary>
            <remarks>
            Based on http://megakemp.wordpress.com/2009/02/06/managing-shared-cookies-in-wcf/
            </remarks>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.CookieManagerEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
             <summary>Implement to pass data at runtime to bindings to support custom behavior.</summary>
            
             <param name="endpoint">         The endpoint to modify.</param>
             <param name="bindingParameters">The objects that binding elements require to support the behavior.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.CookieManagerEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            Adds the singleton of the <see cref="T:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector"/> class to the client endpoint's message inspectors.
            </summary>
            <param name="endpoint">The endpoint that is to be customized.</param>
            <param name="clientRuntime">The client runtime to be customized.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.CookieManagerEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
             <summary>Implements a modification or extension of the service across an endpoint.</summary>
            
             <param name="endpoint">          The endpoint that exposes the contract.</param>
             <param name="endpointDispatcher">The endpoint dispatcher to be modified or extended.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.CookieManagerEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
             <summary>Implement to confirm that the endpoint meets some intended criteria.</summary>
            
             <param name="endpoint">The endpoint to validate.</param>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector">
            <summary>
            Maintains a copy of the cookies contained in the incoming HTTP response received from any service
            and appends it to all outgoing HTTP requests.
            </summary>
            <remarks>
            This class effectively allows to send any received HTTP cookies to different services,
            reproducing the same functionality available in ASMX Web Services proxies with the <see cref="T:System.Net.CookieContainer"/> class.
            Based on http://megakemp.wordpress.com/2009/02/06/managing-shared-cookies-in-wcf/
            </remarks>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.CookieContainer"/> class.
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.CookieManagerMessageInspector class.</summary>
            
             <param name="uri">URI of the document.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary>
            Inspects a message after a reply message is received but prior to passing it back to the client application.
            </summary>
            <param name="reply">The message to be transformed into types and handed back to the client application.</param>
            <param name="correlationState">Correlation state data.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary>
            Inspects a message before a request message is sent to a service.
            </summary>
            <param name="request">The message to be sent to the service.</param>
            <param name="channel">The client object channel.</param>
            <returns>
            <strong>Null</strong> since no message correlation is used.
            </returns>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector.Uri">
             <summary>Gets or sets URI of the document.</summary>
            
             <value>The URI.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector.Instance">
            <summary>
            Gets the singleton <see cref="T:NServiceKit.ServiceClient.Web.CookieManagerMessageInspector"/> instance.
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.WebRequestExtensions">
            <summary>A web request extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestExtensions.DownloadText(System.Net.WebResponse)">
             <summary>A WebResponse extension method that downloads the text described by webRes.</summary>
            
             <param name="webRes">The webRes to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestExtensions.DownloadBinary(System.Net.WebResponse)">
             <summary>A WebResponse extension method that downloads the binary described by webRes.</summary>
            
             <param name="webRes">The webRes to act on.</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestExtensions.GetErrorResponse(System.String)">
             <summary>A string extension method that gets error response.</summary>
            
             <param name="url">The URL to act on.</param>
            
             <returns>The error response.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestExtensions.PostFileToUrl(System.String,System.IO.FileInfo,System.String,System.String,System.Action{System.Net.HttpWebRequest})">
             <summary>A string extension method that posts a file to URL.</summary>
            
             <param name="url">               The URL to act on.</param>
             <param name="uploadFileInfo">    Information describing the upload file.</param>
             <param name="uploadFileMimeType">Type of the upload file mime.</param>
             <param name="acceptContentType"> Type of the accept content.</param>
             <param name="requestFilter">     A filter specifying the request.</param>
            
             <returns>A WebResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestExtensions.PutFileToUrl(System.String,System.IO.FileInfo,System.String,System.String,System.Action{System.Net.HttpWebRequest})">
             <summary>A string extension method that puts file to URL.</summary>
            
             <param name="url">               The URL to act on.</param>
             <param name="uploadFileInfo">    Information describing the upload file.</param>
             <param name="uploadFileMimeType">Type of the upload file mime.</param>
             <param name="acceptContentType"> Type of the accept content.</param>
             <param name="requestFilter">     A filter specifying the request.</param>
            
             <returns>A WebResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestExtensions.UploadFile(System.Net.WebRequest,System.IO.FileInfo,System.String)">
             <summary>A WebRequest extension method that uploads a file.</summary>
            
             <param name="webRequest">        The webRequest to act on.</param>
             <param name="uploadFileInfo">    Information describing the upload file.</param>
             <param name="uploadFileMimeType">Type of the upload file mime.</param>
            
             <returns>A WebResponse.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestExtensions.UploadFile(System.Net.WebRequest,System.IO.Stream,System.String,System.String,System.String,System.Action{System.Net.HttpWebRequest},System.String)">
             <summary>A WebRequest extension method that uploads a file.</summary>
            
             <param name="webRequest">       The webRequest to act on.</param>
             <param name="fileStream">       The file stream.</param>
             <param name="fileName">         Filename of the file.</param>
             <param name="mimeType">         Type of the mime.</param>
             <param name="acceptContentType">Type of the accept content.</param>
             <param name="requestFilter">    A filter specifying the request.</param>
             <param name="method">           The method.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestExtensions.UploadFile(System.Net.WebRequest,System.IO.Stream,System.String)">
             <summary>A WebRequest extension method that uploads a file.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="webRequest">The webRequest to act on.</param>
             <param name="fileStream">The file stream.</param>
             <param name="fileName">  Filename of the file.</param>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.AuthenticationException">
            <summary>Exception for signalling authentication errors.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AuthenticationException.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.AuthenticationException class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AuthenticationException.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.AuthenticationException class.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AuthenticationException.#ctor(System.String,System.Exception)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.AuthenticationException class.</summary>
            
             <param name="message">       The message.</param>
             <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.AuthenticationInfo">
            <summary>by adamfowleruk.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AuthenticationInfo.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.AuthenticationInfo class.</summary>
            
             <exception cref="T:NServiceKit.ServiceClient.Web.AuthenticationException">Thrown when an Authentication error condition occurs.</exception>
            
             <param name="authHeader">The authentication header.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.AuthenticationInfo.ToString">
             <summary>Returns a string that represents the current object.</summary>
            
             <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AuthenticationInfo.method">
             <summary>Gets or sets the method.</summary>
            
             <value>The method.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AuthenticationInfo.realm">
             <summary>Gets or sets the realm.</summary>
            
             <value>The realm.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AuthenticationInfo.qop">
             <summary>Gets or sets the qop.</summary>
            
             <value>The qop.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AuthenticationInfo.nonce">
             <summary>Gets or sets the nonce.</summary>
            
             <value>The nonce.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AuthenticationInfo.opaque">
             <summary>Gets or sets the opaque.</summary>
            
             <value>The opaque.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AuthenticationInfo.cnonce">
             <summary>Gets or sets the cnonce.</summary>
            
             <value>The cnonce.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.AuthenticationInfo.nc">
             <summary>Gets or sets the non-client.</summary>
            
             <value>The non-client.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.WebRequestUtils">
            <summary>A web request utilities.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.WebRequestUtils.ResponseDtoSuffix">
            <summary>
            Naming convention for the request's Response DTO
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestUtils.GetResponseDtoName(System.Object)">
             <summary>Gets response dto name.</summary>
            
             <param name="request">The request.</param>
            
             <returns>The response dto name.</returns>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebRequestUtils.GetErrorResponseDtoType(System.Object)">
             <summary>Gets error response dto type.</summary>
            
             <param name="request">The request.</param>
            
             <returns>The error response dto type.</returns>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.WebServiceException">
            <summary>Exception for signalling web service errors.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebServiceException.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.WebServiceException class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebServiceException.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.WebServiceException class.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebServiceException.#ctor(System.String,System.Exception)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.WebServiceException class.</summary>
            
             <param name="message">       The message.</param>
             <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.WebServiceException class.</summary>
            
             <param name="info">   The information.</param>
             <param name="context">The context.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.WebServiceException.GetFieldErrors">
             <summary>Gets field errors.</summary>
            
             <returns>The field errors.</returns>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WebServiceException.StatusCode">
             <summary>Gets or sets the status code.</summary>
            
             <value>The status code.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WebServiceException.StatusDescription">
             <summary>Gets or sets information describing the status.</summary>
            
             <value>Information describing the status.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WebServiceException.ResponseDto">
             <summary>Gets or sets the response dto.</summary>
            
             <value>The response dto.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WebServiceException.ResponseBody">
             <summary>Gets or sets the response body.</summary>
            
             <value>The response body.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WebServiceException.ErrorCode">
             <summary>Gets the error code.</summary>
            
             <value>The error code.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WebServiceException.ErrorMessage">
             <summary>Gets a message describing the error.</summary>
            
             <value>A message describing the error.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WebServiceException.ServerStackTrace">
             <summary>Gets the server stack trace.</summary>
            
             <value>The server stack trace.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.WebServiceException.ResponseStatus">
             <summary>Gets the response status.</summary>
            
             <value>The response status.</value>
        </member>
        <member name="T:NServiceKit.ServiceModel.Extensions.XLinqExtensions">
            <summary>A linq extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetString(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a string.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The string.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetBool(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a bool.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetBoolOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets bool or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetNullableBool(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable bool.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable bool.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetInt(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets an int.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The int.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetIntOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets int or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The int or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetNullableInt(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable int.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable int.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetLong(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a long.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The long.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetLongOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets long or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The long or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetNullableLong(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable long.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable long.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetDecimal(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a decimal.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The decimal.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetDecimalOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets decimal or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The decimal or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetNullableDecimal(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable decimal.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable decimal.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetDateTime(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets date time.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The date time.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetDateTimeOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets date time or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The date time or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetNullableDateTime(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable date time.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable date time.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetTimeSpan(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets time span.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The time span.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetTimeSpanOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets time span or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The time span or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetNullableTimeSpan(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable time span.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable time span.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetGuid(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a unique identifier.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The unique identifier.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetGuidOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets unique identifier or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The unique identifier or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetNullableGuid(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable unique identifier.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable unique identifier.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetElementValueOrDefault``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0})">
             <summary>An XElement extension method that gets element value or default.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="element">  The element to act on.</param>
             <param name="name">     The name.</param>
             <param name="converter">The converter.</param>
            
             <returns>The element value or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetElement(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets an element.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
            
             <returns>The element.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.AssertElementHasValue(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that assert element has value.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.GetValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
             <summary>An IEnumerable&lt;XElement&gt; extension method that gets the values.</summary>
            
             <param name="els">The els to act on.</param>
            
             <returns>The values.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.AnyAttribute(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that any attribute.</summary>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
            
             <returns>An XAttribute.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.AllElements(System.Xml.Linq.XElement,System.String)">
             <summary>Enumerates all elements in this collection.</summary>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
            
             <returns>An enumerator that allows foreach to be used to process all elements in this collection.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.AnyElement(System.Xml.Linq.XElement,System.String)">
             <summary>An IEnumerable&lt;XElement&gt; extension method that any element.</summary>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
            
             <returns>An XElement.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.AnyElement(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
             <summary>An IEnumerable&lt;XElement&gt; extension method that any element.</summary>
            
             <param name="elements">The elements to act on.</param>
             <param name="name">    The name.</param>
            
             <returns>An XElement.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.AllElements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
             <summary>Enumerates all elements in this collection.</summary>
            
             <param name="elements">The elements to act on.</param>
             <param name="name">    The name.</param>
            
             <returns>An enumerator that allows foreach to be used to process all elements in this collection.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Extensions.XLinqExtensions.FirstElement(System.Xml.Linq.XElement)">
             <summary>An XElement extension method that first element.</summary>
            
             <param name="element">The element to act on.</param>
            
             <returns>An XElement.</returns>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.XmlRestClientAsync">
            <summary>An XML rest client asynchronous.</summary>
        </member>
        <member name="F:NServiceKit.ServiceClient.Web.XmlRestClientAsync.ContentType">
            <summary>Type of the content.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.XmlRestClientAsync class.</summary>
            
             <param name="baseUri">The base URI.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.XmlRestClientAsync class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.SetCredentials(System.String,System.String)">
             <summary>Set the credentials to be used when making requests.</summary>
            
             <param name="userName">.</param>
             <param name="password">.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.GetAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.GetAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Gets the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.DeleteAsync``1(System.String,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.DeleteAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Deletes the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.PostAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.PostAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Posts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.PutAsync``1(NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.PutAsync``1(System.String,System.Object,System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Puts the asynchronous.</summary>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="relativeOrAbsoluteUrl">URL of the relative or absolute.</param>
             <param name="request">              The request.</param>
             <param name="onSuccess">            The on success.</param>
             <param name="onError">              The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.CustomMethodAsync``1(System.String,NServiceKit.ServiceHost.IReturn{``0},System.Action{``0},System.Action{``0,System.Exception})">
             <summary>Custom method asynchronous.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <typeparam name="TResponse">Type of the response.</typeparam>
             <param name="httpVerb"> The HTTP verb.</param>
             <param name="request">  The request.</param>
             <param name="onSuccess">The on success.</param>
             <param name="onError">  The on error.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.CancelAsync">
             <summary>Cancels pending async operations.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlRestClientAsync.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.XmlRestClientAsync.Timeout">
             <summary>Gets or sets the timeout.</summary>
            
             <value>The timeout.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.XmlRestClientAsync.BaseUri">
             <summary>Gets or sets URI of the base.</summary>
            
             <value>The base URI.</value>
        </member>
        <member name="T:NServiceKit.ServiceClient.Web.XmlServiceClient">
            <summary>An XML service client.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlServiceClient.#ctor">
            <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.XmlServiceClient class.</summary>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlServiceClient.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.XmlServiceClient class.</summary>
            
             <param name="baseUri">URI of the base.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlServiceClient.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceClient.Web.XmlServiceClient class.</summary>
            
             <param name="syncReplyBaseUri">  URI of the synchronise reply base.</param>
             <param name="asyncOneWayBaseUri">URI of the asynchronous one way base.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlServiceClient.SerializeToStream(NServiceKit.ServiceHost.IRequestContext,System.Object,System.IO.Stream)">
             <summary>Serialize to stream.</summary>
            
             <param name="requestContext">Context for the request.</param>
             <param name="request">       The request.</param>
             <param name="stream">        The stream.</param>
        </member>
        <member name="M:NServiceKit.ServiceClient.Web.XmlServiceClient.DeserializeFromStream``1(System.IO.Stream)">
             <summary>Deserialize from stream.</summary>
            
             <exception cref="T:System.Xml.XmlException">Thrown when an XML error condition occurs.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="stream">The stream.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.XmlServiceClient.Format">
             <summary>Gets the format to use.</summary>
            
             <value>The format.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.XmlServiceClient.ContentType">
             <summary>Gets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.ServiceClient.Web.XmlServiceClient.StreamDeserializer">
             <summary>Gets the stream deserializer.</summary>
            
             <value>The stream deserializer.</value>
        </member>
        <member name="T:NServiceKit.ServiceModel.DictionaryExtensions">
            <summary>A dictionary extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.DictionaryExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
             <summary>A NameValueCollection extension method that converts the nameValues to a dictionary.</summary>
            
             <param name="nameValues">The nameValues to act on.</param>
            
             <returns>nameValues as a Dictionary&lt;string,string&gt;</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.DictionaryExtensions.ToNameValueCollection(System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>A Dictionary&lt;string,string&gt; extension method that converts a map to a name value collection.</summary>
            
             <param name="map">The map to act on.</param>
            
             <returns>map as a NameValueCollection.</returns>
        </member>
        <member name="T:NServiceKit.ServiceModel.Serialization.DataContractDeserializer">
            <summary>A data contract deserializer.</summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.DataContractDeserializer.quotas">
            <summary>
            Default MaxStringContentLength is 8k, and throws an exception when reached
            </summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.DataContractDeserializer.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.DataContractDeserializer.#ctor(System.Xml.XmlDictionaryReaderQuotas)">
             <summary>Initializes a new instance of the NServiceKit.ServiceModel.Serialization.DataContractDeserializer class.</summary>
            
             <param name="quotas">Default MaxStringContentLength is 8k, and throws an exception when reached.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.DataContractDeserializer.Parse(System.String,System.Type)">
             <summary>Parses.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <param name="xml"> The XML.</param>
             <param name="type">The type.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.DataContractDeserializer.Parse``1(System.String)">
             <summary>Parses.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="xml">The XML.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.DataContractDeserializer.DeserializeFromStream``1(System.IO.Stream)">
             <summary>Deserialize from stream.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="stream">The stream.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="T:NServiceKit.ServiceModel.Serialization.DataContractSerializer">
            <summary>A data contract serializer.</summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.DataContractSerializer.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.DataContractSerializer.Parse``1(``0,System.Boolean)">
             <summary>Parses the given from.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <typeparam name="XmlDto">Type of the XML dto.</typeparam>
             <param name="from">     Source for the.</param>
             <param name="indentXml">true to indent XML.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.DataContractSerializer.Parse``1(``0)">
             <summary>Parses the given from.</summary>
            
             <typeparam name="XmlDto">Type of the XML dto.</typeparam>
             <param name="from">Source for the.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.DataContractSerializer.SerializeToStream(System.Object,System.IO.Stream)">
             <summary>Serialize to stream.</summary>
            
             <param name="obj">   The object.</param>
             <param name="stream">The stream.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.DataContractSerializer.CompressToStream``1(``0,System.IO.Stream)">
             <summary>Compress to stream.</summary>
            
             <typeparam name="XmlDto">Type of the XML dto.</typeparam>
             <param name="from">  Source for the.</param>
             <param name="stream">The stream.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.DataContractSerializer.Compress``1(``0)">
             <summary>Compress the given from.</summary>
            
             <typeparam name="XmlDto">Type of the XML dto.</typeparam>
             <param name="from">Source for the.</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="T:NServiceKit.ServiceModel.Serialization.JsonDataContractDeserializer">
            <summary>A JSON data contract deserializer.</summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.JsonDataContractDeserializer.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.JsonDataContractDeserializer.DeserializeFromString(System.String,System.Type)">
             <summary>Deserialize from string.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <param name="json">      The JSON.</param>
             <param name="returnType">Type of the return.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.JsonDataContractDeserializer.DeserializeFromString``1(System.String)">
             <summary>Deserialize from string.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="json">The JSON.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.JsonDataContractDeserializer.DeserializeFromStream``1(System.IO.Stream)">
             <summary>Deserialize from stream.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="stream">The stream.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.JsonDataContractDeserializer.DeserializeFromStream(System.Type,System.IO.Stream)">
             <summary>Deserialize from stream.</summary>
            
             <param name="type">  The type.</param>
             <param name="stream">The stream.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="P:NServiceKit.ServiceModel.Serialization.JsonDataContractDeserializer.TextSerializer">
             <summary>Gets or sets the text serializer.</summary>
            
             <value>The text serializer.</value>
        </member>
        <member name="P:NServiceKit.ServiceModel.Serialization.JsonDataContractDeserializer.UseBcl">
             <summary>Gets or sets a value indicating whether this object use bcl.</summary>
            
             <value>true if use bcl, false if not.</value>
        </member>
        <member name="T:NServiceKit.ServiceModel.Serialization.JsonDataContractSerializer">
            <summary>A JSON data contract serializer.</summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.JsonDataContractSerializer.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.JsonDataContractSerializer.UseSerializer(NServiceKit.DesignPatterns.Serialization.ITextSerializer)">
             <summary>Use serializer.</summary>
            
             <param name="textSerializer">The text serializer.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.JsonDataContractSerializer.SerializeToString``1(``0)">
             <summary>Serialize to string.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="obj">The object.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.JsonDataContractSerializer.SerializeToStream``1(``0,System.IO.Stream)">
             <summary>Serialize to stream.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="obj">   The object.</param>
             <param name="stream">The stream.</param>
        </member>
        <member name="P:NServiceKit.ServiceModel.Serialization.JsonDataContractSerializer.TextSerializer">
             <summary>Gets or sets the text serializer.</summary>
            
             <value>The text serializer.</value>
        </member>
        <member name="P:NServiceKit.ServiceModel.Serialization.JsonDataContractSerializer.UseBcl">
             <summary>Gets or sets a value indicating whether this object use bcl.</summary>
            
             <value>true if use bcl, false if not.</value>
        </member>
        <member name="T:NServiceKit.ServiceModel.Serialization.KeyValueDataContractDeserializer">
            <summary>A key value data contract deserializer.</summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.KeyValueDataContractDeserializer.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.KeyValueDataContractDeserializer.Parse(System.Collections.Specialized.NameValueCollection,System.Type)">
             <summary>Parses.</summary>
            
             <param name="nameValues">The name values.</param>
             <param name="returnType">Type of the return.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.KeyValueDataContractDeserializer.Parse(System.Collections.Generic.IDictionary{System.String,System.String},System.Type)">
             <summary>Parses.</summary>
            
             <param name="keyValuePairs">The key value pairs.</param>
             <param name="returnType">   Type of the return.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.KeyValueDataContractDeserializer.Parse``1(System.Collections.Generic.IDictionary{System.String,System.String})">
             <summary>Parses the given key value pairs.</summary>
            
             <typeparam name="To">Type of to.</typeparam>
             <param name="keyValuePairs">The key value pairs.</param>
            
             <returns>To.</returns>
        </member>
        <member name="T:NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer">
            <summary>
            Serializer cache of delegates required to create a type from a string map (e.g. for REST urls)
            </summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer.GetParseFn(System.Type)">
             <summary>Gets parse function.</summary>
            
             <param name="propertyType">Type of the property.</param>
            
             <returns>The parse function.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer.#ctor(System.Type)">
             <summary>Initializes a new instance of the NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer class.</summary>
            
             <param name="type">The type.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer.PopulateFromMap(System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.List{System.String})">
             <summary>Populate from map.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <param name="instance">                      The instance.</param>
             <param name="keyValuePairs">                 The key value pairs.</param>
             <param name="ignoredWarningsOnPropertyNames">List of names of the ignored warnings on properties.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer.CreateFromMap(System.Collections.Generic.IDictionary{System.String,System.String})">
             <summary>Creates from map.</summary>
            
             <param name="keyValuePairs">The key value pairs.</param>
            
             <returns>The new from map.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer.PropertySerializerEntry.#ctor(NServiceKit.Text.Common.SetPropertyDelegate,NServiceKit.Text.Common.ParseStringDelegate)">
             <summary>Initializes a new instance of the NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer.PropertySerializerEntry class.</summary>
            
             <param name="propertySetFn">        The property set function.</param>
             <param name="propertyParseStringFn">The property parse string function.</param>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer.PropertySerializerEntry.PropertySetFn">
            <summary>The property set function.</summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer.PropertySerializerEntry.PropertyParseStringFn">
            <summary>The property parse string function.</summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.StringMapTypeDeserializer.PropertySerializerEntry.PropertyType">
            <summary>Type of the property.</summary>
        </member>
        <member name="T:NServiceKit.ServiceModel.Serialization.XmlSerializableDeserializer">
            <summary>An XML serializable deserializer.</summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.XmlSerializableDeserializer.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.XmlSerializableDeserializer.Parse``1(System.String)">
             <summary>Parses the given from.</summary>
            
             <typeparam name="To">Type of to.</typeparam>
             <param name="xml">The XML.</param>
            
             <returns>To.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.XmlSerializableDeserializer.Parse(System.String,System.Type)">
             <summary>Parses.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <param name="xml"> The XML.</param>
             <param name="type">The type.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.XmlSerializableDeserializer.Parse``1(System.IO.TextReader)">
             <summary>Parses the given from.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <typeparam name="To">Type of to.</typeparam>
             <param name="from">Source for the.</param>
            
             <returns>To.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.XmlSerializableDeserializer.Parse``1(System.IO.Stream)">
             <summary>Parses the given from.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <typeparam name="To">Type of to.</typeparam>
             <param name="from">Source for the.</param>
            
             <returns>To.</returns>
        </member>
        <member name="T:NServiceKit.ServiceModel.Serialization.XmlSerializableSerializer">
            <summary>An XML serializable serializer.</summary>
        </member>
        <member name="F:NServiceKit.ServiceModel.Serialization.XmlSerializableSerializer.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Serialization.XmlSerializableSerializer.Parse``1(``0)">
             <summary>Parses the given from.</summary>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when a Serialization error condition occurs.</exception>
            
             <typeparam name="XmlDto">Type of the XML dto.</typeparam>
             <param name="from">Source for the.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="T:NServiceKit.ServiceModel.Support.XmlSerializerWrapper">
            <summary>An XML serializer wrapper.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.#ctor(System.Type)">
             <summary>Initializes a new instance of the NServiceKit.ServiceModel.Support.XmlSerializerWrapper class.</summary>
            
             <param name="type">.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.#ctor(System.Type,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.ServiceModel.Support.XmlSerializerWrapper class.</summary>
            
             <param name="type">.</param>
             <param name="name">The name.</param>
             <param name="ns">  The ns.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.IsStartObject(System.Xml.XmlDictionaryReader)">
             <summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlDictionaryReader"/> is positioned over an XML element that can be read.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader"/> used to read the XML stream or document.</param>
            
             <returns>true if the reader can read the data; otherwise, false.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
             <summary>
             Reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader"/> and returns the deserialized object; it also enables you to specify whether the serializer can read the
             data before attempting to read it.
             </summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="reader">          An <see cref="T:System.Xml.XmlDictionaryReader"/> used to read the XML document.</param>
             <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; otherwise, false to skip the verification.
             </param>
            
             <returns>The deserialized object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.WriteEndObject(System.Xml.XmlDictionaryWriter)">
             <summary>Writes the end of the object data as a closing XML element to the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryWriter"/>.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter"/> used to write the XML document or stream.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
             <summary>Writes only the content of the object to the XML document or stream using the specified <see cref="T:System.Xml.XmlDictionaryWriter"/>.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter"/> used to write the XML document or stream.</param>
             <param name="graph"> The object that contains the content to write.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
             <summary>Writes the start of the object's data as an opening XML element using the specified <see cref="T:System.Xml.XmlDictionaryWriter"/>.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter"/> used to write the XML document.</param>
             <param name="graph"> The object to serialize.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
             <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
            
             <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the content to the XML document or stream.</param>
             <param name="graph"> The object that contains the content to write.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.ReadObject(System.Xml.XmlDictionaryReader)">
             <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object.</summary>
            
             <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML document.</param>
            
             <returns>The deserialized object.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.Support.XmlSerializerWrapper.GetNamespace(System.Type)">
            <summary>
            Gets the namespace from an attribute marked on the type's definition
            </summary>
            <param name="type"></param>
            <returns>Namespace of type</returns>
        </member>
        <member name="T:NServiceKit.Validation.ValidationError">
            <summary>
            The exception which is thrown when a validation error occurred.
            This validation is serialized in a extra clean and human-readable way by NServiceKit.
            </summary>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationError class.</summary>
            
             <param name="errorCode">The error code.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.#ctor(NServiceKit.Validation.ValidationErrorResult)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationError class.</summary>
            
             <param name="validationResult">The validation result.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.#ctor(NServiceKit.Validation.ValidationErrorField)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationError class.</summary>
            
             <param name="validationError">The validation error.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationError class.</summary>
            
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.ToXml">
            <summary>
            Used if we need to serialize this exception to XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.CreateException(System.Enum)">
             <summary>Creates an exception.</summary>
            
             <param name="errorCode">The error code.</param>
            
             <returns>The new exception.</returns>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.CreateException(System.Enum,System.String)">
             <summary>Creates an exception.</summary>
            
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
            
             <returns>The new exception.</returns>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.CreateException(System.Enum,System.String,System.String)">
             <summary>Creates an exception.</summary>
            
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
             <param name="fieldName">   Name of the field.</param>
            
             <returns>The new exception.</returns>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.CreateException(System.String)">
             <summary>Creates an exception.</summary>
            
             <param name="errorCode">The error code.</param>
            
             <returns>The new exception.</returns>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.CreateException(System.String,System.String)">
             <summary>Creates an exception.</summary>
            
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
            
             <returns>The new exception.</returns>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.CreateException(System.String,System.String,System.String)">
             <summary>Creates an exception.</summary>
            
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
             <param name="fieldName">   Name of the field.</param>
            
             <returns>The new exception.</returns>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.CreateException(NServiceKit.Validation.ValidationErrorField)">
             <summary>Creates an exception.</summary>
            
             <param name="error">The error.</param>
            
             <returns>The new exception.</returns>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.ThrowIfNotValid(NServiceKit.Validation.ValidationErrorResult)">
             <summary>Throw if not valid.</summary>
            
             <exception cref="T:NServiceKit.Validation.ValidationError">Thrown when a validation error error condition occurs.</exception>
            
             <param name="validationResult">The validation result.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationError.ToResponseStatus">
             <summary>Converts this object to a response status.</summary>
            
             <returns>This object as the ResponseStatus.</returns>
        </member>
        <member name="P:NServiceKit.Validation.ValidationError.ErrorMessage">
             <summary>Gets a message describing the error.</summary>
            
             <value>A message describing the error.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationError.ErrorCode">
            <summary>
            Returns the first error code
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationError.Message">
             <summary>Gets the error message and the parameter name, or only the error message if no parameter name is set.</summary>
            
             <value>
             A text string describing the details of the exception. The value of this property takes one of two forms: Condition Value The paramName is a null reference (Nothing in
             Visual Basic) or of zero length. The message string passed to the constructor. The paramName is not null reference (Nothing in Visual Basic) and it has a
             length greater than zero. The message string appended with the name of the invalid parameter.
             </value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationError.Violations">
             <summary>Gets the violations.</summary>
            
             <value>The violations.</value>
        </member>
        <member name="T:NServiceKit.Validation.ValidationErrorField">
            <summary>A validation error field.</summary>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorField.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationErrorField class.</summary>
            
             <param name="errorCode">The error code.</param>
             <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorField.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationErrorField class.</summary>
            
             <param name="errorCode">The error code.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorField.#ctor(System.Enum)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationErrorField class.</summary>
            
             <param name="errorCode">The error code.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorField.#ctor(System.Enum,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationErrorField class.</summary>
            
             <param name="errorCode">The error code.</param>
             <param name="fieldName">The name of the field.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorField.#ctor(System.Enum,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationErrorField class.</summary>
            
             <param name="errorCode">   The error code.</param>
             <param name="fieldName">   The name of the field.</param>
             <param name="errorMessage">A message describing the error.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorField.#ctor(System.String,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationErrorField class.</summary>
            
             <param name="errorCode">   The error code.</param>
             <param name="fieldName">   The name of the field.</param>
             <param name="errorMessage">A message describing the error.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorField.#ctor(System.String,System.String,System.String,System.Object)">
             <summary>Initializes a new instance of the NServiceKit.Validation.ValidationErrorField class.</summary>
            
             <param name="errorCode">     The error code.</param>
             <param name="fieldName">     The name of the field.</param>
             <param name="errorMessage">  A message describing the error.</param>
             <param name="attemptedValue">The attempted value.</param>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorField.ErrorCode">
             <summary>Gets or sets the error code.</summary>
            
             <value>The error code.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorField.ErrorMessage">
             <summary>Gets or sets a message describing the error.</summary>
            
             <value>A message describing the error.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorField.FieldName">
             <summary>Gets or sets the name of the field.</summary>
            
             <value>The name of the field.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorField.AttemptedValue">
             <summary>Gets or sets the attempted value.</summary>
            
             <value>The attempted value.</value>
        </member>
        <member name="T:NServiceKit.Validation.ValidationErrorResult">
            <summary>
            Encapsulates a validation result.
            </summary>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorResult.#ctor">
            <summary>
            Constructs a new ValidationResult
            </summary>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorResult.#ctor(System.Collections.Generic.IList{NServiceKit.Validation.ValidationErrorField})">
            <summary>
            Constructs a new ValidationResult
            </summary>
            <param name="errors">A list of validation results</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorResult.#ctor(System.Collections.Generic.IList{NServiceKit.Validation.ValidationErrorField},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceKit.Validation.ValidationErrorResult"/> class.
            </summary>
            <param name="errors">The errors.</param>
            <param name="successCode">The success code.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:NServiceKit.Validation.ValidationErrorResult.Merge(NServiceKit.Validation.ValidationErrorResult)">
            <summary>
            Merge errors from another <see cref="T:NServiceKit.Validation.ValidationErrorResult"/>
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorResult.Success">
             <summary>Gets the success.</summary>
            
             <value>The success.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorResult.SuccessCode">
            <summary>
            Gets or sets the success code.
            </summary>
            <value>The success code.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorResult.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorResult.SuccessMessage">
            <summary>
            Gets or sets the success message.
            </summary>
            <value>The success message.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorResult.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorResult.Message">
             <summary>Gets the message.</summary>
            
             <value>The message.</value>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorResult.Errors">
            <summary>
            The errors generated by the validation.
            </summary>
        </member>
        <member name="P:NServiceKit.Validation.ValidationErrorResult.IsValid">
            <summary>
            Returns True if the validation was successful (errors list is empty).
            </summary>
        </member>
        <member name="T:NServiceKit.ServiceModel.XLinqExtensions">
            <summary>A linq extensions.</summary>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetString(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a string.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The string.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetStringAttributeOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets string attribute or default.</summary>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
            
             <returns>The string attribute or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetBool(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a bool.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetBoolOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets bool or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetNullableBool(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable bool.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable bool.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetInt(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets an int.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The int.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetIntOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets int or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The int or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetNullableInt(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable int.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable int.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetLong(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a long.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The long.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetLongOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets long or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The long or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetNullableLong(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable long.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable long.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetDecimal(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a decimal.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The decimal.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetDecimalOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets decimal or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The decimal or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetNullableDecimal(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable decimal.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable decimal.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetDateTime(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets date time.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The date time.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetDateTimeOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets date time or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The date time or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetNullableDateTime(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable date time.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable date time.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetTimeSpan(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets time span.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The time span.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetTimeSpanOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets time span or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The time span or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetNullableTimeSpan(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable time span.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable time span.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetGuid(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets a unique identifier.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The unique identifier.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetGuidOrDefault(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets unique identifier or default.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The unique identifier or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetNullableGuid(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets nullable unique identifier.</summary>
            
             <param name="el">  The el to act on.</param>
             <param name="name">The name.</param>
            
             <returns>The nullable unique identifier.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetElementValueOrDefault``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0})">
             <summary>An XElement extension method that gets element value or default.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="element">  The element to act on.</param>
             <param name="name">     The name.</param>
             <param name="converter">The converter.</param>
            
             <returns>The element value or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetElement(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that gets an element.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
            
             <returns>The element.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetAttributeValueOrDefault``1(System.Xml.Linq.XAttribute,System.String,System.Func{System.Xml.Linq.XAttribute,``0})">
             <summary>An XAttribute extension method that gets attribute value or default.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="attr">     The attr to act on.</param>
             <param name="name">     The name.</param>
             <param name="converter">The converter.</param>
            
             <returns>The attribute value or default.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.AssertExactlyOneResult(System.Xml.Linq.XElement,System.String,System.String)">
             <summary>An XElement extension method that assert exactly one result.</summary>
            
             <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            
             <param name="queryListItems"> The queryListItems to act on.</param>
             <param name="referenceNumber">The reference number.</param>
             <param name="formType">       Type of the form.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.AssertElementHasValue(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that assert element has value.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.GetValues(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
             <summary>An IEnumerable&lt;XElement&gt; extension method that gets the values.</summary>
            
             <param name="els">The els to act on.</param>
            
             <returns>The values.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.AnyAttribute(System.Xml.Linq.XElement,System.String)">
             <summary>An XElement extension method that any attribute.</summary>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
            
             <returns>An XAttribute.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.AllElements(System.Xml.Linq.XElement,System.String)">
             <summary>Enumerates all elements in this collection.</summary>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
            
             <returns>An enumerator that allows foreach to be used to process all elements in this collection.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.AnyElement(System.Xml.Linq.XElement,System.String)">
             <summary>An IEnumerable&lt;XElement&gt; extension method that any element.</summary>
            
             <param name="element">The element to act on.</param>
             <param name="name">   The name.</param>
            
             <returns>An XElement.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.AnyElement(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
             <summary>An IEnumerable&lt;XElement&gt; extension method that any element.</summary>
            
             <param name="elements">The elements to act on.</param>
             <param name="name">    The name.</param>
            
             <returns>An XElement.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.AllElements(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.String)">
             <summary>Enumerates all elements in this collection.</summary>
            
             <param name="elements">The elements to act on.</param>
             <param name="name">    The name.</param>
            
             <returns>An enumerator that allows foreach to be used to process all elements in this collection.</returns>
        </member>
        <member name="M:NServiceKit.ServiceModel.XLinqExtensions.FirstElement(System.Xml.Linq.XElement)">
             <summary>An XElement extension method that first element.</summary>
            
             <param name="element">The element to act on.</param>
            
             <returns>An XElement.</returns>
        </member>
        <member name="T:NServiceKit.Common.StreamExtensions">
            <summary>A stream extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.Compress(System.String,System.String)">
            <summary>
            Compresses the specified text using the default compression method: Deflate
            </summary>
            <param name="text">The text.</param>
            <param name="compressionType">Type of the compression.</param>
            <returns></returns>
        </member>
        <member name="F:NServiceKit.Common.StreamExtensions.DeflateProvider">
            <summary>The deflate provider.</summary>
        </member>
        <member name="F:NServiceKit.Common.StreamExtensions.GZipProvider">
            <summary>The zip provider.</summary>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.Decompress(System.Byte[],System.String)">
            <summary>
            Decompresses the specified gz buffer using the default compression method: Inflate
            </summary>
            <param name="gzBuffer">The gz buffer.</param>
            <param name="compressionType">Type of the compression.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.Deflate(System.String)">
             <summary>A string extension method that deflates the given text.</summary>
            
             <param name="text">The text.</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.Inflate(System.Byte[])">
             <summary>A byte[] extension method that inflates the given gz buffer.</summary>
            
             <param name="gzBuffer">The gz buffer.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.GZip(System.String)">
             <summary>A string extension method that zips the given text.</summary>
            
             <param name="text">The text.</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.GUnzip(System.Byte[])">
             <summary>A byte[] extension method that unzips the given gz buffer.</summary>
            
             <param name="gzBuffer">The gz buffer.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.ToUtf8String(System.IO.Stream)">
             <summary>A Stream extension method that converts a stream to an UTF 8 string.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="stream">The stream to act on.</param>
            
             <returns>stream as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.ToBytes(System.IO.Stream)">
             <summary>A Stream extension method that converts a stream to the bytes.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="stream">The stream to act on.</param>
            
             <returns>stream as a byte[].</returns>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.Write(System.IO.Stream,System.String)">
             <summary>A Stream extension method that writes.</summary>
            
             <param name="stream">The stream to act on.</param>
             <param name="text">  The text.</param>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.Close(System.IO.Stream)">
             <summary>A Stream extension method that closes the given stream.</summary>
            
             <param name="stream">The stream to act on.</param>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.ToMd5Hash(System.IO.Stream)">
             <summary>A byte[] extension method that converts the bytes to a md 5 hash.</summary>
            
             <param name="stream">The stream to act on.</param>
            
             <returns>bytes as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StreamExtensions.ToMd5Hash(System.Byte[])">
             <summary>A byte[] extension method that converts the bytes to a md 5 hash.</summary>
            
             <param name="bytes">The bytes to act on.</param>
            
             <returns>bytes as a string.</returns>
        </member>
        <member name="T:NServiceKit.Common.StringExtensions">
            <summary>A string extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToEnum``1(System.String)">
             <summary>A string extension method that converts a value to an enum.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="value">The value to act on.</param>
            
             <returns>value as a T.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToEnumOrDefault``1(System.String,``0)">
             <summary>A string extension method that converts this object to an enum or default.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="value">       The value to act on.</param>
             <param name="defaultValue">The default value.</param>
            
             <returns>The given data converted to a T.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.SplitCamelCase(System.String)">
             <summary>A string extension method that splits camel case.</summary>
            
             <param name="value">The value to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToCamelCase(System.String)">
             <summary>A string extension method that converts a value to a camel case.</summary>
            
             <param name="value">The value to act on.</param>
            
             <returns>value as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToLowercaseUnderscore(System.String)">
             <summary>A string extension method that converts a value to a lowercase underscore.</summary>
            
             <param name="value">The value to act on.</param>
            
             <returns>value as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToInvariantUpper(System.Char)">
             <summary>A char extension method that converts a value to an invariant upper.</summary>
            
             <param name="value">The value to act on.</param>
            
             <returns>value as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToEnglish(System.String)">
             <summary>A string extension method that converts a camelCase to an english.</summary>
            
             <param name="camelCase">The camelCase to act on.</param>
            
             <returns>camelCase as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToHttps(System.String)">
             <summary>A string extension method that converts an URL to the HTTPS.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="url">The URL to act on.</param>
            
             <returns>URL as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.IsEmpty(System.String)">
             <summary>A string extension method that query if 'value' is empty.</summary>
            
             <param name="value">The value to act on.</param>
            
             <returns>true if empty, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.IsNullOrEmpty(System.String)">
             <summary>A string extension method that queries if a null or is empty.</summary>
            
             <param name="value">The value to act on.</param>
            
             <returns>true if a null or is empty, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
             <summary>A string extension method that equals ignore case.</summary>
            
             <param name="value">The value to act on.</param>
             <param name="other">The other.</param>
            
             <returns>true if equals ignore case, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ReplaceFirst(System.String,System.String,System.String)">
             <summary>A string extension method that replace first.</summary>
            
             <param name="haystack">   The haystack to act on.</param>
             <param name="needle">     The needle.</param>
             <param name="replacement">The replacement.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ReplaceAll(System.String,System.String,System.String)">
             <summary>A string extension method that replace all.</summary>
            
             <param name="haystack">   The haystack to act on.</param>
             <param name="needle">     The needle.</param>
             <param name="replacement">The replacement.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ContainsAny(System.String,System.String[])">
             <summary>A string extension method that query if 'text' contains any.</summary>
            
             <param name="text">       The text to act on.</param>
             <param name="testMatches">A variable-length parameters list containing test matches.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.SafeVarName(System.String)">
             <summary>A string extension method that safe variable name.</summary>
            
             <param name="text">The text to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.Join(System.Collections.Generic.List{System.String})">
             <summary>A List&lt;string&gt; extension method that joins.</summary>
            
             <param name="items">The items to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.Join(System.Collections.Generic.List{System.String},System.String)">
             <summary>A List&lt;string&gt; extension method that joins.</summary>
            
             <param name="items">    The items to act on.</param>
             <param name="delimeter">The delimeter.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.CombineWith(System.String,System.String[])">
             <summary>A string extension method that combine with.</summary>
            
             <param name="path">      The path to act on.</param>
             <param name="thesePaths">A variable-length parameters list containing these paths.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.CombineWith(System.String,System.Object[])">
             <summary>A string extension method that combine with.</summary>
            
             <param name="path">      The path to act on.</param>
             <param name="thesePaths">A variable-length parameters list containing these paths.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToParentPath(System.String)">
             <summary>A string extension method that converts a path to a parent path.</summary>
            
             <param name="path">The path to act on.</param>
            
             <returns>path as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.RemoveCharFlags(System.String,System.Boolean[])">
             <summary>A string extension method that removes the character flags.</summary>
            
             <param name="text">     The text to act on.</param>
             <param name="charFlags">The character flags.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToNullIfEmpty(System.String)">
             <summary>A string extension method that converts a text to a null if empty.</summary>
            
             <param name="text">The text to act on.</param>
            
             <returns>text as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.IsUserType(System.Type)">
             <summary>A Type extension method that query if 'type' is user type.</summary>
            
             <param name="type">The type to act on.</param>
            
             <returns>true if user type, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.IsInt(System.String)">
             <summary>A string extension method that query if 'text' is int.</summary>
            
             <param name="text">The text to act on.</param>
            
             <returns>true if int, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToInt(System.String)">
             <summary>A string extension method that converts this object to an int.</summary>
            
             <param name="text">The text to act on.</param>
            
             <returns>The given data converted to an int.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToInt(System.String,System.Int32)">
             <summary>A string extension method that converts this object to an int.</summary>
            
             <param name="text">        The text to act on.</param>
             <param name="defaultValue">The default value.</param>
            
             <returns>The given data converted to an int.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToInt64(System.String)">
             <summary>A string extension method that converts this object to an int 64.</summary>
            
             <param name="text">The text to act on.</param>
            
             <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.ToInt64(System.String,System.Int64)">
             <summary>A string extension method that converts this object to an int 64.</summary>
            
             <param name="text">        The text to act on.</param>
             <param name="defaultValue">The default value.</param>
            
             <returns>The given data converted to a long.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringExtensions.Glob(System.String,System.String)">
             <summary>A string extension method that globs.</summary>
            
             <param name="value">  The value to act on.</param>
             <param name="pattern">Specifies the pattern.</param>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.Common.StringUtils">
            <summary>A string utilities.</summary>
        </member>
        <member name="M:NServiceKit.Common.StringUtils.ConvertHtmlCodes(System.String)">
             <summary>A string extension method that convert HTML codes.</summary>
            
             <param name="html">The HTML to act on.</param>
            
             <returns>The HTML converted codes.</returns>
        </member>
        <member name="M:NServiceKit.Common.StringUtils.ToChar(System.Int32)">
             <summary>An int extension method that converts a codePoint to a character.</summary>
            
             <param name="codePoint">The codePoint to act on.</param>
            
             <returns>codePoint as a string.</returns>
        </member>
        <member name="F:NServiceKit.Common.StringUtils.HtmlCharacterCodes">
            <summary>http://www.w3.org/TR/html5/entities.json TODO: conditional compilation for NET45 that uses ReadOnlyDictionary.</summary>
        </member>
        <member name="T:NServiceKit.Common.Support.ActionExecHandler">
            <summary>An action execute handler.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.ActionExecHandler.#ctor(System.Action,System.Threading.AutoResetEvent)">
             <summary>Initializes a new instance of the NServiceKit.Common.Support.ActionExecHandler class.</summary>
            
             <param name="action">    The action.</param>
             <param name="waitHandle">Handle of the wait.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.ActionExecHandler.Execute">
             <summary>Executes this object.</summary>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.Common.Support.AdapterBase">
            <summary>
            Common functionality when creating adapters
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Support.AdapterBase.Execute``1(System.Func{``0})">
            <summary>
            Executes the specified expression. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.Support.AdapterBase.Execute(System.Action)">
            <summary>
            Executes the specified action (for void methods).
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="P:NServiceKit.Common.Support.AdapterBase.Log">
             <summary>Gets the log.</summary>
            
             <value>The log.</value>
        </member>
        <member name="T:NServiceKit.Common.Support.AssignmentEntry">
            <summary>An assignment entry.</summary>
        </member>
        <member name="F:NServiceKit.Common.Support.AssignmentEntry.Name">
            <summary>The name.</summary>
        </member>
        <member name="F:NServiceKit.Common.Support.AssignmentEntry.From">
            <summary>Source for the.</summary>
        </member>
        <member name="F:NServiceKit.Common.Support.AssignmentEntry.To">
            <summary>to.</summary>
        </member>
        <member name="F:NServiceKit.Common.Support.AssignmentEntry.GetValueFn">
            <summary>The get value function.</summary>
        </member>
        <member name="F:NServiceKit.Common.Support.AssignmentEntry.SetValueFn">
            <summary>The set value function.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentEntry.#ctor(System.String,NServiceKit.Common.Support.AssignmentMember,NServiceKit.Common.Support.AssignmentMember)">
             <summary>Initializes a new instance of the NServiceKit.Common.Support.AssignmentEntry class.</summary>
            
             <param name="name">The name.</param>
             <param name="from">Source for the.</param>
             <param name="to">  to.</param>
        </member>
        <member name="T:NServiceKit.Common.Support.AssignmentMember">
            <summary>An assignment member.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentMember.#ctor(System.Type,System.Reflection.PropertyInfo)">
             <summary>Initializes a new instance of the NServiceKit.Common.Support.AssignmentMember class.</summary>
            
             <param name="type">        The type.</param>
             <param name="propertyInfo">Information describing the property.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentMember.#ctor(System.Type,System.Reflection.FieldInfo)">
             <summary>Initializes a new instance of the NServiceKit.Common.Support.AssignmentMember class.</summary>
            
             <param name="type">     The type.</param>
             <param name="fieldInfo">Information describing the field.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentMember.#ctor(System.Type,System.Reflection.MethodInfo)">
             <summary>Initializes a new instance of the NServiceKit.Common.Support.AssignmentMember class.</summary>
            
             <param name="type">      The type.</param>
             <param name="methodInfo">Information describing the method.</param>
        </member>
        <member name="F:NServiceKit.Common.Support.AssignmentMember.Type">
            <summary>The type.</summary>
        </member>
        <member name="F:NServiceKit.Common.Support.AssignmentMember.PropertyInfo">
            <summary>Information describing the property.</summary>
        </member>
        <member name="F:NServiceKit.Common.Support.AssignmentMember.FieldInfo">
            <summary>Information describing the field.</summary>
        </member>
        <member name="F:NServiceKit.Common.Support.AssignmentMember.MethodInfo">
            <summary>Information describing the method.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentMember.GetGetValueFn">
             <summary>Gets value function.</summary>
            
             <returns>The value function.</returns>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentMember.GetSetValueFn">
             <summary>Gets set value function.</summary>
            
             <returns>The set value function.</returns>
        </member>
        <member name="T:NServiceKit.Common.Support.AssignmentDefinition">
            <summary>An assignment definition.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentDefinition.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Common.Support.AssignmentDefinition class.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentDefinition.AddMatch(System.String,NServiceKit.Common.Support.AssignmentMember,NServiceKit.Common.Support.AssignmentMember)">
             <summary>Adds a match.</summary>
            
             <param name="name">       The name.</param>
             <param name="readMember"> The read member.</param>
             <param name="writeMember">The write member.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentDefinition.PopulateFromPropertiesWithAttribute(System.Object,System.Object,System.Type)">
             <summary>Populate from properties with attribute.</summary>
            
             <param name="to">           to.</param>
             <param name="from">         Source for the.</param>
             <param name="attributeType">Type of the attribute.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentDefinition.PopulateWithNonDefaultValues(System.Object,System.Object)">
             <summary>Populate with non default values.</summary>
            
             <param name="to">  to.</param>
             <param name="from">Source for the.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentDefinition.Populate(System.Object,System.Object)">
             <summary>Populates.</summary>
            
             <param name="to">  to.</param>
             <param name="from">Source for the.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.AssignmentDefinition.Populate(System.Object,System.Object,System.Func{System.Reflection.PropertyInfo,System.Boolean},System.Func{System.Object,System.Type,System.Boolean})">
             <summary>Populates.</summary>
            
             <param name="to">                   to.</param>
             <param name="from">                 Source for the.</param>
             <param name="propertyInfoPredicate">The property information predicate.</param>
             <param name="valuePredicate">       The value predicate.</param>
        </member>
        <member name="P:NServiceKit.Common.Support.AssignmentDefinition.FromType">
             <summary>Gets or sets the type of from.</summary>
            
             <value>The type of from.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.AssignmentDefinition.ToType">
             <summary>Gets or sets the type of to.</summary>
            
             <value>The type of to.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.AssignmentDefinition.AssignmentMemberMap">
             <summary>Gets or sets the assignment member map.</summary>
            
             <value>The assignment member map.</value>
        </member>
        <member name="T:NServiceKit.Common.Support.CommandExecsHandler">
            <summary>A command execs handler.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.CommandExecsHandler.#ctor(NServiceKit.DesignPatterns.Command.ICommandExec,System.Threading.AutoResetEvent)">
             <summary>Initializes a new instance of the NServiceKit.Common.Support.CommandExecsHandler class.</summary>
            
             <param name="command">   The command.</param>
             <param name="waitHandle">Handle of the wait.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.CommandExecsHandler.Execute">
             <summary>Executes this object.</summary>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.Common.Support.CommandResultsHandler`1">
            <summary>A command results handler.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:NServiceKit.Common.Support.CommandResultsHandler`1.#ctor(System.Collections.Generic.List{`0},NServiceKit.DesignPatterns.Command.ICommandList{`0},System.Threading.AutoResetEvent)">
             <summary>Initializes a new instance of the NServiceKit.Common.Support.CommandResultsHandler&lt;T&gt; class.</summary>
            
             <param name="results">   The results.</param>
             <param name="command">   The command.</param>
             <param name="waitHandle">Handle of the wait.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.CommandResultsHandler`1.Execute">
             <summary>Executes this object.</summary>
            
             <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:NServiceKit.Common.Support.InMemoryLogFactory">
            <summary>
            Note: InMemoryLog keeps all logs in memory, so don't use it long running exceptions
            
            Returns a thread-safe InMemoryLog which you can use while *TESTING*
            to provide a detailed analysis of your logs.
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLogFactory.GetLogger(System.Type)">
             <summary>Gets the logger.</summary>
            
             <param name="type">The type.</param>
            
             <returns>The logger.</returns>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLogFactory.GetLogger(System.String)">
             <summary>Gets the logger.</summary>
            
             <param name="typeName">Name of the type.</param>
            
             <returns>The logger.</returns>
        </member>
        <member name="T:NServiceKit.Common.Support.InMemoryLog">
            <summary>An in memory log.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Support.InMemoryLog class.</summary>
            
             <param name="loggerName">Name of the logger.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Debug(System.Object)">
             <summary>Logs a Debug message.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Debug(System.Object,System.Exception)">
             <summary>Logs a Debug message and exception.</summary>
            
             <param name="message">  The message.</param>
             <param name="exception">The exception.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.DebugFormat(System.String,System.Object[])">
             <summary>Logs a Debug format message.</summary>
            
             <param name="format">The format.</param>
             <param name="args">  The args.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Error(System.Object)">
             <summary>Logs a Error message.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Error(System.Object,System.Exception)">
             <summary>Logs a Error message and exception.</summary>
            
             <param name="message">  The message.</param>
             <param name="exception">The exception.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.ErrorFormat(System.String,System.Object[])">
             <summary>Logs a Error format message.</summary>
            
             <param name="format">The format.</param>
             <param name="args">  The args.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Fatal(System.Object)">
             <summary>Logs a Fatal message.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Fatal(System.Object,System.Exception)">
             <summary>Logs a Fatal message and exception.</summary>
            
             <param name="message">  The message.</param>
             <param name="exception">The exception.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.FatalFormat(System.String,System.Object[])">
             <summary>Logs a Error format message.</summary>
            
             <param name="format">The format.</param>
             <param name="args">  The args.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Info(System.Object)">
             <summary>Logs an Info message and exception.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Info(System.Object,System.Exception)">
             <summary>Logs an Info message and exception.</summary>
            
             <param name="message">  The message.</param>
             <param name="exception">The exception.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.InfoFormat(System.String,System.Object[])">
             <summary>Logs an Info format message.</summary>
            
             <param name="format">The format.</param>
             <param name="args">  The args.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Warn(System.Object)">
             <summary>Logs a Warning message.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.Warn(System.Object,System.Exception)">
             <summary>Logs a Warning message and exception.</summary>
            
             <param name="message">  The message.</param>
             <param name="exception">The exception.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.InMemoryLog.WarnFormat(System.String,System.Object[])">
             <summary>Logs a Warning format message.</summary>
            
             <param name="format">The format.</param>
             <param name="args">  The args.</param>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.LoggerName">
             <summary>Gets the name of the logger.</summary>
            
             <value>The name of the logger.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.CombinedLog">
             <summary>Gets the combined log.</summary>
            
             <value>The combined log.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.DebugEntries">
             <summary>Gets or sets the debug entries.</summary>
            
             <value>The debug entries.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.DebugExceptions">
             <summary>Gets or sets the debug exceptions.</summary>
            
             <value>The debug exceptions.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.InfoEntries">
             <summary>Gets or sets the information entries.</summary>
            
             <value>The information entries.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.InfoExceptions">
             <summary>Gets or sets the information exceptions.</summary>
            
             <value>The information exceptions.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.WarnEntries">
             <summary>Gets or sets the warning entries.</summary>
            
             <value>The warning entries.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.WarnExceptions">
             <summary>Gets or sets the warning exceptions.</summary>
            
             <value>The warning exceptions.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.ErrorEntries">
             <summary>Gets or sets the error entries.</summary>
            
             <value>The error entries.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.ErrorExceptions">
             <summary>Gets or sets the error exceptions.</summary>
            
             <value>The error exceptions.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.FatalEntries">
             <summary>Gets or sets the fatal entries.</summary>
            
             <value>The fatal entries.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.FatalExceptions">
             <summary>Gets or sets the fatal exceptions.</summary>
            
             <value>The fatal exceptions.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.HasExceptions">
             <summary>Gets a value indicating whether this object has exceptions.</summary>
            
             <value>true if this object has exceptions, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.Support.InMemoryLog.IsDebugEnabled">
             <summary>Gets a value indicating whether this instance is debug enabled.</summary>
            
             <value><c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NServiceKit.Common.Support.LogicFacadeBase">
            <summary>A logic facade base.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.LogicFacadeBase.AcquireInitContext(NServiceKit.LogicFacade.InitOptions)">
             <summary>Acquires the initialise context described by initOptions.</summary>
            
             <param name="initOptions">Options for controlling the initialise.</param>
            
             <returns>An IInitContext.</returns>
        </member>
        <member name="M:NServiceKit.Common.Support.LogicFacadeBase.Execute``1(NServiceKit.DesignPatterns.Command.ICommand{``0})">
            <summary>
            Executes the specified action.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.Support.LogicFacadeBase.Init``1(NServiceKit.DesignPatterns.Command.ICommand{``0})">
             <summary>Initialises this object.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="action">The action.</param>
        </member>
        <member name="M:NServiceKit.Common.Support.LogicFacadeBase.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.Common.Support.LogicFacadeBase.CurrentContext">
            <summary>
            Gets the current context (or null if none).
            </summary>
        </member>
        <member name="P:NServiceKit.Common.Support.LogicFacadeBase.IsCurrentlyInitializeOnly">
            <summary>
            Checks if the current context is set to "initialize only".
            </summary>
        </member>
        <member name="F:NServiceKit.Common.Support.LogicFacadeBase.InitialisationContext.initOptions">
            <summary>
            Determines whether this context is initialise only or not
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Support.LogicFacadeBase.InitialisationContext.#ctor(NServiceKit.Common.Support.LogicFacadeBase,NServiceKit.LogicFacade.InitOptions)">
            <summary>
            Constructs a new InitialiseOnlyContext
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Support.LogicFacadeBase.InitialisationContext.Dispose">
            <summary>
            Call to remove this current context and reveal the previous context (if any).
            </summary>
        </member>
        <member name="P:NServiceKit.Common.Support.LogicFacadeBase.InitialisationContext.InitialisedObject">
            <summary>
            Gets or sets the object that has been initialized only.
            </summary>
        </member>
        <member name="T:NServiceKit.Common.Support.NetDeflateProvider">
            <summary>A net deflate provider.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.NetDeflateProvider.Deflate(System.String)">
             <summary>Deflates.</summary>
            
             <param name="text">The text.</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="M:NServiceKit.Common.Support.NetDeflateProvider.Inflate(System.Byte[])">
             <summary>Inflates the given gz buffer.</summary>
            
             <param name="gzBuffer">Buffer for gz data.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="T:NServiceKit.Common.Support.NetGZipProvider">
            <summary>A net g zip provider.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.NetGZipProvider.GZip(System.String)">
             <summary>Zips.</summary>
            
             <param name="text">The text.</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="M:NServiceKit.Common.Support.NetGZipProvider.GUnzip(System.Byte[])">
             <summary>Unzips the given gz buffer.</summary>
            
             <param name="gzBuffer">Buffer for gz data.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="T:NServiceKit.Common.Support.PropertySetterDelegate">
             <summary>Property setter delegate.</summary>
            
             <param name="instance">The instance.</param>
             <param name="value">   The value.</param>
        </member>
        <member name="T:NServiceKit.Common.Support.PropertyGetterDelegate">
             <summary>Property getter delegate.</summary>
            
             <param name="instance">The instance.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="T:NServiceKit.Common.Support.PropertyInvoker">
            <summary>A property invoker.</summary>
        </member>
        <member name="M:NServiceKit.Common.Support.PropertyInvoker.GetPropertySetterFn(System.Reflection.PropertyInfo)">
             <summary>A PropertyInfo extension method that gets property setter function.</summary>
            
             <param name="propertyInfo">The propertyInfo to act on.</param>
            
             <returns>The property setter function.</returns>
        </member>
        <member name="M:NServiceKit.Common.Support.PropertyInvoker.GetPropertyGetterFn(System.Reflection.PropertyInfo)">
             <summary>A PropertyInfo extension method that gets property getter function.</summary>
            
             <exception cref="T:System.Exception">Thrown when an exception error condition occurs.</exception>
            
             <param name="propertyInfo">The propertyInfo to act on.</param>
            
             <returns>The property getter function.</returns>
        </member>
        <member name="T:NServiceKit.Common.TypeExtensions">
            <summary>A type extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.TypeExtensions.GetPropertyNames(System.Type)">
             <summary>A Type extension method that gets property names.</summary>
            
             <param name="type">The type to act on.</param>
            
             <returns>The property names.</returns>
        </member>
        <member name="M:NServiceKit.Common.TypeExtensions.ToAttributes``1(System.Type)">
             <summary>A Type extension method that converts a type to the attributes.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="type">The type to act on.</param>
            
             <returns>type as a List&lt;T&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.TypeExtensions.GetAssemblyPath(System.Type)">
             <summary>A Type extension method that gets assembly path.</summary>
            
             <param name="source">The source to act on.</param>
            
             <returns>The assembly path.</returns>
        </member>
        <member name="T:NServiceKit.Common.UrnId">
            <summary>
            Creates a Unified Resource Name (URN) with the following formats:
            
            	- urn:{TypeName}:{IdFieldValue}						e.g. urn:UserSession:1
            	- urn:{TypeName}:{IdFieldName}:{IdFieldValue}		e.g. urn:UserSession:UserId:1			
            
            </summary>
        </member>
        <member name="M:NServiceKit.Common.UrnId.Parse(System.String)">
             <summary>Parses.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="urnId">Identifier for the URN.</param>
            
             <returns>An UrnId.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.Create(System.String,System.String)">
             <summary>Creates a new string.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="objectTypeName">Name of the object type.</param>
             <param name="idFieldValue">  The identifier field value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.CreateWithParts(System.String,System.String[])">
             <summary>Creates with parts.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="objectTypeName">Name of the object type.</param>
             <param name="keyParts">      A variable-length parameters list containing key parts.</param>
            
             <returns>The new with parts.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.CreateWithParts``1(System.String[])">
             <summary>Creates with parts.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="keyParts">A variable-length parameters list containing key parts.</param>
            
             <returns>The new with parts.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.Create``1(System.String)">
             <summary>Creates a new string.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="idFieldValue">The identifier field value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.Create``1(System.Object)">
             <summary>Creates a new string.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="idFieldValue">The identifier field value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.Create(System.Type,System.String)">
             <summary>Creates a new string.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="objectType">  Type of the object.</param>
             <param name="idFieldValue">The identifier field value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.Create``1(System.String,System.String)">
             <summary>Creates a new string.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="idFieldName"> Name of the identifier field.</param>
             <param name="idFieldValue">The identifier field value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.Create(System.Type,System.String,System.String)">
             <summary>Creates a new string.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="objectType">  Type of the object.</param>
             <param name="idFieldName"> Name of the identifier field.</param>
             <param name="idFieldValue">The identifier field value.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.GetStringId(System.String)">
             <summary>Gets string identifier.</summary>
            
             <param name="urn">The URN.</param>
            
             <returns>The string identifier.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.GetGuidId(System.String)">
             <summary>Gets unique identifier.</summary>
            
             <param name="urn">The URN.</param>
            
             <returns>The unique identifier.</returns>
        </member>
        <member name="M:NServiceKit.Common.UrnId.GetLongId(System.String)">
             <summary>Gets long identifier.</summary>
            
             <param name="urn">The URN.</param>
            
             <returns>The long identifier.</returns>
        </member>
        <member name="P:NServiceKit.Common.UrnId.TypeName">
             <summary>Gets the name of the type.</summary>
            
             <value>The name of the type.</value>
        </member>
        <member name="P:NServiceKit.Common.UrnId.IdFieldValue">
             <summary>Gets the identifier field value.</summary>
            
             <value>The identifier field value.</value>
        </member>
        <member name="P:NServiceKit.Common.UrnId.IdFieldName">
             <summary>Gets the name of the identifier field.</summary>
            
             <value>The name of the identifier field.</value>
        </member>
        <member name="T:NServiceKit.Common.Utils.AssertUtils">
            <summary>An assert utilities.</summary>
        </member>
        <member name="M:NServiceKit.Common.Utils.AssertUtils.AreNotNull``1(``0[])">
             <summary>Are not null.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="fields">A variable-length parameters list containing fields.</param>
        </member>
        <member name="M:NServiceKit.Common.Utils.AssertUtils.AreNotNull(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Asserts that the supplied arguments are not null.
            
            AssertUtils.AreNotNull(new Dictionary&lt;string,object&gt;{ {"name",null} });
              will throw new ArgumentNullException("name");
            </summary>
            <param name="fieldMap">The field map.</param>
        </member>
        <member name="T:NServiceKit.Common.Utils.CommandsUtils">
            <summary>The commands utilities.</summary>
        </member>
        <member name="M:NServiceKit.Common.Utils.CommandsUtils.ExecuteAsyncCommandList``1(System.TimeSpan,NServiceKit.DesignPatterns.Command.ICommandList{``0}[])">
             <summary>Executes the asynchronous command list operation.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="timeout"> The timeout.</param>
             <param name="commands">.</param>
            
             <returns>A List&lt;T&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.CommandsUtils.ExecuteAsyncCommandList``1(System.TimeSpan,System.Collections.Generic.IEnumerable{NServiceKit.DesignPatterns.Command.ICommandList{``0}})">
             <summary>Executes the asynchronous command list operation.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="timeout"> The timeout.</param>
             <param name="commands">.</param>
            
             <returns>A List&lt;T&gt;</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.CommandsUtils.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
             <summary>Wait all.</summary>
            
             <exception cref="T:System.TimeoutException">Thrown when a Timeout error condition occurs.</exception>
            
             <param name="waitHandles">The wait handles.</param>
             <param name="timeout">    The timeout.</param>
        </member>
        <member name="M:NServiceKit.Common.Utils.CommandsUtils.ExecuteAsyncCommandExec(System.TimeSpan,System.Collections.Generic.IEnumerable{NServiceKit.DesignPatterns.Command.ICommandExec})">
             <summary>Provide the an option for the callee to block until all commands are executed.</summary>
            
             <param name="timeout"> The timeout.</param>
             <param name="commands">.</param>
        </member>
        <member name="M:NServiceKit.Common.Utils.CommandsUtils.ExecuteAsyncCommandExec(System.Collections.Generic.IEnumerable{NServiceKit.DesignPatterns.Command.ICommandExec})">
            <summary>
            Provide the an option for the callee to block until all commands are executed
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="T:NServiceKit.Common.Utils.ResponseStatusUtils">
            <summary>A response status utilities.</summary>
        </member>
        <member name="M:NServiceKit.Common.Utils.ResponseStatusUtils.CreateResponseStatus(System.String,System.String,System.Collections.Generic.IEnumerable{NServiceKit.Validation.ValidationErrorField})">
            <summary>
            Creates the error response from the values provided.
            
            If the errorCode is empty it will use the first validation error code, 
            if there is none it will throw an error.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="errorMessage">The error message.</param>
            <param name="validationErrors">The validation errors.</param>
            <returns></returns>
        </member>
        <member name="T:NServiceKit.Common.Utils.FuncUtils">
            <summary>A function utilities.</summary>
        </member>
        <member name="M:NServiceKit.Common.Utils.FuncUtils.TryExec(System.Action)">
            <summary>
            Invokes the action provided and returns true if no excpetion was thrown.
            Otherwise logs the exception and returns false if an exception was thrown.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.FuncUtils.TryExec``1(System.Func{``0})">
             <summary>Try execute.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="func">The function.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.FuncUtils.TryExec``1(System.Func{``0},``0)">
             <summary>Try execute.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="func">        The function.</param>
             <param name="defaultValue">The default value.</param>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.FuncUtils.WaitWhile(System.Func{System.Boolean},System.Int32,System.Int32)">
             <summary>Wait while.</summary>
            
             <exception cref="T:System.TimeoutException">Thrown when a Timeout error condition occurs.</exception>
            
             <param name="condition">           The condition.</param>
             <param name="millisecondTimeout">  The millisecond timeout.</param>
             <param name="millsecondPollPeriod">The millsecond poll period.</param>
        </member>
        <member name="T:NServiceKit.Common.Utils.IdUtils`1">
            <summary>An identifier utilities.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:NServiceKit.Common.Utils.IdUtils`1.GetId(`0)">
             <summary>Gets an identifier.</summary>
            
             <param name="entity">The entity.</param>
            
             <returns>The identifier.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.HasPropertyId`1.GetId(`0)">
             <summary>Gets an identifier.</summary>
            
             <param name="entity">The entity.</param>
            
             <returns>The identifier.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.HasId`1.GetId(`0)">
             <summary>Gets an identifier.</summary>
            
             <param name="entity">The entity.</param>
            
             <returns>The identifier.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.HasIdGetter`2.GetId(`0)">
             <summary>Gets an identifier.</summary>
            
             <param name="entity">The entity.</param>
            
             <returns>The identifier.</returns>
        </member>
        <member name="T:NServiceKit.Common.Utils.IdUtils">
            <summary>An identifier utilities.</summary>
        </member>
        <member name="F:NServiceKit.Common.Utils.IdUtils.IdField">
            <summary>The identifier field.</summary>
        </member>
        <member name="M:NServiceKit.Common.Utils.IdUtils.GetObjectId(System.Object)">
             <summary>An object extension method that gets object identifier.</summary>
            
             <param name="entity">The entity to act on.</param>
            
             <returns>The object identifier.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.IdUtils.GetId``1(``0)">
             <summary>A T extension method that gets an identifier.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="entity">The entity to act on.</param>
            
             <returns>The identifier.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.IdUtils.CreateUrn``1(System.Object)">
             <summary>A T extension method that creates an URN.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="id">The identifier.</param>
            
             <returns>The new URN.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.IdUtils.CreateUrn(System.Type,System.Object)">
             <summary>Creates an URN.</summary>
            
             <param name="type">The type.</param>
             <param name="id">  The identifier.</param>
            
             <returns>The new URN.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.IdUtils.CreateUrn``1(``0)">
             <summary>A T extension method that creates an URN.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="entity">The entity to act on.</param>
            
             <returns>The new URN.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.IdUtils.CreateCacheKeyPath``1(System.String)">
             <summary>Creates cache key path.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="idValue">The identifier value.</param>
            
             <returns>The new cache key path.</returns>
        </member>
        <member name="T:NServiceKit.Common.Utils.PathUtils">
            <summary>A path utilities.</summary>
        </member>
        <member name="M:NServiceKit.Common.Utils.PathUtils.MapAbsolutePath(System.String,System.String)">
             <summary>Maps the path of a file in a self-hosted scenario.</summary>
            
             <param name="relativePath">             the relative path.</param>
             <param name="appendPartialPathModifier">The append partial path modifier.</param>
            
             <returns>the absolute path.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.PathUtils.MapProjectPath(System.String)">
            <summary>
            Maps the path of a file in the context of a VS project
            </summary>
            <param name="relativePath">the relative path</param>
            <returns>the absolute path</returns>
            <remarks>Assumes static content is two directories above the /bin/ directory,
            eg. in a unit test scenario  the assembly would be in /bin/Debug/.</remarks>
        </member>
        <member name="M:NServiceKit.Common.Utils.PathUtils.MapAbsolutePath(System.String)">
            <summary>
            Maps the path of a file in a self-hosted scenario
            </summary>
            <param name="relativePath">the relative path</param>
            <returns>the absolute path</returns>
            <remarks>Assumes static content is copied to /bin/ folder with the assemblies</remarks>
        </member>
        <member name="M:NServiceKit.Common.Utils.PathUtils.MapHostAbsolutePath(System.String)">
            <summary>
            Maps the path of a file in an Asp.Net hosted scenario
            </summary>
            <param name="relativePath">the relative path</param>
            <returns>the absolute path</returns>
            <remarks>Assumes static content is in the parent folder of the /bin/ directory</remarks>
        </member>
        <member name="M:NServiceKit.Common.Utils.PathUtils.CombinePaths(System.String[])">
             <summary>Combine paths.</summary>
            
             <param name="paths">A variable-length parameters list containing paths.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.PathUtils.AssertDir(System.String)">
             <summary>A string extension method that assert dir.</summary>
            
             <param name="dirPath">The dirPath to act on.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="T:NServiceKit.Common.Utils.PerfUtils">
            <summary>A performance utilities.</summary>
        </member>
        <member name="M:NServiceKit.Common.Utils.PerfUtils.ToTimeSpan(System.Int64)">
             <summary>A long extension method that converts the fromTicks to a time span.</summary>
            
             <param name="fromTicks">The fromTicks to act on.</param>
            
             <returns>fromTicks as a TimeSpan.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.PerfUtils.Measure(System.Int64,System.Action)">
             <summary>Measures.</summary>
            
             <param name="iterations">The iterations.</param>
             <param name="action">    The action.</param>
            
             <returns>A long.</returns>
        </member>
        <member name="T:NServiceKit.Common.Utils.CustomHttpResult">
            <summary>Encapsulates the result of a custom http.</summary>
        </member>
        <member name="T:NServiceKit.Common.Utils.ReflectionUtils">
            <summary>A reflection utilities.</summary>
        </member>
        <member name="F:NServiceKit.Common.Utils.ReflectionUtils.Log">
            <summary>The log.</summary>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.PopulateObject(System.Object)">
            <summary>
            Populate an object with Example data.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.PopulateObjectInternal(System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
            <summary>
            Populates the object with example data.
            </summary>
            <param name="obj"></param>
            <param name="recursionInfo">Tracks how deeply nested we are</param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.GetDefaultValue(System.Type)">
             <summary>Gets default value.</summary>
            
             <param name="type">The type.</param>
            
             <returns>The default value.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.GetAssignmentDefinition(System.Type,System.Type)">
             <summary>Gets assignment definition.</summary>
            
             <param name="toType">  Type of to.</param>
             <param name="fromType">Type of from.</param>
            
             <returns>The assignment definition.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.PopulateObject``2(``0,``1)">
             <summary>Populate object.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="to">  to.</param>
             <param name="from">Source for the.</param>
            
             <returns>To.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.PopulateWithNonDefaultValues``2(``0,``1)">
             <summary>Populate with non default values.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="to">  to.</param>
             <param name="from">Source for the.</param>
            
             <returns>To.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.PopulateFromPropertiesWithAttribute``2(``0,``1,System.Type)">
             <summary>Populate from properties with attribute.</summary>
            
             <typeparam name="To">  Type of to.</typeparam>
             <typeparam name="From">Type of from.</typeparam>
             <param name="to">           to.</param>
             <param name="from">         Source for the.</param>
             <param name="attributeType">Type of the attribute.</param>
            
             <returns>To.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.Object)">
             <summary>Sets a property.</summary>
            
             <param name="obj">         .</param>
             <param name="propertyInfo">Information describing the property.</param>
             <param name="value">       The value.</param>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.GetProperty(System.Object,System.Reflection.PropertyInfo)">
             <summary>Gets a property.</summary>
            
             <param name="obj">         .</param>
             <param name="propertyInfo">Information describing the property.</param>
            
             <returns>The property.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.SetValue(System.Reflection.FieldInfo,System.Reflection.PropertyInfo,System.Object,System.Object)">
             <summary>Sets a value.</summary>
            
             <param name="fieldInfo">   Information describing the field.</param>
             <param name="propertyInfo">Information describing the property.</param>
             <param name="obj">         .</param>
             <param name="value">       The value.</param>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.IsUnsettableValue(System.Reflection.FieldInfo,System.Reflection.PropertyInfo)">
             <summary>Query if 'fieldInfo' is unsettable value.</summary>
            
             <param name="fieldInfo">   Information describing the field.</param>
             <param name="propertyInfo">Information describing the property.</param>
            
             <returns>true if unsettable value, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.CreateDefaultValues(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.Dictionary{System.Type,System.Int32})">
             <summary>Creates default values.</summary>
            
             <param name="types">        The types.</param>
             <param name="recursionInfo">Tracks how deeply nested we are.</param>
            
             <returns>A new array of object.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.CreateDefaultValue(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
             <summary>Creates default value.</summary>
            
             <param name="type">         The type.</param>
             <param name="recursionInfo">Tracks how deeply nested we are.</param>
            
             <returns>The new default value.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.SetGenericCollection(System.Type,System.Object,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
             <summary>Sets generic collection.</summary>
            
             <param name="realisedListType">Type of the realised list.</param>
             <param name="genericObj">      The generic object.</param>
             <param name="recursionInfo">   Tracks how deeply nested we are.</param>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.PopulateArray(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Int32})">
             <summary>Populate array.</summary>
            
             <param name="type">         The type.</param>
             <param name="recursionInfo">Tracks how deeply nested we are.</param>
            
             <returns>An Array.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.CanCast(System.Type,System.Type)">
             <summary>TODO: replace with InAssignableFrom.</summary>
            
             <param name="toType">  Type of to.</param>
             <param name="fromType">Type of from.</param>
            
             <returns>true if we can cast, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Utils.ReflectionUtils.GetPropertyAttributes``1(System.Type)">
             <summary>Gets the property attributes in this collection.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="fromType">Type of from.</param>
            
             <returns>An enumerator that allows foreach to be used to process the property attributes in this collection.</returns>
        </member>
        <member name="T:NServiceKit.Common.Web.CompressedFileResult">
            <summary>Encapsulates the result of a compressed file.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.CompressedFileResult.Adler32ChecksumLength">
            <summary>Length of the adler 32 checksum.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.CompressedFileResult.DefaultContentType">
            <summary>The default content type.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressedFileResult.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.CompressedFileResult class.</summary>
            
             <param name="filePath">Full pathname of the file.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressedFileResult.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.CompressedFileResult class.</summary>
            
             <param name="filePath">       Full pathname of the file.</param>
             <param name="compressionType">Type of the compression.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressedFileResult.#ctor(System.String,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.CompressedFileResult class.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="filePath">       Full pathname of the file.</param>
             <param name="compressionType">Type of the compression.</param>
             <param name="contentMimeType">Type of the content mime.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressedFileResult.WriteTo(System.IO.Stream)">
             <summary>Writes to.</summary>
            
             <param name="responseStream">The response stream.</param>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedFileResult.FilePath">
             <summary>Gets the full pathname of the file.</summary>
            
             <value>The full pathname of the file.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedFileResult.Headers">
             <summary>Gets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedFileResult.Options">
             <summary>Gets options for controlling the operation.</summary>
            
             <value>The options.</value>
        </member>
        <member name="T:NServiceKit.Common.Web.CompressedResult">
            <summary>Encapsulates the result of a compressed.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.CompressedResult.Adler32ChecksumLength">
            <summary>Length of the adler 32 checksum.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.CompressedResult.DefaultContentType">
            <summary>The default content type.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressedResult.#ctor(System.Byte[])">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.CompressedResult class.</summary>
            
             <param name="contents">The contents.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressedResult.#ctor(System.Byte[],System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.CompressedResult class.</summary>
            
             <param name="contents">       The contents.</param>
             <param name="compressionType">Type of the compression.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressedResult.#ctor(System.Byte[],System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.CompressedResult class.</summary>
            
             <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or illegal values.</exception>
            
             <param name="contents">       The contents.</param>
             <param name="compressionType">Type of the compression.</param>
             <param name="contentMimeType">Type of the content mime.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressedResult.WriteTo(System.IO.Stream)">
             <summary>Writes to.</summary>
            
             <param name="responseStream">The response stream.</param>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.Contents">
             <summary>Gets the contents.</summary>
            
             <value>The contents.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.ContentType">
             <summary>The HTTP Response ContentType.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.Headers">
             <summary>Additional HTTP Headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.Status">
             <summary>The HTTP Response Status.</summary>
            
             <value>The status.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.StatusCode">
             <summary>The HTTP Response Status Code.</summary>
            
             <value>The status code.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.StatusDescription">
             <summary>The HTTP Status Description.</summary>
            
             <value>Information describing the status.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.Response">
             <summary>Response DTO.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <value>The response.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.ResponseFilter">
             <summary>if not provided, get's injected by NServiceKit.</summary>
            
             <value>The response filter.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.RequestContext">
             <summary>Holds the request call context.</summary>
            
             <value>The request context.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.CompressedResult.Options">
             <summary>Gets options for controlling the operation.</summary>
            
             <value>The options.</value>
        </member>
        <member name="T:NServiceKit.Common.Web.CompressionTypes">
            <summary>A compression types.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.CompressionTypes.Default">
            <summary>The default.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.CompressionTypes.Deflate">
            <summary>The deflate.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.CompressionTypes.GZip">
            <summary>The zip.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.CompressionTypes.AllCompressionTypes">
            <summary>List of types of all compressions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressionTypes.IsValid(System.String)">
             <summary>Query if 'compressionType' is valid.</summary>
            
             <param name="compressionType">Type of the compression.</param>
            
             <returns>true if valid, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressionTypes.AssertIsValid(System.String)">
             <summary>Assert is valid.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="compressionType">Type of the compression.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.CompressionTypes.GetExtension(System.String)">
             <summary>Gets an extension.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="compressionType">Type of the compression.</param>
            
             <returns>The extension.</returns>
        </member>
        <member name="T:NServiceKit.Common.Web.ContentType">
            <summary>A content type.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Utf8Suffix">
            <summary>The UTF 8 suffix.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.HeaderContentType">
            <summary>Type of the header content.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.FormUrlEncoded">
            <summary>The form URL encoded.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.MultiPartFormData">
            <summary>Information describing the multi part form.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Html">
            <summary>The HTML.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.JsonReport">
            <summary>The JSON report.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Xml">
            <summary>The XML.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.XmlText">
            <summary>The XML text.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Soap11">
            <summary>The first SOAP 1.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Soap12">
            <summary>The second SOAP 1.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Json">
            <summary>The JSON.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.JsonText">
            <summary>The JSON text.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.JavaScript">
            <summary>The java script.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Jsv">
            <summary>The jsv.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.JsvText">
            <summary>The jsv text.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Csv">
            <summary>The CSV.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Yaml">
            <summary>The yaml.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.YamlText">
            <summary>The yaml text.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.PlainText">
            <summary>The plain text.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.MarkdownText">
            <summary>The markdown text.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.ProtoBuf">
            <summary>Buffer for prototype data.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.MsgPack">
            <summary>The message pack.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Bson">
            <summary>The bson.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.Binary">
            <summary>The binary.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.ContentType.css">
            <summary>Css.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.ContentType.GetEndpointAttributes(System.String)">
             <summary>Gets endpoint attributes.</summary>
            
             <param name="contentType">The contentType to act on.</param>
            
             <returns>The endpoint attributes.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.ContentType.GetRealContentType(System.String)">
             <summary>Gets real content type.</summary>
            
             <param name="contentType">The contentType to act on.</param>
            
             <returns>The real content type.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.ContentType.MatchesContentType(System.String,System.String)">
             <summary>A string extension method that matches content type.</summary>
            
             <param name="contentType">       The contentType to act on.</param>
             <param name="matchesContentType">Type of the matches content.</param>
            
             <returns>true if matches content type, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.ContentType.IsBinary(System.String)">
             <summary>A string extension method that query if 'contentType' is binary.</summary>
            
             <param name="contentType">The contentType to act on.</param>
            
             <returns>true if binary, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.ContentType.ToFeature(System.String)">
             <summary>A string extension method that converts a contentType to a feature.</summary>
            
             <param name="contentType">The contentType to act on.</param>
            
             <returns>contentType as a Feature.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.ContentType.GetContentFormat(NServiceKit.ServiceHost.Format)">
             <summary>Gets content format.</summary>
            
             <param name="format">Describes the format to use.</param>
            
             <returns>The content format.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.ContentType.GetContentFormat(System.String)">
             <summary>Gets content format.</summary>
            
             <param name="contentType">The contentType to act on.</param>
            
             <returns>The content format.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.ContentType.ToContentFormat(System.String)">
             <summary>A string extension method that converts a contentType to a content format.</summary>
            
             <param name="contentType">The contentType to act on.</param>
            
             <returns>contentType as a string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.ContentType.ToContentType(NServiceKit.ServiceHost.Format)">
             <summary>A Format extension method that converts the formats to a content type.</summary>
            
             <param name="formats">The formats to act on.</param>
            
             <returns>formats as a string.</returns>
        </member>
        <member name="T:NServiceKit.Common.Web.EndPoint">
            <summary>An end point.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.EndPoint.#ctor(System.String,System.Int32)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.EndPoint class.</summary>
            
             <param name="host">The host.</param>
             <param name="port">The port.</param>
        </member>
        <member name="P:NServiceKit.Common.Web.EndPoint.Host">
             <summary>Gets the host.</summary>
            
             <value>The host.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.EndPoint.Port">
             <summary>Gets the port.</summary>
            
             <value>The port.</value>
        </member>
        <member name="T:NServiceKit.Common.Web.HttpError">
            <summary>A HTTP error.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
            
             <param name="message">The message.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor(System.Net.HttpStatusCode,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
            
             <param name="statusCode">The status code.</param>
             <param name="errorCode"> The error code.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor(System.Int32,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
            
             <param name="statusCode">The status code.</param>
             <param name="errorCode"> The error code.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor(System.Object,System.Net.HttpStatusCode,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
            
             <param name="responseDto"> The response dto.</param>
             <param name="statusCode">  The status code.</param>
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor(System.Object,System.Int32,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
            
             <param name="responseDto"> The response dto.</param>
             <param name="statusCode">  The status code.</param>
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor(System.Net.HttpStatusCode,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
            
             <param name="statusCode">  The status code.</param>
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor(System.Int32,System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
            
             <param name="statusCode">  The status code.</param>
             <param name="errorCode">   The error code.</param>
             <param name="errorMessage">Message describing the error.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor(System.Net.HttpStatusCode,System.Exception)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
            
             <param name="statusCode">    The status code.</param>
             <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.#ctor(System.String,System.Exception)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpError class.</summary>
            
             <param name="message">       The message.</param>
             <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.GetFieldErrors">
             <summary>Gets field errors.</summary>
            
             <returns>The field errors.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.NotFound(System.String)">
             <summary>Not found.</summary>
            
             <param name="message">The message.</param>
            
             <returns>An Exception.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.Unauthorized(System.String)">
             <summary>Unauthorized.</summary>
            
             <param name="message">The message.</param>
            
             <returns>An Exception.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpError.Conflict(System.String)">
             <summary>Conflicts.</summary>
            
             <param name="message">The message.</param>
            
             <returns>An Exception.</returns>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.ErrorCode">
             <summary>Gets or sets the error code.</summary>
            
             <value>The error code.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.Headers">
             <summary>Gets or sets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.Status">
             <summary>Gets or sets the status.</summary>
            
             <value>The status.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.StatusCode">
             <summary>Gets or sets the status code.</summary>
            
             <value>The status code.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.StatusDescription">
             <summary>Gets or sets information describing the status.</summary>
            
             <value>Information describing the status.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.Response">
             <summary>Gets or sets the response.</summary>
            
             <value>The response.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.ResponseFilter">
             <summary>Gets or sets the response filter.</summary>
            
             <value>The response filter.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.RequestContext">
             <summary>Gets or sets a context for the request.</summary>
            
             <value>The request context.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.Options">
             <summary>Gets options for controlling the operation.</summary>
            
             <value>The options.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpError.ResponseStatus">
             <summary>Gets the response status.</summary>
            
             <value>The response status.</value>
        </member>
        <member name="T:NServiceKit.Common.Web.HttpHeaders">
            <summary>A HTTP headers.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.XParamOverridePrefix">
            <summary>The parameter override prefix.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.XHttpMethodOverride">
            <summary>The HTTP method override.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.XUserAuthId">
            <summary>Identifier for the user authentication.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.XForwardedFor">
            <summary>The forwarded for.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.XRealIp">
            <summary>The real IP.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.Referer">
            <summary>The referer.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.CacheControl">
            <summary>The cache control.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.IfModifiedSince">
            <summary>if modified since.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.IfNoneMatch">
            <summary>A match specifying if none.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.LastModified">
            <summary>The last modified.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.Accept">
            <summary>The accept.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.AcceptEncoding">
            <summary>The accept encoding.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.ContentType">
            <summary>Type of the content.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.ContentEncoding">
            <summary>The content encoding.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.ContentLength">
            <summary>Length of the content.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.ContentDisposition">
            <summary>The content disposition.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.Location">
            <summary>The location.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.SetCookie">
            <summary>The set cookie.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.ETag">
            <summary>The tag.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.Authorization">
            <summary>The authorization.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.WwwAuthenticate">
            <summary>The WWW authenticate.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.AllowOrigin">
            <summary>The allow origin.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.AllowMethods">
            <summary>The allow methods.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.AllowHeaders">
            <summary>The allow headers.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.AllowCredentials">
            <summary>The allow credentials.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.AcceptRanges">
            <summary>The accept ranges.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.ContentRange">
            <summary>The content range.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpHeaders.Range">
            <summary>The range.</summary>
        </member>
        <member name="T:NServiceKit.Common.Web.HttpMethods">
            <summary>A HTTP methods.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpMethods.Get">
            <summary>The get.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpMethods.Put">
            <summary>The put.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpMethods.Post">
            <summary>The post.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpMethods.Delete">
            <summary>The delete.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpMethods.Options">
            <summary>Options for controlling the operation.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpMethods.Head">
            <summary>The head.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpMethods.Patch">
            <summary>The patch.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpMethods.AllVerbs">
            <summary>all verbs.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpMethods.HasVerb(System.String)">
             <summary>Query if 'httpVerb' has verb.</summary>
            
             <param name="httpVerb">The HTTP verb.</param>
            
             <returns>true if verb, false if not.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpMethods.GetEndpointAttribute(System.String)">
             <summary>Gets endpoint attribute.</summary>
            
             <param name="httpMethod">The HTTP method.</param>
            
             <returns>The endpoint attribute.</returns>
        </member>
        <member name="T:NServiceKit.Common.Web.HttpResponseFilter">
            <summary>A HTTP response filter.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpResponseFilter.Instance">
            <summary>The instance.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpResponseFilter.ContentTypeSerializers">
            <summary>The content type serializers.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpResponseFilter.ContentTypeResponseSerializers">
            <summary>The content type response serializers.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.HttpResponseFilter.ContentTypeDeserializers">
            <summary>The content type deserializers.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResponseFilter class.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.ClearCustomFilters">
            <summary>Clears the custom filters.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.GetFormatContentType(System.String)">
             <summary>Gets format content type.</summary>
            
             <param name="format">Describes the format to use.</param>
            
             <returns>The format content type.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.Register(System.String,NServiceKit.ServiceHost.StreamSerializerDelegate,NServiceKit.ServiceHost.StreamDeserializerDelegate)">
             <summary>Registers this object.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="contentType">       Type of the content.</param>
             <param name="streamSerializer">  The stream serializer.</param>
             <param name="streamDeserializer">The stream deserializer.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.Register(System.String,NServiceKit.ServiceHost.ResponseSerializerDelegate,NServiceKit.ServiceHost.StreamDeserializerDelegate)">
             <summary>Registers this object.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="contentType">       Type of the content.</param>
             <param name="responseSerializer">The response serializer.</param>
             <param name="streamDeserializer">The stream deserializer.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.SetContentTypeSerializer(System.String,NServiceKit.ServiceHost.StreamSerializerDelegate)">
             <summary>Sets content type serializer.</summary>
            
             <param name="contentType">     Type of the content.</param>
             <param name="streamSerializer">The stream serializer.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.SetContentTypeDeserializer(System.String,NServiceKit.ServiceHost.StreamDeserializerDelegate)">
             <summary>Sets content type deserializer.</summary>
            
             <param name="contentType">       Type of the content.</param>
             <param name="streamDeserializer">The stream deserializer.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.SerializeToBytes(NServiceKit.ServiceHost.IRequestContext,System.Object)">
             <summary>Serialize to bytes.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="requestContext">Context for the request.</param>
             <param name="response">      The response.</param>
            
             <returns>A byte[].</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.SerializeToString(NServiceKit.ServiceHost.IRequestContext,System.Object)">
             <summary>Serialize to string.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="requestContext">Context for the request.</param>
             <param name="response">      The response.</param>
            
             <returns>A string.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.SerializeToStream(NServiceKit.ServiceHost.IRequestContext,System.Object,System.IO.Stream)">
             <summary>Serialize to stream.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="requestContext">Context for the request.</param>
             <param name="response">      The response.</param>
             <param name="responseStream">The response stream.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.SerializeToResponse(NServiceKit.ServiceHost.IRequestContext,System.Object,NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Serialize to response.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="requestContext">Context for the request.</param>
             <param name="response">      The response.</param>
             <param name="httpResponse">  The HTTP response.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.GetResponseSerializer(System.String)">
             <summary>Gets response serializer.</summary>
            
             <param name="contentType">Type of the content.</param>
            
             <returns>The response serializer.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.GetStreamSerializer(System.String)">
             <summary>Gets stream serializer.</summary>
            
             <param name="contentType">Type of the content.</param>
            
             <returns>The stream serializer.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.DeserializeFromString(System.String,System.Type,System.String)">
             <summary>Deserialize from string.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="contentType">Type of the content.</param>
             <param name="type">       The type.</param>
             <param name="request">    The request.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.DeserializeFromStream(System.String,System.Type,System.IO.Stream)">
             <summary>Deserialize from stream.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="contentType">Type of the content.</param>
             <param name="type">       The type.</param>
             <param name="fromStream"> from stream.</param>
            
             <returns>An object.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseFilter.GetStreamDeserializer(System.String)">
             <summary>Gets stream deserializer.</summary>
            
             <param name="contentType">Type of the content.</param>
            
             <returns>The stream deserializer.</returns>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseFilter.ContentTypeFormats">
             <summary>Gets or sets the content type formats.</summary>
            
             <value>The content type formats.</value>
        </member>
        <member name="T:NServiceKit.Common.Web.HttpResponseStreamWrapper">
            <summary>A HTTP response stream wrapper.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseStreamWrapper.#ctor(System.IO.Stream)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResponseStreamWrapper class.</summary>
            
             <param name="stream">The stream.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseStreamWrapper.AddHeader(System.String,System.String)">
             <summary>Adds a header to 'value'.</summary>
            
             <param name="name"> The name.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseStreamWrapper.Redirect(System.String)">
             <summary>Redirects the given document.</summary>
            
             <param name="url">URL of the document.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseStreamWrapper.Write(System.String)">
             <summary>Writes.</summary>
            
             <param name="text">The text to write.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseStreamWrapper.Close">
            <summary>
            Signal that this response has been handled and no more processing should be done. When used in a request or response filter, no more filters or processing is done on this request.
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseStreamWrapper.ForceClose">
            <summary>Force close.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseStreamWrapper.End">
            <summary>Calls Response.End() on ASP.NET HttpResponse otherwise is an alias for Close(). Useful when you want to prevent ASP.NET to provide it's own custom error page.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseStreamWrapper.Flush">
            <summary>Response.Flush() and OutputStream.Flush() seem to have different behaviour in ASP.NET.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResponseStreamWrapper.SetContentLength(System.Int64)">
             <summary>Sets content length.</summary>
            
             <param name="contentLength">Length of the content.</param>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseStreamWrapper.Headers">
             <summary>Gets or sets the headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseStreamWrapper.OriginalResponse">
             <summary>The underlying ASP.NET or HttpListener HttpResponse.</summary>
            
             <value>The original response.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseStreamWrapper.StatusCode">
             <summary>Gets or sets the status code.</summary>
            
             <value>The status code.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseStreamWrapper.StatusDescription">
             <summary>Gets or sets information describing the status.</summary>
            
             <value>Information describing the status.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseStreamWrapper.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseStreamWrapper.KeepOpen">
             <summary>Gets or sets a value indicating whether the keep open.</summary>
            
             <value>true if keep open, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseStreamWrapper.Cookies">
             <summary>Gets or sets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseStreamWrapper.OutputStream">
             <summary>Gets the output stream.</summary>
            
             <value>The output stream.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResponseStreamWrapper.IsClosed">
             <summary>Gets a value indicating whether this instance is closed.</summary>
            
             <value>true if this object is closed, false if not.</value>
        </member>
        <member name="T:NServiceKit.Common.Web.HttpResult">
            <summary>Encapsulates the result of a http.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor">
            <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.Object)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="response">The response.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.Object,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="response">   The response.</param>
             <param name="contentType">The type of the content.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.Net.HttpStatusCode,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="statusCode">       The status code.</param>
             <param name="statusDescription">Information describing the status.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.Object,System.Net.HttpStatusCode)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="response">  The response.</param>
             <param name="statusCode">The status code.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.Object,System.String,System.Net.HttpStatusCode)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="response">   The response.</param>
             <param name="contentType">The type of the content.</param>
             <param name="statusCode"> The status code.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.IO.FileInfo,System.Boolean)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="fileResponse">The file response.</param>
             <param name="asAttachment">true to as attachment.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.IO.FileInfo,System.String,System.Boolean)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="fileResponse">The file response.</param>
             <param name="contentType"> The type of the content.</param>
             <param name="asAttachment">true to as attachment.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.IO.Stream,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="responseStream">The response stream.</param>
             <param name="contentType">   The type of the content.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.String,System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="responseText">The response text.</param>
             <param name="contentType"> The type of the content.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.#ctor(System.Byte[],System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.HttpResult class.</summary>
            
             <param name="responseBytes">The response in bytes.</param>
             <param name="contentType">  The type of the content.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.SetPermanentCookie(System.String,System.String)">
             <summary>Sets permanent cookie.</summary>
            
             <param name="name"> The name.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.SetPermanentCookie(System.String,System.String,System.String)">
             <summary>Sets permanent cookie.</summary>
            
             <param name="name"> The name.</param>
             <param name="value">The value.</param>
             <param name="path"> Full pathname of the file.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.SetSessionCookie(System.String,System.String)">
             <summary>Sets session cookie.</summary>
            
             <param name="name"> The name.</param>
             <param name="value">The value.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.SetSessionCookie(System.String,System.String,System.String)">
             <summary>Sets session cookie.</summary>
            
             <param name="name"> The name.</param>
             <param name="value">The value.</param>
             <param name="path"> Full pathname of the file.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.SetCookie(System.String,System.String,System.TimeSpan,System.String)">
             <summary>Sets a cookie.</summary>
            
             <param name="name">     The name.</param>
             <param name="value">    The value.</param>
             <param name="expiresIn">The expires in.</param>
             <param name="path">     Full pathname of the file.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.SetCookie(System.String,System.String,System.DateTime,System.String)">
             <summary>Sets a cookie.</summary>
            
             <param name="name">     The name.</param>
             <param name="value">    The value.</param>
             <param name="expiresAt">The expires at Date/Time.</param>
             <param name="path">     Full pathname of the file.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.DeleteCookie(System.String)">
             <summary>Deletes the cookie described by name.</summary>
            
             <param name="name">The name.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.WriteTo(System.IO.Stream)">
             <summary>Writes to.</summary>
            
             <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            
             <param name="responseStream">The response stream.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.WritePartialTo(NServiceKit.ServiceHost.IHttpResponse)">
             <summary>Write a partial content result.</summary>
            
             <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            
             <param name="response">The response.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.GetContentLength">
             <summary>Gets content length.</summary>
            
             <returns>The content length.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.Status201Created(System.Object,System.String)">
             <summary>Status 201 created.</summary>
            
             <param name="response">      The response.</param>
             <param name="newLocationUri">URI of the new location.</param>
            
             <returns>A HttpResult.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.Redirect(System.String,System.Net.HttpStatusCode)">
             <summary>Redirects.</summary>
            
             <param name="newLocationUri">URI of the new location.</param>
             <param name="redirectStatus">The redirect status.</param>
            
             <returns>A HttpResult.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResult.DisposeStream">
            <summary>Dispose stream.</summary>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.ResponseText">
             <summary>Gets the response text.</summary>
            
             <value>The response text.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.ResponseStream">
             <summary>Gets the response stream.</summary>
            
             <value>The response stream.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.FileInfo">
             <summary>Gets information describing the file.</summary>
            
             <value>Information describing the file.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.ContentType">
             <summary>The HTTP Response ContentType.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.Headers">
             <summary>Additional HTTP Headers.</summary>
            
             <value>The headers.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.AllowsPartialResponse">
             <summary>Gets or sets a value indicating whether we allows partial response.</summary>
            
             <value>true if allows partial response, false if not.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.LastModified">
             <summary>Sets the Date/Time of the last modified.</summary>
            
             <value>The last modified.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.Location">
             <summary>Sets the location.</summary>
            
             <value>The location.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.Options">
             <summary>Gets options for controlling the operation.</summary>
            
             <value>The options.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.Status">
             <summary>The HTTP Response Status.</summary>
            
             <value>The status.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.StatusCode">
             <summary>The HTTP Response Status Code.</summary>
            
             <value>The status code.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.StatusDescription">
             <summary>The HTTP Status Description.</summary>
            
             <value>Information describing the status.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.Response">
             <summary>Response DTO.</summary>
            
             <value>The response.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.ResponseFilter">
             <summary>if not provided, get's injected by NServiceKit.</summary>
            
             <value>The response filter.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.RequestContext">
             <summary>Holds the request call context.</summary>
            
             <value>The request context.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.View">
             <summary>Gets or sets the view.</summary>
            
             <value>The view.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.Template">
             <summary>Gets or sets the template.</summary>
            
             <value>The template.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.HttpResult.IsPartialRequest">
             <summary>Whether this HttpResult allows Partial Response.</summary>
            
             <value>true if this object is partial request, false if not.</value>
        </member>
        <member name="T:NServiceKit.Common.Web.HttpResultExtensions">
            <summary>A HTTP result extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.ToDto(System.Object)">
            <summary>
            Shortcut to get the ResponseDTO whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.ToResponseDto(System.Object)">
            <summary>
            Alias of ToDto
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.ToDto``1(System.Object)">
            <summary>
            Shortcut to get the ResponseDTO whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns>TResponse if found; otherwise null</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.ToResponseDto``1(System.Object)">
            <summary>
            Alias of ToDto
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.ToErrorResponse(NServiceKit.ServiceHost.IHttpError)">
             <summary>An IHttpError extension method that converts a httpError to an error response.</summary>
            
             <param name="httpError">The httpError to act on.</param>
            
             <returns>httpError as an object.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.ToResponseStatus(System.Object)">
            <summary>
            Shortcut to get the ResponseStatus whether it's bare or inside a IHttpResult
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.IsErrorResponse(System.Object)">
            <summary>
            Whether the response is an IHttpError or Exception
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.ExtractHttpRanges(System.String,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            rangeHeader should be of the format "bytes=0-" or "bytes=0-12345" or "bytes=123-456"
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.AddHttpRangeResponseHeaders(NServiceKit.ServiceHost.IHttpResponse,System.Int64,System.Int64,System.Int64)">
            <summary>
            Adds 206 PartialContent Status, Content-Range and Content-Length headers
            </summary>
        </member>
        <member name="M:NServiceKit.Common.Web.HttpResultExtensions.WritePartialTo(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Writes partial range as specified by start-end, from fromStream to toStream.
            </summary>
        </member>
        <member name="T:NServiceKit.Common.Web.MimeTypes">
            <summary>A mime types.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.MimeTypes.Html">
            <summary>The HTML.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.MimeTypes.Xml">
            <summary>The XML.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.MimeTypes.Json">
            <summary>The JSON.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.MimeTypes.Jsv">
            <summary>The jsv.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.MimeTypes.Csv">
            <summary>The CSV.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.MimeTypes.ProtoBuf">
            <summary>Buffer for prototype data.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.MimeTypes.JavaScript">
            <summary>The java script.</summary>
        </member>
        <member name="F:NServiceKit.Common.Web.MimeTypes.ExtensionMimeTypes">
            <summary>List of types of the extension mimes.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.MimeTypes.GetExtension(System.String)">
             <summary>Gets an extension.</summary>
            
             <exception cref="T:System.NotSupportedException">Thrown when the requested operation is not supported.</exception>
            
             <param name="mimeType">Type of the mime.</param>
            
             <returns>The extension.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.MimeTypes.GetMimeType(System.String)">
             <summary>Gets mime type.</summary>
            
             <param name="fileNameOrExt">Extent of the file name or.</param>
            
             <returns>The mime type.</returns>
        </member>
        <member name="T:NServiceKit.Common.RequestContextExtensions">
            <summary>A request context extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.RequestContextExtensions.SetItem(NServiceKit.ServiceHost.IRequestContext,System.String,System.Object)">
            <summary>
            Store an entry in the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="M:NServiceKit.Common.RequestContextExtensions.SetItem(NServiceKit.ServiceHost.IHttpRequest,System.String,System.Object)">
            <summary>
            Store an entry in the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="M:NServiceKit.Common.RequestContextExtensions.GetItem(NServiceKit.ServiceHost.IRequestContext,System.String)">
            <summary>
            Get an entry from the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="M:NServiceKit.Common.RequestContextExtensions.GetItem(NServiceKit.ServiceHost.IHttpRequest,System.String)">
            <summary>
            Get an entry from the IHttpRequest.Items Dictionary
            </summary>
        </member>
        <member name="T:NServiceKit.Common.Web.SerializationContext">
            <summary>A serialization context.</summary>
        </member>
        <member name="M:NServiceKit.Common.Web.SerializationContext.#ctor(System.String)">
             <summary>Initializes a new instance of the NServiceKit.Common.Web.SerializationContext class.</summary>
            
             <param name="contentType">The type of the content.</param>
        </member>
        <member name="M:NServiceKit.Common.Web.SerializationContext.Get``1">
             <summary>Gets the get.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
            
             <returns>A T.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.SerializationContext.GetHeader(System.String)">
             <summary>Gets a header.</summary>
            
             <param name="headerName">Name of the header.</param>
            
             <returns>The header.</returns>
        </member>
        <member name="M:NServiceKit.Common.Web.SerializationContext.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.IpAddress">
             <summary>Gets the IP address.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <value>The IP address.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.Cookies">
             <summary>Gets the cookies.</summary>
            
             <value>The cookies.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.EndpointAttributes">
             <summary>Gets the endpoint attributes.</summary>
            
             <value>The endpoint attributes.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.RequestAttributes">
             <summary>Gets the request attributes.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <value>The request attributes.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.ContentType">
             <summary>Gets or sets the type of the content.</summary>
            
             <value>The type of the content.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.ResponseContentType">
             <summary>Gets or sets the type of the response content.</summary>
            
             <value>The type of the response content.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.CompressionType">
             <summary>Gets or sets the type of the compression.</summary>
            
             <value>The type of the compression.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.AbsoluteUri">
             <summary>Gets URI of the absolute.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <value>The absolute URI.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.PathInfo">
             <summary>Gets information describing the path.</summary>
            
             <exception cref="T:System.NotImplementedException">Thrown when the requested operation is unimplemented.</exception>
            
             <value>Information describing the path.</value>
        </member>
        <member name="P:NServiceKit.Common.Web.SerializationContext.Files">
             <summary>Gets the files.</summary>
            
             <value>The files.</value>
        </member>
        <member name="T:NServiceKit.Common.Extensions.CustomExtensions">
            <summary>A custom extensions.</summary>
        </member>
        <member name="M:NServiceKit.Common.Extensions.CustomExtensions.To``1(System.IConvertible)">
             <summary>An IConvertible extension method that toes the given value.</summary>
            
             <typeparam name="T">Generic type parameter.</typeparam>
             <param name="value">The value to act on.</param>
            
             <returns>A T.</returns>
        </member>
    </members>
</doc>
